from docx import Document
from PyPDF2 import PdfReader
import pypandoc
from aiogram import Bot
import os
from gpt_gimini import sverka_vac_and_resume_json, generate_mail_for_candidate_finalist, generate_mail_for_candidate_utochnenie, generate_mail_for_candidate_otkaz, generate_cover_letter_for_client
import asyncio
from funcs import format_candidate_json_str
from striprtf.striprtf import rtf_to_text
from db import add_otkonechenie_resume
from kb import utochnit_prichinu_kb

# PDF ‚Üí —Ç–µ–∫—Å—Ç
def process_pdf(path: str) -> str:
    reader = PdfReader(path)
    text = []
    for page in reader.pages:
        text.append(page.extract_text() or "")
    return "\n".join(text)

# DOCX ‚Üí —Ç–µ–∫—Å—Ç
def process_docx(path: str) -> str:
    doc = Document(path)
    return "\n".join([p.text for p in doc.paragraphs])

# RTF ‚Üí —Ç–µ–∫—Å—Ç
def process_rtf(path: str) -> str:
    """
    –ß–∏—Ç–∞–µ—Ç RTF-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç.
    –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Pandoc.
    """
    with open(path, "r", encoding="utf-8") as f:
        content = f.read()
    text = rtf_to_text(content)
    return text

# TXT ‚Üí —Ç–µ–∫—Å—Ç
def process_txt(path: str) -> str:
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

async def process_file_and_gpt(path: str, bot: Bot, user_id: int|str, vac_text: str):
    ext = path.split(".")[-1].lower()
    
    try:
        if ext == "pdf":
            text = process_pdf(path)
        elif ext == "docx":
            text = process_docx(path)
        elif ext == "rtf":
            text = process_rtf(path)
        elif ext == "txt":
            text = process_txt(path)
        else:
            await bot.send_message(user_id, f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç {ext} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {path}")
            return
        
        text_gpt = await background_sverka(resume_text=text, vacancy_text=vac_text, bot=bot, user_id=user_id)
        
        os.remove(path)
    except Exception as e:
        await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –≤ {path}: {e}")
    finally:
        return text_gpt or None
        
async def background_sverka(resume_text: str, vacancy_text: str, bot: Bot, user_id: int|str):
    try:
        result_gpt = await sverka_vac_and_resume_json(resume_text, vacancy_text)
        
        if result_gpt:
            result = display_analysis(result_gpt)
            result_gpt = clean_json(result_gpt)
            mail = await create_mails(result_gpt)
            verdict = result_gpt.get("summary").get("verdict")
            candidate = result_gpt.get("candidate").get("full_name")
            if verdict == "–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç":
                mes = await bot.send_message(user_id, f"‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç {candidate} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", reply_markup=utochnit_prichinu_kb())
                await add_otkonechenie_resume(mes.message_id, result)
                return mail
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª—å—à–æ–π, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ —á–∞—Å—Ç—è–º
            for i in range(0, len(result), 4096):
                await bot.send_message(user_id, result[i:i+4096], parse_mode="HTML")
            
            return mail
        else:
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    except Exception as e:
        await bot.send_message(user_id, f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ: {e}")
        return None
    
    
        
        
        

import json


def clean_json(json_data):
    if isinstance(json_data, str):
        clean_str = json_data.strip()
        if clean_str.startswith('```json'):
            clean_str = clean_str[len('```json'):].strip()
        if clean_str.endswith('```'):
            clean_str = clean_str[:-len('```')].strip()
        
        try:
            data = json.loads(clean_str)
        except json.JSONDecodeError:
            return "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏."
    else:
        data = json_data
    return data

def display_analysis(json_data):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON-—Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å Python –∏ –í–û–ó–í–†–ê–©–ê–ï–¢
    —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ò–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, "–¢–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è" –∏ "–ò—Ç–æ–≥".
    –ï—Å–ª–∏ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–æ–¥–∏—Ç '‚ùå'.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä—ã –±–ª–æ–∫–∞ –∫–æ–¥–∞ ```json –∏ ```.
    """
    processed_data = json_data
    output_lines = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –æ—Ç—á–µ—Ç–∞

    # --- –ë–ª–æ–∫ –æ—á–∏—Å—Ç–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
    processed_data = clean_json(processed_data)
    data = processed_data

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è "–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ"
    def format_field(key, value):
        val_str = value if value else "‚ùå"
        return f"{key}: {val_str}"

    # --- –ö–ê–ù–î–ò–î–ê–¢ (—Ç–æ–ª—å–∫–æ –§–ò–û) ---
    output_lines.append("="*15 + " üë§ –ö–ê–ù–î–ò–î–ê–¢ " + "="*15)
    candidate = data.get("candidate", {})
    output_lines.append(format_field("–§–ò–û", candidate.get('full_name')))
    output_lines.append(format_field("‚Äî–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", candidate.get('birth_date').get('date')))
    
    output_lines.append(format_field("‚Äî–õ–æ–∫–∞—Ü–∏—è", candidate.get('location').get('city')))
    output_lines.append(format_field("‚Äî–°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π", ", ".join(candidate.get('tech_stack'))) )


    # --- –¢–ê–ë–õ–ò–¶–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø ---
    output_lines.append("\n" + "="*12 + " ‚úÖ –¢–ê–ë–õ–ò–¶–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø " + "="*12)
    compliance = data.get("compliance_check", {})
    status_map = { "–î–∞": "‚úÖ", "–ù–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ)": "‚ö†Ô∏è", "–ù–µ—Ç (—Ç–æ—á–Ω–æ –Ω–µ—Ç)": "‚ùå" }
    
    must_haves = compliance.get('must_have')
    if must_haves:
        for req in must_haves:
            icon = status_map.get(req.get('status'), '‚ñ´Ô∏è')
            output_lines.append(f"    {icon} {req.get('requirement')}")
    else:
        output_lines.append("    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")


    nice_to_haves = compliance.get('nice_to_have')
    if nice_to_haves:
        for req in nice_to_haves:
            icon = status_map.get(req.get('status'), '‚ñ´Ô∏è')
            output_lines.append(f"    {icon} {req.get('requirement')}")
    else:
        output_lines.append("    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")

    # --- –ò–¢–û–ì ---
    output_lines.append("\n" + "="*17 + " üèÅ –ò–¢–û–ì " + "="*17)
    summary = data.get("summary", {})
    if summary:
        output_lines.append(format_field("–í–µ—Ä–¥–∏–∫—Ç", summary.get('verdict')))
    output_lines.append("="*41)

    return "\n".join(output_lines)




def create_finalists_table(finalists: list[dict]):
  """
  –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ñ–∏–Ω–∞–ª–∏—Å—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.

  Args:
    finalists: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª–∏—Å—Ç–∞
               —Å –∫–ª—é—á–∞–º–∏ 'name', 'grade', 'location', 'stack', –∏ 'salary'.

  Returns:
    –°—Ç—Ä–æ–∫–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
  """

  
  
  header = "| –§–ò–û/–§–ò | –ì—Ä–µ–π–¥ | –õ–æ–∫–∞—Ü–∏—è | –ö–ª—é—á–µ–≤–æ–π —Å—Ç–µ–∫ | –ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è |\n"
  separator = "|---|---|---|---|---|\n"
  body = ""
  for finalist in finalists:
    if isinstance(finalist, str):
      continue
    candidate = finalist.get("candidate", {})
    summary = finalist.get("summary", {})
    verdict = summary.get("verdict", "")
    if verdict == "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ö–æ–¥–∏—Ç":
      body += f"| {candidate['full_name'] or '‚ùå'} | {candidate['grade_and_position'] or '‚ùå'} | {candidate['location']['city'] or '‚ùå'} | {summary['salary_expectations'] or '‚ùå'} |{summary['verdict'] or '‚ùå'}\n"
    elif verdict == "–ß–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç (–Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è)":
      body += f"| {candidate['full_name'] or '‚ùå'} | {candidate['grade_and_position'] or '‚ùå'} | {candidate['location']['city'] or '‚ùå'} | {summary['salary_expectations'] or '‚ùå'} |{summary['verdict'] or '‚ùå'}\n"
    elif verdict == "–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç":
      body += f"| {candidate['full_name'] or '‚ùå'} | {candidate['grade_and_position'] or '‚ùå'} | {candidate['location']['city'] or '‚ùå'} | {summary['salary_expectations'] or '‚ùå'} |{summary['verdict'] or '‚ùå'}\n"
  return header + separator + body





import csv

def create_candidates_csv(candidates: list[dict], filename: str = "candidates_report.csv"):
  """
  –°–æ–∑–¥–∞–µ—Ç CSV-—Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º.

  Args:
    candidates: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
    filename: –ò–º—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ CSV-—Ñ–∞–π–ª–∞.
  """
  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è CSV —Ñ–∞–π–ª–∞
  headers = ["–§–ò–û", "–ì—Ä–µ–π–¥ –∏ –ü–æ–∑–∏—Ü–∏—è", "–ì–æ—Ä–æ–¥", "–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è", "–í–µ—Ä–¥–∏–∫—Ç"]

  try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º with –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
    # encoding='utf-8-sig' –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Excel
    # newline='' –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    with open(filename, mode='w', newline='', encoding='utf-8-sig') as csv_file:
      writer = csv.writer(csv_file)

      # 1. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      writer.writerow(headers)

      # 2. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      for item in candidates:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ø–∏—Å–∫–µ (–µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞)
        if isinstance(item, str):
          continue

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        candidate_info = item.get("candidate", {})
        summary_info = item.get("summary", {})
        location_info = candidate_info.get("location", {})
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ CSV
        row = [
          candidate_info.get("full_name", "N/A"),
          candidate_info.get("grade_and_position", "N/A"),
          location_info.get("city", "N/A"),
          summary_info.get("salary_expectations", "N/A"),
          summary_info.get("verdict", "N/A")
        ]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª
        writer.writerow(row)
        
    print(f"‚úÖ –§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")

  except Exception as e:
    print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    
    
    
async def create_mails(finalist: dict):
    try:
    
      if isinstance(finalist, str):
        return None
      candidate = finalist.get("candidate", {})
      summary = finalist.get("summary", {})
      verdict = summary.get("verdict", "")
      cover_letter = None
      if verdict == "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ö–æ–¥–∏—Ç":
        res = await generate_mail_for_candidate_finalist(finalist)
        cover_letter = await generate_cover_letter_for_client(finalist)
        return [res, candidate.get('full_name'), cover_letter]
      elif verdict == "–ß–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç (–Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è)":
        res = await generate_mail_for_candidate_utochnenie(finalist)
        #cover_letter = await generate_cover_letter_for_client(finalist)
        return [res, candidate.get('full_name'), cover_letter]
      elif verdict == "–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç":
        res = await generate_mail_for_candidate_otkaz(finalist)
        return [res, candidate.get('full_name'), cover_letter]
    except Exception as e:
      print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Å—å–º–∞: {e}")
      return None