from docx import Document
from PyPDF2 import PdfReader
import pypandoc
from aiogram import Bot
import os
from gpt_gimini import sverka_vac_and_resume_json
import asyncio
from funcs import format_candidate_json_str
from striprtf.striprtf import rtf_to_text

# PDF ‚Üí —Ç–µ–∫—Å—Ç
def process_pdf(path: str) -> str:
    reader = PdfReader(path)
    text = []
    for page in reader.pages:
        text.append(page.extract_text() or "")
    return "\n".join(text)

# DOCX ‚Üí —Ç–µ–∫—Å—Ç
def process_docx(path: str) -> str:
    doc = Document(path)
    return "\n".join([p.text for p in doc.paragraphs])

# RTF ‚Üí —Ç–µ–∫—Å—Ç
def process_rtf(path: str) -> str:
    """
    –ß–∏—Ç–∞–µ—Ç RTF-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç.
    –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Pandoc.
    """
    with open(path, "r", encoding="utf-8") as f:
        content = f.read()
    text = rtf_to_text(content)
    return text

# TXT ‚Üí —Ç–µ–∫—Å—Ç
def process_txt(path: str) -> str:
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

async def process_file_and_gpt(path: str, bot: Bot, user_id: int|str, vac_text: str):
    ext = path.split(".")[-1].lower()
    try:
        if ext == "pdf":
            text = process_pdf(path)
        elif ext == "docx":
            text = process_docx(path)
        elif ext == "rtf":
            text = process_rtf(path)
        elif ext == "txt":
            text = process_txt(path)
        else:
            await bot.send_message(user_id, f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç {ext} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {path}")
            return
        
        text = asyncio.create_task(background_sverka(resume_text=text, vacancy_text=vac_text, bot=bot, user_id=user_id))
        
        os.remove(path)
    except Exception as e:
        await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –≤ {path}: {e}")
        
        
async def background_sverka(resume_text: str, vacancy_text: str, bot: Bot, user_id: int|str):
    try:
        result = await asyncio.to_thread(sverka_vac_and_resume_json, vacancy_text, resume_text)
        
        if result:
            result = display_analysis(result)
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª—å—à–æ–π, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ —á–∞—Å—Ç—è–º
            for i in range(0, len(result), 4096):
                await bot.send_message(user_id, result[i:i+4096], parse_mode="HTML")
        else:
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    except Exception as e:
        await bot.send_message(user_id, f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ: {e}")
        
        
        
        
        
        
import json

def display_analysis(json_data):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON-—Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å Python –∏ –≤—ã–≤–æ–¥–∏—Ç
    —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
    """
    if isinstance(json_data, str):
        try:
            data = json.loads(json_data)
        except json.JSONDecodeError:
            print("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON.")
            return
    else:
        data = json_data

    def print_field(key, value, indent=0):
        prefix = " " * indent
        val_str = value if value is not None else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        print(f"{prefix}{key}: {val_str}")

    # --- –í–ê–ö–ê–ù–°–ò–Ø ---
    print("\n" + "="*15 + " üìù –í–ê–ö–ê–ù–°–ò–Ø " + "="*15)
    vacancy = data.get("vacancy", {})
    if vacancy:
        pos_id = f"(ID: {vacancy.get('position_id')})" if vacancy.get('position_id') else ""
        print_field("–ü–æ–∑–∏—Ü–∏—è", f"{vacancy.get('position_name')} {pos_id}")
        print_field("–ì—Ä–µ–π–¥", vacancy.get('grade'))
        print_field("–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã", vacancy.get('work_format'))
        loc = vacancy.get('location_requirements', {})
        print_field("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–æ–∫–∞—Ü–∏–∏", f"{loc.get('location')}, –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {loc.get('citizenship')}, –ø–æ—è—Å: {loc.get('timezone')}")
        print_field("–ö–æ–Ω—Ç–∞–∫—Ç", vacancy.get('manager_telegram_nickname'))
    
    # --- –ö–ê–ù–î–ò–î–ê–¢ ---
    print("\n" + "="*15 + " üë§ –ö–ê–ù–î–ò–î–ê–¢ " + "="*15)
    candidate = data.get("candidate", {})
    if candidate:
        print_field("–§–ò–û", candidate.get('full_name'))
        b_date = candidate.get('birth_date', {})
        if b_date and b_date.get('date'):
            print_field("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", f"{b_date.get('date')} ({b_date.get('age')})")
        loc = candidate.get('location', {})
        print_field("–õ–æ–∫–∞—Ü–∏—è", f"{loc.get('city')}, {loc.get('country')}")
        print_field("–ü–æ–∑–∏—Ü–∏—è", candidate.get('grade_and_position'))

        print("\n  –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:")
        for exp in candidate.get("experience", []):
            print(f"    - –ö–æ–º–ø–∞–Ω–∏—è: {exp.get('company_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} ({exp.get('period', 'N/A')})")
            print(f"      –î–æ–ª–∂–Ω–æ—Å—Ç—å: {exp.get('role', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
            for proj in exp.get('projects', []):
                print(f"      –ü—Ä–æ–µ–∫—Ç: {proj.get('project_description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                print("        –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:")
                for resp in proj.get('responsibilities', []):
                    print(f"          ‚Ä¢ {resp}")
        
        print("\n  –°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:", ', '.join(candidate.get('tech_stack', [])) or "–Ω–µ —É–∫–∞–∑–∞–Ω")

    # --- –¢–ê–ë–õ–ò–¶–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø ---
    print("\n" + "="*12 + " ‚úÖ –¢–ê–ë–õ–ò–¶–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø " + "="*12)
    compliance = data.get("compliance_check", {})
    status_map = {
        "–î–∞": "‚úÖ",
        "–ù–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ)": "‚ùì",
        "–ù–µ—Ç (—Ç–æ—á–Ω–æ –Ω–µ—Ç)": "‚ùå"
    }
    
    print("\n  –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
    for req in compliance.get('must_have', []):
        icon = status_map.get(req.get('status'), '‚ñ´Ô∏è')
        print(f"    {icon} {req.get('requirement')}")
        print(f"      ‚îî‚îÄ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {req.get('comment')}")

    print("\n  –ë—É–¥–µ—Ç –ø–ª—é—Å–æ–º:")
    for req in compliance.get('nice_to_have', []):
        icon = status_map.get(req.get('status'), '‚ñ´Ô∏è')
        print(f"    {icon} {req.get('requirement')}")
        print(f"      ‚îî‚îÄ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {req.get('comment')}")

    # --- –ò–¢–û–ì ---
    print("\n" + "="*17 + " üèÅ –ò–¢–û–ì " + "="*17)
    summary = data.get("summary", {})
    if summary:
        print_field("–í–µ—Ä–¥–∏–∫—Ç", summary.get('verdict'))
        print_field("–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è", summary.get('salary_expectations'))
    print("="*40)


