from docx import Document
from PyPDF2 import PdfReader
import pypandoc
from aiogram import Bot
import os
from gpt_gimini import sverka_vac_and_resume_json
import asyncio
from funcs import format_candidate_json_str
from striprtf.striprtf import rtf_to_text

# PDF ‚Üí —Ç–µ–∫—Å—Ç
def process_pdf(path: str) -> str:
    reader = PdfReader(path)
    text = []
    for page in reader.pages:
        text.append(page.extract_text() or "")
    return "\n".join(text)

# DOCX ‚Üí —Ç–µ–∫—Å—Ç
def process_docx(path: str) -> str:
    doc = Document(path)
    return "\n".join([p.text for p in doc.paragraphs])

# RTF ‚Üí —Ç–µ–∫—Å—Ç
def process_rtf(path: str) -> str:
    """
    –ß–∏—Ç–∞–µ—Ç RTF-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç.
    –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Pandoc.
    """
    with open(path, "r", encoding="utf-8") as f:
        content = f.read()
    text = rtf_to_text(content)
    return text

# TXT ‚Üí —Ç–µ–∫—Å—Ç
def process_txt(path: str) -> str:
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

async def process_file_and_gpt(path: str, bot: Bot, user_id: int|str, vac_text: str):
    ext = path.split(".")[-1].lower()
    try:
        if ext == "pdf":
            text = process_pdf(path)
        elif ext == "docx":
            text = process_docx(path)
        elif ext == "rtf":
            text = process_rtf(path)
        elif ext == "txt":
            text = process_txt(path)
        else:
            await bot.send_message(user_id, f"‚ö†Ô∏è –§–æ—Ä–º–∞—Ç {ext} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {path}")
            return
        
        text = asyncio.create_task(background_sverka(resume_text=text, vacancy_text=vac_text, bot=bot, user_id=user_id))
        
        os.remove(path)
    except Exception as e:
        await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –≤ {path}: {e}")
        
        
async def background_sverka(resume_text: str, vacancy_text: str, bot: Bot, user_id: int|str):
    try:
        result = await asyncio.to_thread(sverka_vac_and_resume_json, vacancy_text, resume_text)
        
        if result:
            result = display_analysis(result)
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª—å—à–æ–π, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ —á–∞—Å—Ç—è–º
            for i in range(0, len(result), 4096):
                await bot.send_message(user_id, result[i:i+4096], parse_mode="HTML")
        else:
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    except Exception as e:
        await bot.send_message(user_id, f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–µ—Ä–∫–µ: {e}")
        
        
        

import json

def display_analysis(json_data):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON-—Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å Python –∏ –í–û–ó–í–†–ê–©–ê–ï–¢
    —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ò–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, "–¢–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è" –∏ "–ò—Ç–æ–≥".
    –ï—Å–ª–∏ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–æ–¥–∏—Ç '‚ùå'.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä—ã –±–ª–æ–∫–∞ –∫–æ–¥–∞ ```json –∏ ```.
    """
    processed_data = json_data
    output_lines = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –æ—Ç—á–µ—Ç–∞

    # --- –ë–ª–æ–∫ –æ—á–∏—Å—Ç–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
    if isinstance(processed_data, str):
        clean_str = processed_data.strip()
        if clean_str.startswith('```json'):
            clean_str = clean_str[len('```json'):].strip()
        if clean_str.endswith('```'):
            clean_str = clean_str[:-len('```')].strip()
        
        try:
            data = json.loads(clean_str)
        except json.JSONDecodeError:
            return "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏."
    else:
        data = processed_data

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è "–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ"
    def format_field(key, value):
        val_str = value if value else "‚ùå"
        return f"{key}: {val_str}"

    # --- –ö–ê–ù–î–ò–î–ê–¢ (—Ç–æ–ª—å–∫–æ –§–ò–û) ---
    output_lines.append("="*15 + " üë§ –ö–ê–ù–î–ò–î–ê–¢ " + "="*15)
    candidate = data.get("candidate", {})
    output_lines.append(format_field("–§–ò–û", candidate.get('full_name')))


    # --- –¢–ê–ë–õ–ò–¶–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø ---
    output_lines.append("\n" + "="*12 + " ‚úÖ –¢–ê–ë–õ–ò–¶–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø " + "="*12)
    compliance = data.get("compliance_check", {})
    status_map = { "–î–∞": "‚úÖ", "–ù–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ)": "‚ùì", "–ù–µ—Ç (—Ç–æ—á–Ω–æ –Ω–µ—Ç)": "‚ùå" }
    
    output_lines.append("\n üìé –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
    must_haves = compliance.get('must_have')
    if must_haves:
        for req in must_haves:
            icon = status_map.get(req.get('status'), '‚ñ´Ô∏è')
            output_lines.append(f"    {icon} {req.get('requirement')}")
            output_lines.append(f"      ‚îî‚îÄ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {req.get('comment')}")
    else:
        output_lines.append("    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")

    output_lines.append("\n üìé –ë—É–¥–µ—Ç –ø–ª—é—Å–æ–º:")
    nice_to_haves = compliance.get('nice_to_have')
    if nice_to_haves:
        for req in nice_to_haves:
            icon = status_map.get(req.get('status'), '‚ñ´Ô∏è')
            output_lines.append(f"    {icon} {req.get('requirement')}")
            output_lines.append(f"      ‚îî‚îÄ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {req.get('comment')}")
    else:
        output_lines.append("    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")

    # --- –ò–¢–û–ì ---
    output_lines.append("\n" + "="*17 + " üèÅ –ò–¢–û–ì " + "="*17)
    summary = data.get("summary", {})
    if summary:
        output_lines.append(format_field("–í–µ—Ä–¥–∏–∫—Ç", summary.get('verdict')))
        output_lines.append(format_field("–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è", summary.get('salary_expectations')))
    output_lines.append("="*41)

    return "\n".join(output_lines)