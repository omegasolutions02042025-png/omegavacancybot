import inspect
from collections import namedtuple
if not hasattr(inspect, "getargspec"):
    ArgSpec = namedtuple('ArgSpec', ['args', 'varargs', 'keywords', 'defaults'])
    def getargspec(func):
        spec = inspect.getfullargspec(func)
        return ArgSpec(
            args=spec.args,
            varargs=spec.varargs,
            keywords=spec.varkw,
            defaults=spec.defaults,
        )
    inspect.getargspec = getargspec

# --- –û–±—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

import re

async def update_channels_and_restart_handler(new_channels, CHANNELS, register_handler):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    CHANNELS.clear()
    CHANNELS.extend(new_channels)
    await register_handler()



def is_russia_only_citizenship(text: str) -> bool:
	"""
	–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
	- –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: –æ—Ç—Å–µ—á—å, –µ—Å–ª–∏ —Å—Ç—Ä–æ–≥–æ –†–§/–†–æ—Å—Å–∏—è –±–µ–∑ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö/—Ä–∞–∑—Ä–µ—à–∞—é—â–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
	- –õ–æ–∫–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: –æ—Ç—Å–µ—á—å, –µ—Å–ª–∏ —Å—Ç—Ä–æ–≥–æ –†–§/–†–æ—Å—Å–∏—è –±–µ–∑ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö/—Ä–∞–∑—Ä–µ—à–∞—é—â–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
	–û—Ç—Å–µ–∫–∞–µ–º, –µ—Å–ª–∏ –õ–Æ–ë–û–ô –∏–∑ –±–ª–æ–∫–æ–≤ —Å—Ç—Ä–æ–≥–∏–π (OR), –¥–∞–∂–µ –µ—Å–ª–∏ –≤ –¥—Ä—É–≥–æ–º –±–ª–æ–∫–µ —É–∫–∞–∑–∞–Ω–æ "–ª—é–±–æ–π"/–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ.
	"""
	text_lower = text.lower()

	# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
	friendly_keywords = [
		"—Ä–±", "–±–µ–ª–∞—Ä—É—Å—å", "–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–∞—Ä–º–µ–Ω–∏—è", "–∫–∏—Ä–≥–∏–∑–∏—è", "–∫—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω",
		"—É–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "—Ç–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω", "–∞–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω", "—Å–µ—Ä–±–∏—è", "—Ç—É—Ä—Ü–∏—è", "—Å–Ω–≥", "–µ–∞—ç—Å",
		"—Ä—Ñ/—Ä–±", "—Ä—Ñ –∏ —Ä–±", "—Ä—Ñ –ª–∏–±–æ —Ä–±", "—Ä—Ñ, —Ä–±"
	]
	broad_allow_keywords = [
		"–ª—é–±–æ–π", "–ª—é–±–∞—è", "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", "any", "worldwide", "global",
		"–ª—é–±–∞—è –ª–æ–∫–∞—Ü–∏—è", "–ª—é–±–æ–π —Ä–µ–≥–∏–æ–Ω", "–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏"
	]
	strict_russia_patterns = [
		r"—Ç–æ–ª—å–∫–æ\s*(?:—Ä—Ñ|—Ä–æ—Å—Å–∏—è)",
		r"—Ç–æ–ª—å–∫–æ\s*–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ\s*—Ä—Ñ",
		r"–ø–∞—Å–ø–æ—Ä—Ç\s*—Ä—Ñ\s*–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
		r"–Ω–∞–ª–æ–≥–æ–≤–æ–µ\s*—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–æ\s*—Ä—Ñ\s*–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
		r"–∂–∏—Ç–µ–ª–∏\s*—Ä—Ñ",
		r"–∏–∑\s*—Ä—Ñ",
		r"–ª–æ–∫:\s*—Ä—Ñ",
		r"–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\s*–≤\s*—Ä—Ñ"
	]

	def contains_any(segment: str, keywords: list[str]) -> bool:
		return any(kw in segment for kw in keywords)

	def has_strict_russia(segment: str) -> bool:
		# –Ø–≤–Ω—ã–µ —Å—Ç—Ä–æ–≥–æ—Å—Ç—å/–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		for p in strict_russia_patterns:
			if re.search(p, segment):
				return True
		# –ü—Ä–æ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –†–§/–†–æ—Å—Å–∏—è –ë–ï–ó –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö/—Ä–∞–∑—Ä–µ—à–∞—é—â–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ ‚Äî —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–≥–∏–º
		if re.search(r"\b—Ä—Ñ\b|\b—Ä–æ—Å—Å–∏—è\b", segment):
			if not contains_any(segment, friendly_keywords) and not contains_any(segment, broad_allow_keywords):
				return True
		return False

	def segment_is_strict(segment: str) -> bool:
		# –ï—Å–ª–∏ —è–≤–Ω–æ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ/—Ä–∞–∑—Ä–µ—à–∞—é—â–∏–µ ‚Äî –Ω–µ —Å—Ç—Ä–æ–≥–∏–π
		if contains_any(segment, friendly_keywords) or contains_any(segment, broad_allow_keywords):
			return False
		# –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–≥–æ—Å—Ç—å –†–§
		return has_strict_russia(segment)

	strict_citizenship = False
	strict_location = False

	# 1) –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
	m_cit = re.search(r"–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ\s*[:\-]?\s*(.+)", text_lower, flags=re.IGNORECASE)
	if m_cit:
		strict_citizenship = segment_is_strict(m_cit.group(1))

	# 2) –õ–æ–∫–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
	m_loc = re.search(r"–ª–æ–∫–∞—Ü–∏—è\s*—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\s*[:\-]?\s*(.+)", text_lower, flags=re.IGNORECASE)
	if m_loc:
		strict_location = segment_is_strict(m_loc.group(1))

	# –û—Ç—Å–µ–∫–∞–µ–º, –µ—Å–ª–∏ –ª—é–±–æ–π –±–ª–æ–∫ —Å—Ç—Ä–æ–≥–∏–π
	return strict_citizenship or strict_location



import pymorphy2

def oplata_filter(text: str) -> bool:
    morph = pymorphy2.MorphAnalyzer()
    filters_raw = [
        "–∞–∫—Ç—ã –ø–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ", "–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–µ –∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–ø–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞", "–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–ø–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ", "–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞", "–ø–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è"
    ]

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    text_lower = text.lower()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    for phrase in filters_raw:
        if phrase.lower() in text_lower:
            return True
    
    # –ï—Å–ª–∏ —Ñ—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    text_words = text_lower.split()
    
    for word in text_words:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–æ–≤–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        parsed_word = morph.parse(word)[0]
        normal_word = parsed_word.normal_form
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        for filter_phrase in filters_raw:
            filter_words = filter_phrase.lower().split()
            for filter_word in filter_words:
                # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ "–æ–ø–ª–∞—Ç–∞"
                if normal_word == filter_word and filter_word not in ["–æ–ø–ª–∞—Ç–∞"]:
                    return True
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ "–ø–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ" –∏–ª–∏ "–∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π" - —Ç–æ—á–Ω–æ True
                elif "–∫–≤–∞—Ä—Ç–∞–ª" in normal_word or "–ø–æ–∫–≤–∞—Ä—Ç–∞–ª" in normal_word:
                    return True
    
    return False





def check_project_duration(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ 3 –º–µ—Å—è—Ü–∞ –∏–ª–∏ –º–µ–Ω–µ–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç–∞–∫–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤–∞–∫–∞–Ω—Å–∏—é –Ω—É–∂–Ω–æ –æ—Ç—Å–µ—á—å).
    
    Args:
        text (str): –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å <= 3 –º–µ—Å—è—Ü–∞, False –µ—Å–ª–∏ –±–æ–ª—å—à–µ 3 –º–µ—Å—è—Ü–µ–≤
    """
    import re
    
    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    text_lower = text.lower()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 3 –º–µ—Å—è—Ü–∞ –∏–ª–∏ –º–µ–Ω–µ–µ
    patterns = [
        r'(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)\s*(?:–∏\s*–º–µ–Ω–µ–µ|–∏–ª–∏\s*–º–µ–Ω–µ–µ|–¥–æ)',
        r'–æ—Ç\s*(\d+)\s*(?:–¥–æ\s*)?(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)\s*(?:–∏\s*–º–µ–Ω—å—à–µ|–∏–ª–∏\s*–º–µ–Ω—å—à–µ)',
        r'–º–µ–Ω–µ–µ\s*(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–¥–æ\s*(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)\s*(?:–º–∞–∫—Å–∏–º—É–º|–º–∞–∫—Å)',
        r'–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\s*(?:–ø—Ä–æ–µ–∫—Ç–∞)?\s*(?:–æ—Ç\s*)?(\d+)\s*(?:–¥–æ\s*)?(\d+)?\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\s*(?:–ø—Ä–æ–µ–∫—Ç–∞)?\s*(?:–æ—Ç\s*)?(\d+)\s*(?:–¥–æ\s*)?(\d+)?\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'—Å—Ä–æ–∫\s*(?:–ø—Ä–æ–µ–∫—Ç–∞)?\s*(?:–æ—Ç\s*)?(\d+)\s*(?:–¥–æ\s*)?(\d+)?\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)'
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, text_lower)
        for match in matches:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            if len(match) == 2:  # –û–¥–Ω–æ —á–∏—Å–ª–æ + –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                number = int(match[0])
                if number <= 3:
                    return True
            elif len(match) == 3:  # –î–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª + –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                try:
                    num1 = int(match[0])
                    num2 = int(match[1]) if match[1] else num1
                    # –ï—Å–ª–∏ –ª—é–±–æ–µ –∏–∑ —á–∏—Å–µ–ª 3 –∏–ª–∏ –º–µ–Ω—å—à–µ, –æ—Ç—Å–µ–∫–∞–µ–º
                    if num1 <= 3 or num2 <= 3:
                        return True
                except ValueError:
                    continue
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —è–≤–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π 3 –º–µ—Å—è—Ü–µ–≤ –∏–ª–∏ –º–µ–Ω–µ–µ
    explicit_patterns = [
        r'3\s*\+\s*–º–µ—Å',
        r'–æ—Ç\s*(\d+)\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)\s*\+', # –ù–∞—Ö–æ–¥–∏—Ç "–æ—Ç N –º–µ—Å—è—Ü–µ–≤ +"
        r'–æ—Ç\s*3—Ö\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)\s*\+',
        r'–æ—Ç\s*(?:3|—Ç—Ä–µ—Ö|—Ç—Ä—ë—Ö)\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)\s*\+',
        r'–ø—Ä–æ–µ–∫—Ç\s+–Ω–∞\s*(?:1|2|3|–æ–¥–∏–Ω|–¥–≤–∞|—Ç—Ä–∏)\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'^(?:3|—Ç—Ä–∏)\s*(?:\+|plus)\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–ø—Ä–æ–µ–∫—Ç\s+–Ω–∞\s+3\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'—Å—Ä–æ–∫\s*:\s*3\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\s*:\s*3\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\s*:\s*3\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)'
    ]
    
    for pattern in explicit_patterns:
        if re.search(pattern, text_lower):
            return True
    
    return False

text = """

RedLab Partners, [19.08.2025 11:52]
üÜî 8695 

ü•á –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ Jira (Middle-/Middle+)

–°—Ç–µ–∫:
Jira: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è
–ü–ª–∞–≥–∏–Ω—ã: Tempo, BigPicture, ScriptRunner
–Ø–∑—ã–∫–∏: Groovy (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), Python/JS (–ø–ª—é—Å)
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: REST API, Webhooks
–ì—Ä–µ–π–¥: Middle-/Middle+
–û–ø—ã—Ç –≤ –≥–æ–¥–∞—Ö: 
–õ–æ–∫–∞—Ü–∏—è: –†–§
–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: –õ—é–±–æ–µ

–û –ø—Ä–æ–µ–∫—Ç–µ:
–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è Jira (Cloud/Server) –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏

–ó–∞–¥–∞—á–∏:
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö workflow –∏ dashboards
–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ Groovy (ScriptRunner)
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤ (Tempo, BigPicture)
–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π
–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Jira
–ö–ª–∏–µ–Ω—Ç: [IT-–∫–æ–º–ø–∞–Ω–∏—è/–ø—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞]
–°—Ç–∞—Ä—Ç: ASAP
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –î–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞ (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–ª–µ–Ω–∏—è)

–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:
–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: –£–¥–∞–ª—ë–Ω–∫–∞
–°—Ç–∞–≤–∫–∞ –∑–∞–∫—É–ø–∫–∏:
–î–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –†–§: –¥–æ 2000
–î–ª—è –Ω–µ—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –†–§: –¥–æ 1800
–ó–∞–≥—Ä—É–∑–∫–∞: –§—É–ª–ª-—Ç–∞–π–º
–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã:  35 —Ä.–¥.

üìå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:

‚úÖ –ì–ª—É–±–æ–∫–æ–µ –∑–Ω–∞–Ω–∏–µ Jira (Cloud/Data Center)
‚úÖ –û–ø—ã—Ç —Å ScriptRunner (Groovy)
‚úÖ –†–∞–±–æ—Ç–∞ —Å Tempo, BigPicture
‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö workflow/

‚ûï –ü–ª—é—Å–æ–º:

üîπ –û–ø—ã—Ç —Å –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞–≥–∏–Ω–∞–º–∏ (e.g. Automation, Structure)
üîπ –ó–Ω–∞–Ω–∏–µ REST API Jira
üîπ –ë–∞–∑–æ–≤—ã–π SQL (–¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤)

üìù –ö–∞–∫ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è:
–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ CV (Word/PDF) —Å –ø–æ–º–µ—Ç–∫–∞–º–∏:
–§–ò–û + –ª–æ–∫–∞—Ü–∏—è
–û–ø—ã—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ –ø–ª–∞–≥–∏–Ω–∞–º–∏ (Tempo/BigPicture ‚Äî –î–ê/–ù–ï–¢)

–í–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚û°Ô∏è@iVvvvTvvvVi
–£–∫–∞–∑–∞—Ç—å üÜî –∑–∞–ø—Ä–æ—Å–∞.

–í–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚û°Ô∏è@Lyayssan
"""

# print(check_project_duration(text=text))