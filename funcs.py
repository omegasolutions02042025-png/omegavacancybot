import inspect
from collections import namedtuple
from db import get_next_sequence_number
from gpt_gimini import generate_hashtags_gemini
from aiogram import Bot
from datetime import datetime
import pytz
import json
import re

if not hasattr(inspect, "getargspec"):
    ArgSpec = namedtuple('ArgSpec', ['args', 'varargs', 'keywords', 'defaults'])
    def getargspec(func):
        spec = inspect.getfullargspec(func)
        return ArgSpec(
            args=spec.args,
            varargs=spec.varargs,
            keywords=spec.varkw,
            defaults=spec.defaults,
        )
    inspect.getargspec = getargspec

# --- –û–±—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---










def check_project_duration(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –º–µ–Ω–µ–µ 3 –º–µ—Å—è—Ü–µ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç–∞–∫–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤–∞–∫–∞–Ω—Å–∏—é –Ω—É–∂–Ω–æ –æ—Ç—Å–µ—á—å).
    –ü—Ä–æ–µ–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 3 –º–µ—Å—è—Ü–µ–≤ –∏ –±–æ–ª–µ–µ.
    """
    import re
    text_lower = text.lower()

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å —á–∏—Å–ª–∞–º–∏ ‚Äî –∏—â–µ–º —Ç–æ–ª—å–∫–æ "1" –∏–ª–∏ "2" (–º–µ–Ω–µ–µ 3 –º–µ—Å—è—Ü–µ–≤)
    numeric_patterns = [
        r':\s*(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',  # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è ": X –º–µ—Å—è—Ü–µ–≤"
        r'(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)\s*(?:–∏\s*–º–µ–Ω–µ–µ|–∏–ª–∏\s*–º–µ–Ω–µ–µ|–¥–æ)',
        r'–æ—Ç\s*(\d+)\s*(?:–¥–æ\s*)?(\d+)?\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)\s*(?:–∏\s*–º–µ–Ω—å—à–µ|–∏–ª–∏\s*–º–µ–Ω—å—à–µ)',
        r'–º–µ–Ω–µ–µ\s*(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–¥–æ\s*(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)\s*(?:–º–∞–∫—Å–∏–º—É–º|–º–∞–∫—Å)',
        r'–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\s*(?:–ø—Ä–æ–µ–∫—Ç–∞)?\s*(?:–æ—Ç\s*)?(\d+)\s*(?:–¥–æ\s*)?(\d+)?\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\s*–ø—Ä–æ–µ–∫—Ç–∞\s*:\s*(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\s*(?:–ø—Ä–æ–µ–∫—Ç–∞)?\s*(?:–æ—Ç\s*)?(\d+)\s*(?:–¥–æ\s*)?(\d+)?\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'—Å—Ä–æ–∫\s*(?:–ø—Ä–æ–µ–∫—Ç–∞)?\s*(?:–æ—Ç\s*)?(\d+)\s*(?:–¥–æ\s*)?(\d+)?\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–∫–æ–Ω—Ç—Ä–∞–∫—Ç\s*(?:–Ω–∞\s*)?(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'—Ä–∞–±–æ—Ç–∞\s*(?:–Ω–∞\s*)?(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–∑–∞–Ω—è—Ç–æ—Å—Ç—å\s*(?:–Ω–∞\s*)?(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–ø–µ—Ä–∏–æ–¥\s*(?:—Ä–∞–±–æ—Ç—ã)?\s*(?:–æ—Ç\s*)?(\d+)\s*(?:–¥–æ\s*)?(\d+)?\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–≤—Ä–µ–º—è\s*(?:—Ä–∞–±–æ—Ç—ã)?\s*(?:–æ—Ç\s*)?(\d+)\s*(?:–¥–æ\s*)?(\d+)?\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–ø—Ä–æ–µ–∫—Ç\s*(?:—Ä–∞—Å—Å—á–∏—Ç–∞–Ω)?\s*(?:–Ω–∞\s*)?(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–∑–∞–¥–∞—á–∞\s*(?:–Ω–∞\s*)?(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ\s*(?:–Ω–∞\s*)?(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–≤—Ä–µ–º–µ–Ω–Ω—ã–µ\s*—Ä–∞–º–∫–∏\s*(?:–æ—Ç\s*)?(\d+)\s*(?:–¥–æ\s*)?(\d+)?\s*(–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)'
    ]

    for pattern in numeric_patterns:
        for match in re.findall(pattern, text_lower):
            nums = [int(x) for x in match if x.isdigit()]
            # –û—Ç—Å–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á–∏—Å–ª–∞ –º–µ–Ω—å—à–µ 3 (1 –∏–ª–∏ 2 –º–µ—Å—è—Ü–∞)
            if any(n < 3 for n in nums):
                return True
            # –ï—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –º–µ–Ω—å—à–µ 3, —Ç–æ–∂–µ –æ—Ç—Å–µ–∫–∞–µ–º
            if nums and max(nums) < 3:
                return True

    # –Ø–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–º–µ–Ω–µ–µ 3 –º–µ—Å—è—Ü–µ–≤)
    explicit_patterns = [
        r'–ø—Ä–æ–µ–∫—Ç\s+–Ω–∞\s*(?:1|2|–æ–¥–∏–Ω|–¥–≤–∞)\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'—Å—Ä–æ–∫\s*:\s*(?:1|2)\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\s*:\s*(?:1|2)\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\s*:\s*(?:1|2)\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–¥–æ\s*(?:1|2)\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–º–µ–Ω–µ–µ\s*3\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–º–µ–Ω—å—à–µ\s*3\s*(?:–º–µ—Å—è—Ü|–º–µ—Å|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)',
        r'–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π\s*(?:–ø—Ä–æ–µ–∫—Ç|–∫–æ–Ω—Ç—Ä–∞–∫—Ç)',
        r'–≤—Ä–µ–º–µ–Ω–Ω–∞—è\s*(?:—Ä–∞–±–æ—Ç–∞|–∑–∞–Ω—è—Ç–æ—Å—Ç—å)',
        r'–∫–æ—Ä–æ—Ç–∫–∏–π\s*(?:–ø—Ä–æ–µ–∫—Ç|—Å—Ä–æ–∫)',
        
    ]

    for pattern in explicit_patterns:
        if re.search(pattern, text_lower):
            return True

    return False




VACANCY_ID_REGEX = re.compile(
    r"(?:üÜî\s*)?(?:[\w\-\u0400-\u04FF]+[\s\-]*)?(\d+)",
    re.IGNORECASE
)


def remove_vacancy_id(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –≤–∞–∫–∞–Ω—Å–∏–∏
    (–Ω–∞–ø—Ä–∏–º–µ—Ä: üÜî04100101, üÜî QA-8955, QA-8955, DEV-102, 04100101),
    –Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç –¥–∞—Ç—É –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç.
    """
    lines = text.strip().splitlines()

    if not lines:
        return text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ ID
    first_line = lines[0].strip()

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è ID: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π üÜî, –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–¥–µ—Ñ–∏—Å—ã, –Ω–µ –¥–∞—Ç–∞
    id_pattern = re.compile(r"^(?:üÜî\s*)?[\w\-]+$", re.IGNORECASE)

    if id_pattern.match(first_line):
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        lines = lines[1:]

    clean_text = "\n".join(lines)

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–º–∞–∫—Å–∏–º—É–º 2 –ø–æ–¥—Ä—è–¥)
    clean_text = re.sub(r"\n{3,}", "\n\n", clean_text)

    return clean_text.strip()




async def send_mess_to_group(group_id: int, message: str, vacancy_id: str, bot: Bot):
    seq_num = await get_next_sequence_number()
    text = remove_vacancy_id(message)
    vacancy_id = vacancy_id[-4:]
    vacancy_id = f'{seq_num:04d}{vacancy_id}'
    pometka = f'"üì® –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–µ–∑—é–º–µ —Å –ø–æ–º–µ—Ç–∫–æ–π ¬´{vacancy_id} Ruby of Rails¬ª, –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã (–Ω–∞ —Ä—É–∫–∏), —Ñ–æ—Ä–º—É —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞/–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –Ω–∞ e-mail: cv@omega-solutions.ru"'
    heashtegs_gpt = await generate_hashtags_gemini(text)
    heashegs = f'#vacancy #—Ä–∞–±–æ—Ç–∞ #job #remote #—É–¥–∞–ª—ë–Ω–∫–∞ #OmegaVacancy\n{heashtegs_gpt}\n#{vacancy_id}'
    text_for_message = f'üÜî{vacancy_id}\n\n{text}\n\n{pometka}\n\n{heashegs}'
    await bot.send_message(group_id, text_for_message, parse_mode="HTML")
    
    

def get_message_datetime(msg, tz: str = "Europe/Moscow") -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM
    —Å —É—á—ë—Ç–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω—ã.

    :param msg: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (msg.date ‚Äî datetime –≤ UTC)
    :param tz: —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∞–π–º–∑–æ–Ω–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "Europe/Moscow")
    :return: —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    """
    # –ë–µ—Ä—ë–º –¥–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ UTC)
    utc_date = msg.date  

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∑–æ–Ω—É
    target_tz = pytz.timezone(tz)
    local_date = utc_date.astimezone(target_tz)

    return local_date.strftime("%d.%m.%Y %H:%M")

def get_vacancy_title(text: str) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–∏ ‚Äî —Å—Ç—Ä–æ–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å ü•á.
    –ü—Ä–∏–º–µ—Ä:
    ü•á –ê–Ω–∞–ª–∏—Ç–∏–∫ Colvir (Middle+/Senior) ‚Üí "–ê–Ω–∞–ª–∏—Ç–∏–∫ Colvir (Middle+/Senior)"
    """
    if not text:
        return None

    pattern = re.compile(r'^\s*ü•á\s*(.+)$', re.MULTILINE)
    match = pattern.search(text)
    if match:
        return match.group(1).strip()

    return None


def format_candidate_json_str(raw_str: str) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É JSON (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Å ```json ``` –∏–ª–∏ —Ç—Ä–æ–π–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏),
    –ø–∞—Ä—Å–∏—Ç –µ—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏.
    """
    # –£–±–∏—Ä–∞–µ–º ```json –∏ ``` –ø–æ –∫—Ä–∞—è–º
    cleaned_str = re.sub(r'^```json\s*', '', raw_str.strip())
    cleaned_str = re.sub(r'```$', '', cleaned_str.strip())

    # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    try:
        candidate_json = json.loads(cleaned_str)
    except json.JSONDecodeError:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
    name = candidate_json.get("name", "")
    surname = candidate_json.get("surname", "")
    verdict = candidate_json.get("final_verdict", "")
    justification = candidate_json.get("justification", "")

    text = f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {name} {surname}\n"
    text += f"üìå –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {verdict}\n\n"

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
    text += "üõ† –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:\n"
    for skill in candidate_json.get("comparison_results", {}).get("required_skills", []):
        requirement = skill.get("requirement", "")
        status = skill.get("status", "")
        comment = skill.get("comment", "")
        text += f"- {requirement} ‚Äî {status}\n  {comment}\n\n"  # –¥–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å –º–µ–∂–¥—É –Ω–∞–≤—ã–∫–∞–º–∏

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
    plus_skills = candidate_json.get("comparison_results", {}).get("plus_skills", [])
    if plus_skills:
        text += "‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:\n"
        for skill in plus_skills:
            text += f"- {skill}\n"
        text += "\n"

    # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
    if justification:
        text += f"üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:\n{justification}\n"

    return text





########### –ò–ó–í–õ–ï–ö–ê–¢–ï–õ–¨ –ê–ô–î–ò ###########
def extract_vacancy_id(text: str) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
      üÜî04100101, QA-8955, DEV-102, BE-9075, 8823
      –∞ —Ç–∞–∫–∂–µ —Å—Å—ã–ª–∫–∏:
      https://t.me/omega_vacancy_bot?start=2431_BE-8968
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BE-8968" –∏–ª–∏ "8823").
    """
    if not text:
        print("text is empty")
        return None

    # üîπ –ù–æ–≤–æ–µ: —á–∏—Å—Ç–∏–º —Ä–∞–∑–º–µ—Ç–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
    text = _clean_markup(text)

    # üü° –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    lines = [line.strip() for line in text.strip().splitlines() if line.strip()]
    if not lines:
        print("lines is empty")
        return None
    first_line = lines[0]

    # üü¢ 1. –ò—â–µ–º ID –≤ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (—Å –ª—é–±—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –ø–æ—Å–ª–µ)
    id_pattern = re.compile(
        r"^(?:üÜî\s*)?([A-Z–ê-–Ø]{1,5}-?\d{3,6}|\d{3,6})",
        re.IGNORECASE
    )
    match = id_pattern.search(first_line)
    if match:
        return match.group(1).upper()

    # üü¢ 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∏–∑ —Å—Å—ã–ª–∫–∏ (start=XXXX_BE-XXXX)
    link_pattern = re.compile(
        r"start=\d+[_-]([A-Z–ê-–Ø]{1,5}-?\d{3,6}|\d{3,6})",
        re.IGNORECASE
    )
    match = link_pattern.search(text)
    if match:
        return match.group(1).upper()

    return None

# –Ω–µ–≤–∏–¥–∏–º—ã–µ/–Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
_ZW_RE = re.compile(r"[\u200B-\u200F\u202A-\u202E\u2060\u00A0]")
# markdown-–∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ ~~...~~ ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
_MD_STRIKE_RE = re.compile(r"~~\s*(.*?)\s*~~", re.DOTALL)
# HTML-—Ç–µ–≥–∏ (–Ω–∞ –≤—Å—è–∫–∏–π) ‚Äî —É–¥–∞–ª—è–µ–º
_HTML_TAG_RE = re.compile(r"</?\s*(?:s|del|strike|b|strong|i|em|u|code|pre|span|font)[^>]*>", re.IGNORECASE)

def _normalize_dashes(s: str) -> str:
    # en/em dash ‚Üí –æ–±—ã—á–Ω—ã–π –¥–µ—Ñ–∏—Å
    return s.replace("\u2013", "-").replace("\u2014", "-")

def _clean_markup(text: str) -> str:
    s = text
    s = _ZW_RE.sub("", s)                 # 1) —É–±—Ä–∞—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–µ
    s = _MD_STRIKE_RE.sub(r"\1", s)       # 2) —Ä–∞—Å–∫—Ä—ã—Ç—å ~~–∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ~~
    s = _HTML_TAG_RE.sub("", s)           # 3) —É–±—Ä–∞—Ç—å HTML-—Ç–µ–≥–∏
    s = _normalize_dashes(s)              # 4) –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–∏—Å—ã
    s = s.replace("üÜî", "üÜî ")            # 5) –Ω–µ–º–Ω–æ–≥–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å
    s = re.sub(r"\s+", " ", s).strip()    # 6) —Å–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã
    return s







########### –ü–ê–†–°–ï–† –¶–ë –†–§ ###########
import requests
from bs4 import BeautifulSoup

def parse_cb_rf():
    try:
        url = 'https://www.cbr.ru/currency_base/daily/'
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                          "Chrome/122.0.0.0 Safari/537.36",
            "Accept": "application/json, text/plain, */*",
            "Referer": "https://www.banki.ru/products/currency/cb/",
            "X-Requested-With": "XMLHttpRequest"
        }
        response = requests.get(url, headers=headers)
        soup = BeautifulSoup(response.text, 'html.parser')
        table = soup.find('table', {'class': 'data'}).find_all('tr')
        usd = table[16].find_all('td')[-1].text.replace(" ", "").replace(",", ".")
        eur = table[18].find_all('td')[-1].text.replace(" ", "").replace(",", ".")
        byn = table[7].find_all('td')[-1].text.replace(" ", "").replace(",", ".")
        return {'USD': float(usd), 'EUR': float(eur), 'BYN': float(byn)}
    except Exception as e:
        print(f"Error parsing cb_rf: {e}")
        return None
    
    
text = '''
üÜîSA-8974
üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: 18.09.2025 09:01

ü•á Fullstack –∞–Ω–∞–ª–∏—Ç–∏–∫ (–°–ê 60% –ë–ê 40%) (Senior)

üí∞ –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (–Ω–∞ —Ä—É–∫–∏) –¥–æ:
- –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –®—Ç–∞—Ç/–ö–æ–Ω—Ç—Ä–∞–∫—Ç: 165 000 RUB
- –° –æ—Ç—Å—Ä–æ—á–∫–æ–π –ø–ª–∞—Ç–µ–∂–∞ "35 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π" –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ç–∞ (–ê–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ):
  –ò–ü: 203 000 RUB,
  –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π: 229 000 RUB

üìç –õ–æ–∫–∞—Ü–∏—è/–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: –ª—é–±–∞—è
üè† –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: —É–¥–∞–ª—ë–Ω–Ω–æ
üéì –ì—Ä–µ–π–¥: Senior
üìÜ –°—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞: 6 –º–µ—Å—è—Ü–µ–≤
üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞: ASAP

üìå –û –ø—Ä–æ–µ–∫—Ç–µ:
–ú—ã –∏—â–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ-–±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—É–ø–æ—á–Ω–æ–π —Ü–µ–Ω–æ–π –∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é. –í–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏—Å—Ç–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏—è, —Ä–∞—Å—á–µ—Ç–∞, –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ü–µ–Ω –∏ –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –°—Ñ–µ—Ä–∞: —Ä–µ—Ç–µ–π–ª

üìé –ó–∞–¥–∞—á–∏:
‚Äî –°–æ–±–∏—Ä–∞—Ç—å, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–§–¢,–ù–§–¢) –∫ —Å–∏—Å—Ç–µ–º–∞–º
‚Äî –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
‚Äî –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
‚Äî –î–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏(–±—ç–∫, —Ñ—Ä–æ–Ω—Ç, API, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
‚Äî –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–±–æ—Ä–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤, –≤—ã—è–≤–ª—è—Ç—å –ø—Ä–∏—á–∏–Ω—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∏—Ö —Ä–µ—à–µ–Ω–∏—è
‚Äî –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ —Å–º–µ–∂–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–æ—Å—Å-–∫–æ–º–∞–Ω–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Äî –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
‚Äî –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Äî –û–ø–∏—Å—ã–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –º–æ–¥–µ–ª—è—Ö ¬´AS IS¬ª –∏ ¬´TO BE¬ª
‚Äî –ü—Ä–æ–≤–æ–¥–∏—Ç—å GAP-–∞–Ω–∞–ª–∏–∑
‚Äî –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ —Å—Ç–µ–π–∫—Ö–æ–ª–¥–µ—Ä–∞–º–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∏ —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
‚Äî –ü—Ä–æ–≤–æ–¥–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã
‚Äî –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –æ–ø–∏—Å—ã–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
‚Äî –ü—Ä–æ–≤–æ–¥–∏—Ç—å agile —Ä–∏—Ç—É–∞–ª—ã –∫–æ–º–∞–Ω–¥—ã
‚Äî –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –æ—Ü–µ–Ω–∫–µ –≥–∏–ø–æ—Ç–µ–∑ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞

üíª –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Äî –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º –æ—Ç 5 –ª–µ—Ç
‚Äî –ó–Ω–∞–Ω–∏–µ –°–£–ë–î oracle, –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—É–ø–∫–∞–º–∏
‚Äî –û–ø—ã—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ—Ç –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–æ —Ä–µ–ª–∏–∑–∞
‚Äî –ù–∞–≤—ã–∫ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: Postman, Swagger, KafkaUI, GitHub
‚Äî –£–º–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å DOR, DOD –¥–ª—è –∑–∞–¥–∞—á/–¥–æ—Ä–∞–±–æ—Ç–æ–∫/–ø—Ä–æ–¥—É–∫—Ç–∞
‚Äî –ù–∞–≤—ã–∫–∏ —Å–±–æ—Ä–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ—Ä–≤—å—é, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º, —á—Ç–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
‚Äî –ù–∞–≤—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ use cases/user story/—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
‚Äî –£–º–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å UML –º–æ–¥–µ–ª–∏: Entity-Relation, Use case, Sequence
‚Äî –ù–∞–≤—ã–∫ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ BPMN –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ
‚Äî –ù–∞–≤—ã–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è/–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π REST
‚Äî –û–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è/–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ OpenAPI (swagger), asyncAPI
‚Äî –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã/–Ω–∞–≤—ã–∫–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –±—Ä–æ–∫–µ—Ä–∞–º–∏ Apache Kafka, RabbitMQ
‚Äî –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã/–Ω–∞–≤—ã–∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î –≤ –°–£–ë–î PostgreSQL, Oracle Database
‚Äî –ù–∞–≤—ã–∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö SQL —Å–∫—Ä–∏–ø—Ç–æ–≤
‚Äî –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π/–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
‚Äî –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –æ–±–ª–∞—Å—Ç—è—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—É–ø–∫–∞–º–∏, –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞
‚Äî –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π ITSM
‚Äî –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Platformeco, Node.JS
‚Äî –£–º–µ–Ω–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
‚Äî –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞

‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –ø—Ä–∏ –ø–æ–¥–∞—á–µ:
‚óè –§–ò–û
‚óè –°—Ç—Ä–∞–Ω–∞ + –ì–æ—Ä–æ–¥
‚óè –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–µ –≤–æ–∑—Ä–∞—Å—Ç, –∞ –¥–∞—Ç–∞)
‚óè –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞
‚óè –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–í–£–ó, –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å)
‚óè –ì—Ä–µ–π–¥
‚óè –°—Ç–∞–≤–∫–∞
‚óè –ß–µ–∫-–ª–∏—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (–î–ê/–ù–ï–¢)!!!!!

–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤: –î–º–∏—Ç—Ä–∏–π @Dimitryver!!!!
'''    
print(extract_vacancy_id(text))