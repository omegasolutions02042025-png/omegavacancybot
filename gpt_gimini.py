import google.generativeai as genai
import asyncio
import json
import re
from datetime import datetime
import os
from dotenv import load_dotenv


load_dotenv()


GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

genai.configure(api_key=GEMINI_API_KEY)


async def process_vacancy_with_gemini(text: str) -> dict | None:
    """
    Анализирует текст вакансии с помощью Gemini API, выполняет фильтрацию,
    очистку и извлечение данных в один шаг.

    Args:
        text: Строка с полным текстом вакансии.

    Returns:
        Словарь (dict) с извлеченными данными в формате JSON
        или None, если вакансия была отфильтрована.
    """
    print("🚀 Запускаем обработку вакансии через Gemini...")

    # Текущая дата для prompt
    current_date = datetime.now().strftime("%d.%m.%Y")
    current_time = datetime.now().strftime("%H:%M")
    current_tz = "+03:00"  # МСК по умолчанию

    # --- ЕДИНЫЙ ПРОМПТ ДЛЯ GEMINI ---
    system_prompt = f"""
    Ты — фильтр вакансий. На вход приходит ТЕКСТ ВАКАНСИИ. Работай строго по правилам ниже.
При противоречиях выбирай ОТСЕЧЬ. Логика между разделами — И (AND).
Сегодня: {current_date} {current_time} ({current_tz}).

ЦЕЛЬ:
1) Решить, отсекать вакансию или нет (если отсечь — вернуть структуру с полями = null и в переменной "reason" указать причину).
2) Если НЕ отсекать — очистить и нормализовать текст, извлечь поля и вернуть словарь строго заданного формата.

ГЛОБАЛЬНОЕ ПРАВИЛО СОХРАНЕНИЯ СТРУКТУРЫ (ВАЖНО):
— По всему тексту вакансии СТРОГО СОХРАНЯЙ исходную структуру: порядок строк и абзацев, пустые строки,
  маркеры списков (-, •, —), нумерацию (1), 1., 1), тире/кавычки, эмодзи и спецсимволы, регистр,
  последовательности пробелов/табов. Ничего не переформатируй и не «склеивай».
  Разрешено удалять/перемещать ТОЛЬКО явно указанные ниже фрагменты (оплата/контакты/заголовки «плюсов»/🆔 и т.п.).
  Все прочие символы и переносы должны остаться без изменений.

НОРМАЛИЗАЦИИ:
НОРМАЛИЗАЦИИ:
- Определи страну/локацию по ключевым словам.
- Если в тексте встречаются слова «РФ», «Россия», «Moscow», «Москва», «Санкт-Петербург», «Казань», «Новосибирск» и т.п. — добавь "РФ" в список location.
- Если встречаются слова «Беларусь», «BY», «Минск», «Гродно», «Брест», «Витебск», «Гомель», «Могилёв», «дружественные страны», «СНГ», «CIS», «EAEU», «Eurasian», «Kazakhstan», «Казахстан», «Kyrgyzstan», «Киргизия», «Armenia», «Армения», «Azerbaijan», «Азербайджан» — добавь "РБ" в список location.
- Если указано «удалённо», «remote», «any location», «гибрид», «работа из любой точки», добавь обе ("РФ" и "РБ") в список location.
- Если указаны обе группы (РФ и РБ/СНГ) — добавь обе страны: ["РФ", "РБ"].
- Если указано несколько локаций — возвращай список (например ["РФ", "РБ"]).
- Если не удаётся определить — верни пустой список [].
- Тайм-зоны: МСК/MSK = UTC+3. Если TZ не указана, используй {current_tz}.
- Нормализация длительности: «3х/3-х/3 x» трактуй как «3».

БЛОК A. СРОКИ ПРОЕКТА (ПРОДОЛЖИТЕЛЬНОСТЬ И ДЕДЛАЙН)
A1. ПРОДОЛЖИТЕЛЬНОСТЬ (< 3 месяцев → ОТСЕЧЬ):
  A1.1. ОТСЕЧЬ, если явно < 3 мес: 1/2 мес;
  A1.2. Конструкции с нижней границей < 3 (например, «от 2 мес») ВСЕГДА считаются < 3 и ведут к отсекаю,
        даже если эта фраза стоит после шапки/подсказки в скобках (например: «Продолжительность проекта (от 2х месяцев): от 2 мес»).
        Оценивай именно фактическое значение после «:», а текст подсказки игнорируй.
        К «допускающим < 3» также относятся: «от 3-х мес», «от 3х месяцев», варианты с плюсом («от 3 мес+», «от 3 месяцев +», «от 3х месяцев+»),
        «3+ мес», «3–6 мес», «более 3 мес», «до 4 мес», «≈3–4 мес».
  A1.3. НЕ отсекать, если гарантировано ≥ 3 мес: «3 мес», «от 3 мес», «3–6 мес», «≥ 3 мес», «6+ мес»,
        «полгода», «2 квартала», «12 мес», «год», «long-term».
  A1.4. Если длительность НЕ указана — A1 не применяется.
  A1.5. ШАПКА БЕЗ ЗНАЧЕНИЯ — НЕ ОТСЕКАТЬ: если есть только заголовок/лейбл длительности (строка оканчивается «:»)
        и после него НЕТ значения ни в этой строке, ни в непосредственной следующей строке. Если после «:» есть «от 3 мес» — применяй A1.2 и отсекать.
  A1.6. Нормализация: трактуй «3х/3-х/3 x» как «3».

A2. ДЕДЛАЙН (в прошлом или истёк к текущему моменту → ОТСЕЧЬ):
  A2.1. Распознавай даты/время/TZ: DD.MM.YYYY, DD.MM.YY, DD/MM/YYYY, YYYY-MM-DD, «30 сентября 2025», «до 30.09»,
        а также «сегодня», «завтра», «до конца дня» (EOD/COB), EOW/EOM, «до пятницы», «до 18:00 МСК», «до 23:59», «до 15:00 UTC+3».
  A2.2. Если указан часовой пояс (МСК/MSK/UTC±X) — используй его, иначе {current_tz}.
  A2.3. Если год не указан — используй текущий год. Если «до [месяц]» без дня — дедлайн = последний день месяца 23:59 (в соответствующей TZ).
  A2.4. Отсекай, если:
        • дедлайн < текущего момента; ИЛИ
        • дедлайн = сегодня и время НЕ указано; ИЛИ
        • дедлайн = сегодня и указано время ≤ текущего времени.
        (Если дедлайн сегодня и время > текущего — НЕ отсекать.)
  A2.5. ШАПКА БЕЗ ЗНАЧЕНИЯ — НЕ ОТСЕКАТЬ: если есть только заголовок/лейбл дедлайна (строка оканчивается «:»)
        и нет даты/времени ни в этой строке, ни в непосредственной следующей строке — A2 не применяется.
  A2.6. «ASAP/как можно скорее» — это не дедлайн (A2 не применяется).
  A2.7. Если дедлайн не найден — A2 не применяется.


БЛОК B. ОБЩИЕ КРИТЕРИИ ОТСЕВА (любой пункт → ОТСЕЧЬ):
B1. Запрет на подачу: «стоп»/«STOP»/«❌ стоп» и подобные.

БЛОК С. ВЫВОД ДОПОЛНИТЕЛЬНОЙ ИНФОРМАЦИИ:
С1. Выводи причину отсева в переменной reason.
С2. Если нет локации или гражданства — верни utochnenie - true

ЕСЛИ выполнено хотя бы одно условие отсева из блоков A или B,
— верни структуру с полями = None (см. «ФОРМАТ ОТВЕТА»). Иначе — продолжай обработку.

ОБРАБОТКА ТЕКСТА (выполняй последовательно; применяется ТОЛЬКО если вакансия НЕ отсечена):
A) УДАЛЕНИЕ УПОМИНАНИЙ ОПЛАТЫ: полностью удали любые условия оплаты/актирования/сроки оплаты/отсрочки.
B) ЗАГОЛОВОК ВАКАНСИИ: если в начале есть заголовок (например: «🥇 Java разработчик c Camunda»),
   УДАЛИ его из текста и верни в "vacancy_title" (без эмодзи и лишних пробелов); остальной текст не меняй.
C) ИДЕНТИФИКАТОР: найди ПЕРВЫЙ идентификатор:
   • «🆔 XX-1234» (XX — латинские заглавные, 1234 — цифры) ИЛИ
   • «🆔 8581» (только цифры).
   УДАЛИ его из текста и верни "vacancy_id" (без символа 🆔). Если нет — None.
D) СТАВКА ("rate"): найди числовую ставку/ставку закупки. Если указаны две — для РФ и для не РФ — возьми ставку для НЕ РФ.
   Если единственная — верни её. Верни ТОЛЬКО число (без валют/«от»/«~»/«/»/пробелов/тыс/млн).
   Диапазон «от N до M» → возьми N; «до: N» → возьми N; «≈N» → возьми N. Не конвертируй периодичность (в час/день/месяц).
   Если ставки нет («смотрим вашу» и т.п.) — "rate": 0. Исходные упоминания ставки УДАЛИ.
E) ТРЕБОВАНИЯ (объединение «плюсов» с основными):
   G1. Основной список — разделы «Требования», «Основные требования», «Обязательные требования»,
       англ.: «Requirements», «Required», «Must have». Если их нет, но есть «плюсы» — создай раздел «Требования»
       и помести его на место первого найденного блока требований/«плюсов».
   G2. Что считать «плюсами» (без учета регистра/пунктуации; кавычки/маркеры НЕ обязательны):
       — Заголовки/подзаголовки/фразы: «будет плюсом», «будет большим плюсом», «будет преимуществом»,
         «большим преимуществом будет», «плюсом», «плюсом будет», «как плюс»,
         «желательно», «предпочтительно», «не обязательно, но желательно», «опционально», «Доп. требования:»;
         англ.: «nice to have», «good to have», «would be a plus», «big/strong plus», «preferred»,
         «optional», «bonus», «as an advantage», «advantageous».
       — Фразы-связки с «если»: распознавай конструкции «будет плюсом(,|—|-|:)?\s*если …»
         (в т.ч. «Будет плюсом если вы …») — с любыми знаками препинания или без — и относись к ним как к «плюсам».
       — Эти фразы могут встречаться в заголовке раздела, внутри пункта, в начале/конце предложения,
         в скобках («…(будет плюсом)»), с эмодзи/символами (напр. «➕», «+», «🌟», «⭐») или без них — во всех случаях
         считай такой пункт «плюсом».
   G3. Что НЕ считать «плюсами»: разделы про условия/бонусы/преимущества работодателя
       («Преимущества», «Бонусы», «Мы предлагаем», «Benefits», «Perks», «Conditions», «Условия»), а также
       «Задачи/Обязанности/Responsibilities/What you will do».
   G4. Как объединять:
       — Вырежи ТОЛЬКО заголовки «плюсов»/вводные слова, сами пункты оставь как есть.
       — Если «плюсы» перечислены одной строкой через запятые — перенеси строку целиком как один пункт,
         не меняя пунктуации.
       — Если пометка «(будет плюсом/optional/…)» стоит в конце пункта, перенеси пункт в конец списка
         требований и УДАЛИ только скобочную пометку.
       — Порядок: 1) исходные обязательные пункты (как были), 2) затем все «плюсы» в порядке появления сверху вниз.
       — Дубли: убери точные дубликаты (trim + без финальной точки/«;»). Семантические различия — не объединяй.
H) ДЕДЛАЙН (извлечение значений, НЕ отсев здесь): определи срок подачи резюме ().
   Верни  Дату  (до какого числа "deadline_date" = "DD.MM.YYYY" или None) и Время (до какого времени "deadline_time" = "HH:MM" или None).
I) СТРУКТУРА (напоминание): после всех манипуляций глобально соблюдай правило сохранения структуры текста
   (см. блок «ГЛОБАЛЬНОЕ ПРАВИЛО СОХРАНЕНИЯ СТРУКТУРЫ»).
K) Если встречаются фразы/эквиваленты (любой регистр/язык):
    «акты поквартально», «квартальное актирование», «поквартальная оплата», «актирование», «ежеквартально»,
    «quarterly invoicing/billing», «net 60», «net 90», «N60», «N90», «deferred payment», «post-payment».
    Верни "acts" = true. В противном случае — false.

L) Если в тексте указана длительность проекта менее 6 месяцев (например: "3 месяца", "4 мес.", "полгода", "до 5 месяцев", "3 мес+"), то возвращай short_project: true.
    Если указано "от N месяцев", то это нижняя граница, а не ограничение сверху. В этом случае не считай проект коротким, даже если N < 6.
    Если указано "от N до M месяцев", смотри на верхнюю границу: если M < 6, то short_project: true, иначе false.
    Если указано "до конца года", "с возможностью продления", или другая формулировка, явно предполагающая срок ≥ 6 месяцев, то short_project: false.
    В остальных случаях — short_project: false.

M) Если встречаются фразы вида:

    - "Отсрочка платежа ..."
    - "Отсрочка ..."
    - "Условия оплаты: отсрочка ..."
то верни содержимое после слова "отсрочка" в переменной delay_payment, удаляя само слово и лишние пробелы. Иначе — delay_payment: null.

N) Если в отсрочка платежа больше 35 рабочих дней или 50 календарных дней, верни long_payment: true, иначе — long_payment: false.


O) Если в тексте встречаются фразы:
              - "Только штатные кандидаты"
              - "Рассматриваем только штатных кандидатов"
              - "Оформление только штат компании"
            то верни only_fulltime: true, иначе — only_fulltime: false.

P) Оставь в тексте срок подачи резюме

Q) УДАЛИ ИЗ ТЕКСТА ИМЯ И ФАМИЛИЮ В БЛОКЕ Вопросы и предложения. Пример блока:
Вопросы и предложения Михаил Сазанович ➡️@sazanovich_ma или в общий чат.

ФОРМАТ ОТВЕТА — СТРОГО СЛОВАРЬ:
{{
  "text": "<очищенный текст вакансии>" или null (если отсечена),
  "rate": <целое число или 0> или null,
  "deadline_date": "DD.MM.YYYY" или null,
  "deadline_time": "HH:MM" или null,
  "vacancy_id": "<id или null>",
  "vacancy_title": "<заголовок или null>",
  "acts": true или false,
  "short_project": true или false
  "delay_payment": "<содержимое фразы или null>",
  "only_fulltime": true или false,
  "location": ["РФ", "РБ"] или [],
  "long_payment": true или false
  "reason": "<причина отсева или null>",
  "utochnenie": true или false
}}
Никаких других слов/символов не добавляй. Не используй Markdown/код-блоки в ответе.
"""

    # Модель Gemini
    model = genai.GenerativeModel('gemini-2.5-pro')
    generation_config = genai.types.GenerationConfig(temperature=0.1)
    
    full_prompt = system_prompt + "\n\nТекст вакансии:\n\n" + text

    try:
        response = await model.generate_content_async(
            full_prompt,
            generation_config=generation_config
        )

        clean_text = response.text.strip()
        print("✅ Ответ от Gemini получен.")
        

        # Проверка на отсечение вакансии
        if clean_text.lower() == 'null':
            print("❌ Вакансия отфильтрована.")
            return None

        # Попытка извлечения JSON
        json_match = re.search(r'\{.*\}', clean_text, re.DOTALL)
        if json_match:
            try:
                return json.loads(json_match.group(0))
            except json.JSONDecodeError as e:
                print(f"Ошибка парсинга JSON: {e}")
                return None
        else:
            print("JSON не найден в ответе модели.")
            return None

    except Exception as e:
        print(f"Ошибка при вызове Gemini API: {e}")
        return None



async def format_vacancy_gemini(text: str, vacancy_id: str, date: str | None = None) -> str:
    """
    Функция для структурированного оформления вакансии с помощью Gemini API.
    Возвращает готовый текст в нужном формате.
    """
    if date is None:
        date = datetime.now().strftime("%d.%m.%Y")

    print(f"[*] Форматируем вакансию ID: {vacancy_id} от {date}...")

    prompt = f"""
Ты — редактор вакансий.
На вход ты получаешь текст вакансии. Твоя задача — оформить его в структурированном виде для публикации, строго соблюдая формат.

⚡️ ВАЖНО:
— Никогда не удаляй и не изменяй HTML-тэги (<s>, <b>, <i> и любые другие).
— Особенно не трогай тэги вокруг следующих строк:
  * «ИП: ...»
  * «Самозанятый: ...»
  * «- Ежемесячная выплата Штат/Контракт»
— Эти элементы должны оставаться с тэгами в исходном виде.
— Никогда не добавляй и не убирай теги <s> (или любые другие HTML-теги).
— Если в исходном тексте строка уже содержит <s>…</s> — оставляй как есть.
— Если в исходном тексте строки без <s> — не добавляй зачеркивание самостоятельно.
— Решение о том, какие строки должны быть зачёркнуты, принимается не тобой, а логикой до передачи текста (ты работаешь только с готовым набором тегов).
— Определи, какие страны указаны в тексте:
   * если есть РБ/Беларусь/Belarus/BY → добавь блок 🇧🇾;
   * если есть РФ/Россия/Russia/RU/Москва → добавь блок 🇷🇺;
   * если есть обе — добавь оба блока в указанном порядке (сначала 🇧🇾, потом 🇷🇺);
   * если нет упоминаний — не добавляй флаг, оставь общий блок со ставкой.
— Не придумывай страны, которых нет в тексте.

⚡️ Правила форматирования:
— В названии должности всегда указывать грейд (Junior / Middle / Senior / Lead), если он есть.
— Раздел «Будет плюсом» включается в общий список «💻 Требования» (без отдельного блока).
— Каждый пункт требований — отдельной строкой с маркером.
— Между разделами и блоками вакансии должна быть ровно 1 пустая строка.
— В тексте вакансии не должно быть 2 и более пустых строк подряд.
— Не удаляй и не сокращай информацию, используй все данные из текста.
— Блок «⚠️ Особые условия» включай только если в тексте реально есть данные (NDA, кол-во этапов интервью, оформление и т.д.).

🔥 Дополнительное требование:
Если в исходном тексте не указана ставка (RUB, USD, у.е., вилка и т.п.),
в блоке 💰 "Месячная ставка (на руки) до:" вместо суммы напиши:
«Рассматриваем ваши предложения».

⚡️ Структура итогового текста:

🆔{vacancy_id}
📅 Дата публикации: {date}

🥇 [Название должности] ([Грейд])


 🇧🇾💰 Месячная ставка для юр лица РБ:
Вариант 1. Ежемесячная выплата Штат/Контракт (на руки) до: 260 000 RUB (с выплатой зарплаты 11 числа месяца следующего за отчетным)

Вариант 2. Выплата ИП/Самозанятый
С отсрочкой платежа 35 рабочих дней после подписания акта:
(Актирование: ежемесячное):
2700 RUB/час (Gross)
Справочно в месяц (при 165 раб. часов): 445 000 RUB(Gross)


 🇷🇺💰 Месячная ставка для юр лица РФ:
Вариант 1. Ежемесячная выплата Штат/Контракт (на руки) до: 260 000 RUB (с выплатой зарплаты 11 числа месяца следующего за отчетным)

Вариант 2. Выплата ИП/Самозанятый
С отсрочкой платежа 35 рабочих дней после подписания акта:
(Актирование: ежемесячное):
2700 RUB/час (Gross)
Справочно в месяц (при 165 раб. часов): 445 000 RUB(Gross)

Вариант 2. Выплата ИП/Самозанятый: 211 000 RUB


📍 Локация/Гражданство: [страны, города]
🏠 Формат работы: [удалённо / офис / гибрид]
🎓 Грейд: [Junior / Middle / Senior / Lead]
📆 Срок проекта: [сроки]
🚀 Старт проекта: [ASAP или дата]

📌 О проекте:
[Краткое описание проекта]

📎 Задачи:
— [Перечислить задачи из вакансии]

💻 Требования:
— [Обязательное требование 1]
— [Обязательное требование 2]
— [Будет плюсом 1]
— [Будет плюсом 2]

⚠️ Особые условия:
— [NDA, кол-во этапов интервью, трудоустройство и т.д.]

❗️ Обязательные данные по кандидату при подаче:
● ФИО
● Страна + Город
● Дата рождения (не возраст, а дата)
● Электронная почта
● Образование (ВУЗ, год окончания, специальность)
● Грейд
● Ставка
● Чек-лист соответствия требованиям (ДА/НЕТ)

Контакт для вопросов: [имя + @Telegram]

---
Вот текст вакансии для обработки:

{text}
"""

    model = genai.GenerativeModel('gemini-2.5-pro')
    generation_config = genai.types.GenerationConfig(temperature=0.1)

    try:
        response = await model.generate_content_async(prompt, generation_config=generation_config)
        return response.text.strip()
    except Exception as e:
        print(f"🔥 Ошибка при форматировании вакансии: {e}")
        return False


async def generate_hashtags_gemini(vacancy_text: str) -> str:
    """
    Генерирует хэштеги из текста вакансии с помощью Gemini API.
    """
    print("[*] Генерируем хэштеги...")
    
    prompt = f"""
Вот текст вакансии:

{vacancy_text}

Сформируй список хэштегов в одну строку через пробел.

Правила:
1. По технологиям/стеку (например: #Java #Spring #PostgreSQL #Docker) — извлеки их из описания.
2. По грейду: #Junior или #Middle или #Senior — определи из текста.
3. По отрасли (например: #Fintech #Retail #Banking) — определи по контексту.

Выведи только строку с хэштегами.
"""
    
    model = genai.GenerativeModel('gemini-2.5-flash')
    generation_config = genai.types.GenerationConfig(temperature=0.1)
    
    try:
        response = await model.generate_content_async(prompt, generation_config=generation_config)
        return response.text.strip()
    except Exception as e:
        print(f"🔥 Ошибка при генерации хэштегов: {e}")
        return False





async def sverka_vac_and_resume_json(vacancy_text, resume_text, file_name):
    """
    Анализирует соответствие кандидата вакансии и возвращает JSON от Gemini без очистки.
    Логика Omega Solutions v3.4:
    — Если нет имени, фамилии, локации или зарплаты → "Нет (требуется уточнение)" (ошибка оформления, не влияет на вердикт)
    — Все прочие отсутствующие требования → "Нет (точно нет)"
    — Если >=70% must_have совпало → остальные "Нет (требуется уточнение)"
    """
    print(file_name)
    prompt = f"""
Ты — продвинутый ассистент IT-рекрутера компании Omega Solutions.  
Ты оцениваешь соответствие кандидата требованиям вакансии и возвращаешь строго валидный JSON без текста вне объекта.

📄 Входные данные о файле кандидата:
Имя файла (строка для разбора): "{file_name}"

Разбери строку как данные и выполни следующие действия:
1. Раздели строку на слова по пробелам, подчёркиваниям и точкам.
2. Определи слова, начинающиеся с заглавной буквы на кириллице или латинице — это части ФИО (первое — фамилия, второе — имя).
3. Если встречается число рядом с обозначением валюты (`RUB`, `руб`, `₽`, `USD`, `$`, `у.е`, `EUR` и т.д.) — это зарплатные ожидания.
4. Если в числе есть пробелы, убери их: `400 000 RUB` → `400000 RUB`.
5. Если валюта указана буквами (например, "RUB", "USD", "у.е") — оставь её как есть, не переводя.
6. Верни это значение в поле `"summary.salary_expectations"` и продублируй в `"candidate.salary_expectations"`, если оно есть.
7. Если сумма не найдена — поставь `"нужно уточнить"`.

---

## 🎯 ЦЕЛЬ
Проведи профессиональную сверку резюме и вакансии:
— оцени выполнение всех обязательных (`must_have`) и дополнительных (`nice_to_have`) требований;
— оцени полноту данных (ФИО, отчество, дата рождения, город, контакты, зарплата);
— оформи результат строго в JSON по схеме ниже.

---

## ⚙️ ПРАВИЛА ОБРАБОТКИ

1. Всегда возвращай **только один валидный JSON-объект** (без Markdown, без текста до/после).
2. Не используй `null`. Если данных нет — ставь `"Нет (требуется уточнение)"` или `"Нет (точно нет)"`.
3. Все имена, города, страны переводи на русский язык.
4. Если информации нет вообще — `"Нет (точно нет)"`.
5. Формат дат — `ДД.ММ.ГГГГ`, возраст округляй до целых лет.

6.📎 Анализ имени файла:

  Если в тексте резюме отсутствуют имя и фамилия, выполни следующие шаги:
  1. Прочитай строку имени файла полностью: **{file_name}**
2. Раздели её по символам `_`, `-`, `.`, пробелам.
3. Если слово содержит **кириллицу или латиницу** и начинается с заглавной буквы — это часть ФИО.  
   Первые два таких слова считай:
   - первое → фамилия,
   - второе → имя.
   Примеры:
   • Ivan_Ivanov_BE10451.docx → Иван Иванов  
   • Kurs_Aleksandr_Resume.docx → Александр Курс  
   • Александр Курс 2200 у.е..docx → Александр Курс  
4. Если слово содержит числа и валюту (`USD`, `руб`, `у.е`, `$`, `EUR`) — это зарплатные ожидания.  
   Пример:  
   • Ivan_Ivanov_3500USD.docx → salary_expectations = "3500 USD"
   • Александр Курс 2200 у.е..docx → salary_expectations = "2200 у.е."
5. Если найдено только одно слово — считай его именем, добавь требование для уточнения фамилии:
   {{
     "requirement": "Не указана часть ФИО (имя или фамилия)",
     "status": "Нет (требуется уточнение)",
     "comment": "Определена только одна часть ФИО по имени файла"
   }}

  ---
## 🧮 ЛОГИКА СОВПАДЕНИЙ
- 🔴 Если **любое** требование из `must_have` **или** `nice_to_have` отсутствует в данных (невозможно подтвердить по резюме/вакансии),
  ставь по нему `"Нет (требуется уточнение)"` (НЕ "Нет (точно нет)").
- Если явно противоречит требованиям (кандидат этого точно не имеет) — `"Нет (точно нет)"`.


---

## 📋 ОСОБЫЕ ПРАВИЛА

- Отсутствие ФИО, локации или зарплаты или даты рождения, контактов  влияет на итоговый вердикт.  
  Эти пункты отмечаются как `"Нет (требуется уточнение)"` и записываются в must_have.
- Все профессиональные навыки, которых нет в резюме, оценивай строго как `"Нет (точно нет)"`.

---

## 🧩 ВЕРДИКТ (summary.verdict)

- Если **хотя бы один** пункт в `must_have` имеет статус `"Нет (точно нет)"` → **"Не подходит"**.
- ИНАЧЕ, если есть **хотя бы один** пункт со статусом `"Нет (требуется уточнение)"` в `must_have` **или** `nice_to_have`
  → **"Частично подходит (нужны уточнения)"**.
- ИНАЧЕ (все `must_have` = "Да", и нет уточняемых/негативных) → **"Полностью подходит"**.

---

## 📘 СТРУКТУРА JSON

{{
  "vacancy": {{
    "position_id": "<ID вакансии или Нет (требуется уточнение)>",
    "position_name": "<Название позиции или Нет (требуется уточнение)>",
    "grade": "<Грейд или Нет (требуется уточнение)>",
    "location_requirements": {{
      "location": "<Локация или Нет (требуется уточнение)>",
      "citizenship": "<Гражданство или Нет (требуется уточнение)>",
      "timezone": "<Часовой пояс или Нет (требуется уточнение)>"
    }},
    "work_format": "<remote/office/hybrid или Нет (требуется уточнение)>",
    "tech_stack": ["<Технология 1>", "<Технология 2>"],
    "requirements": {{
      "must_have": ["<Обязательное требование 1>", "<Обязательное требование 2>"],
      "nice_to_have": ["<Дополнительное требование 1>", "<Дополнительное требование 2>"]
    }},
    "special_conditions": {{
      "nda": "<да/нет/Нет (требуется уточнение)>",
      "sim_card": "<требуется/не требуется/Нет (требуется уточнение)>",
      "rate": "<ставка или Нет (требуется уточнение)>",
      "deadlines": "<дедлайны или Нет (требуется уточнение)>"
    }},
    "manager_telegram_nickname": "@Dimitryver"
  }},
  "candidate": {{
    "full_name": "<Фамилия Имя Отчество или Фамилия Имя>",
    "birth_date": {{
      "date": "<ДД.ММ.ГГГГ или Нет (требуется уточнение)>",
      "age": "<число лет или Нет (требуется уточнение)>"
    }},
    "location": {{
      "city": "<Город или Нет (требуется уточнение)>",
      "country": "<Страна или Нет (требуется уточнение)>"
    }},
    "grade_and_position": "<Грейд/позиция кандидата или Нет (требуется уточнение)>",
    "full_experience": "<Опыт в IT или Нет (требуется уточнение)>",
    "experience": [
      {{
        "company_name": "<Компания>",
        "role": "<Роль>",
        "domain": "<Домен или Нет (требуется уточнение)>",
        "period": "<Период работы>",
        "projects": [
          {{
            "project_description": "<Описание проекта>",
            "responsibilities": ["<Обязанность 1>", "<Обязанность 2>"],
            "technologies_used": ["<Технология 1>", "<Технология 2>"]
          }}
        ]
      }}
    ],
    "tech_stack": ["<Технология 1>", "<Технология 2>"],
    "languages": [
      {{
        "language": "<Язык>",
        "level": "<Уровень>"
      }}
    ],
    "contacts": {{
      "phone": "<Телефон или Нет (требуется уточнение)>",
      "email": "<Email или Нет (требуется уточнение)>",
      "telegram": "<Telegram или Нет (требуется уточнение)>",
      "linkedin": "<LinkedIn или Нет (требуется уточнение)>"
    }}
  }},
  "compliance_check": {{
    "must_have": [
      {{
        "requirement": "<требование>",
        "status": "<Да | Нет (требуется уточнение) | Нет (точно нет)>",
        "comment": "<обоснование>"
      }}
    ],
    "nice_to_have": [
      {{
        "requirement": "<требование>",
        "status": "<Да | Нет (требуется уточнение)>",
        "comment": "<обоснование>"
      }}
    ]
  }},
  "summary": {{
    "verdict": "<Полностью подходит | Частично подходит (нужны уточнения) | Не подходит>",
    "salary_expectations": "<Сумма / 'нужно уточнить'>"
  }}
}}

---

## 🧩 ВАЛИДАЦИЯ И ПОВЕДЕНИЕ

- JSON должен быть строго валидным (никаких запятых после последнего элемента).
- Не добавляй Markdown или текст вне объекта.
- Если чего-то нет — ставь `"Нет (точно нет)"`.
- Для ФИО, локации и зарплаты — `"Нет (требуется уточнение)"`.

---

## 🔢 ВХОДНЫЕ ДАННЫЕ

[ВАКАНСИЯ]
{vacancy_text}

[РЕЗЮМЕ]
{resume_text}
"""
    model = genai.GenerativeModel("gemini-2.5-pro")
    generation_config = genai.types.GenerationConfig(temperature=0.1)

    try:
        response = await model.generate_content_async(prompt, generation_config=generation_config)
        return response.text.strip()
    except Exception as e:
        print(f"🔥 Ошибка при анализе вакансии и резюме: {e}")
        return False




async def generate_mail_for_candidate_finalist(json_data: dict, user_name: str):
  try:
    vacancy = json_data.get('vacancy', {})
    candidate = json_data.get('candidate', {})
    
    must_have_candidate = json_data.get('compliance_check', {}).get('must_have', [])
    strong_points = []
    for must_have in must_have_candidate:
      if must_have['status'] == 'Да':
        strong_points.append(must_have['requirement'])
      elif must_have['status'] == 'Нет (требуется уточнение)':
        continue
      elif must_have['status'] == 'Нет (точно нет)':
        continue
    
    prompt = f"""
    Ты — ассистент IT-рекрутера. 
  Тебе будет предоставлен JSON с результатами сверки резюме кандидата и вакансии. 
  На его основе ты должен составить персонализированное письмо кандидату-финалисту.

  ⚙️ Формат вывода: только готовый текст письма, без Markdown, без пояснений и меток кода.

  ---

  🎯 Цель письма:
  1. Поблагодарить кандидата за отклик.
  2. Коротко и ясно представить вакансию (позиция, стек, формат, условия).
  3. Упомянуть сильные стороны кандидата (2–4 пункта, по данным из анализа).
  4. Пригласить подтвердить готовность к интервью.
  5. Использовать деловой, вежливый, но дружелюбный стиль (без излишнего официоза).

  ---

  📩 Структура письма:

  1️⃣ Приветствие:
  «Здравствуйте, {candidate['full_name']}!»  
  — Используй полное имя, включая отчество, если оно указано в JSON.  
  — Если отчество отсутствует, обращайся по имени и фамилии.

  2️⃣ Благодарность:
  «Благодарим вас за резюме и интерес к нашей вакансии.»

  3️⃣ Представление вакансии:

  - Укажи позицию {vacancy['position_name']}
  - Укажи кратко 1–2 ключевые задачи (возьми из списка {vacancy['requirements']['must_have']})
  - Перечисли кратко стек технологий ({vacancy['tech_stack']}).
  - Опиши формат работы ({vacancy['work_format']}: офис / удалённо / гибрид).
  - Укажи особые условия, если есть ({vacancy['special_conditions']}, например NDA, SIM-карта, ставка и т. д.
  - Удали любые упоминания об условиях оплаты и зарплаты.

  4️⃣ Сильные стороны кандидата:
  - Используй 2–4 релевантных пункта на основе списка {strong_points}.
  - Примеры: «Опыт работы с Python более 3 лет», «Разработка микросервисов», «Знание Docker и Kubernetes», «Опыт удалённой работы в распределённой команде».

  5️⃣ Заключение:
  «Если вам интересно обсудить детали, пожалуйста, подтвердите готовность к интервью — мы подберём удобное время.»

  6️⃣ Подпись:
  «С уважением,  
  {user_name}»
  ---

  ✍️ Твоя задача:
  Составь готовое письмо кандидату по вышеуказанным правилам на русском языке.
  Не используй шаблоны вроде “Уважаемый кандидат”, всегда подставляй имя.
  Не добавляй пояснений, просто выведи готовый текст письма.
  Удали в итоговом тексте любые упоминания об условиях оплаты , ставки, зарплаты и т.д.
  Сделай текст читаемым и визуально красивым. Вот пример:
  
  Здравствуйте, Максим Александрович!

  Спасибо за ваше резюме.
  Мы рассматриваем вас на позицию Разработчик-эксперт BPMSoft (🆔 10132) в рамках долгосрочного проекта по замещению CRM B2C.

  📌 Кратко о вакансии:
  — Разработка программных модулей BPMSoft по техническим требованиям;
  — Участие в обсуждении архитектуры и требований;
  — Интеграции с внешними системами;
  — Формат — удалённая полная занятость, поквартальная оплата.

  Ваш опыт по BPMSoft, C#, Ext JS и Angular полностью соответствует требованиям вакансии.
  Чтобы завершить сверку, пожалуйста, уточните:
  — используете ли вы в работе Kafka или аналогичный брокер сообщений?
  — работали ли вы с Swagger (OAS) и Postman для тестирования REST API?
  — применяете ли вы GitLab в практической разработке?

  Также просим подтвердить:
  — ваши зарплатные ожидания (2200 у.е. — актуальны?)
  — срок готовности выйти на проект;
  — формат оформления (ИП, самозанятый или штат).

  С уважением,
  {user_name}
  """

    model = genai.GenerativeModel('gemini-2.5-pro')
    generation_config = genai.types.GenerationConfig(temperature=0.1)

    
    response = await model.generate_content_async(prompt, generation_config=generation_config)
    return response.text.strip()
  except Exception as e:
      print(f"🔥 Ошибка при формировании письма кандидату: {e}")
      return False
    
    
    
async def generate_mail_for_candidate_utochnenie(json_data: dict, user_name: str):
  try:
    vacancy = json_data.get('vacancy', {})
    candidate = json_data.get('candidate', {})
    
    must_have_candidate = json_data.get('compliance_check', {}).get('must_have', [])
    utochnenie = []
    for must_have in must_have_candidate:
      if must_have['status'] == 'Да':
        continue
      elif must_have['status'] == 'Нет (требуется уточнение)':
        utochnenie.append(must_have['requirement'])
      elif must_have['status'] == 'Нет (точно нет)':
        continue

    prompt = f"""
Ты — продвинутый ассистент IT-рекрутера компании Omega Solutions.  
На основе JSON с результатами сверки резюме и вакансии составь готовое письмо кандидату для уточнения деталей.

---

📌 **Основные принципы:**
— Пиши строго по структуре ниже, без Markdown, кавычек и пояснений.  
— Используй живой деловой стиль, без излишнего официоза.  
— Структура письма должна быть читаемой и визуально аккуратной.  
— Если в списке {utochnenie} есть пункты, связанные с отсутствием ФИО, даты рождения или зарплатных ожиданий, обязательно включи их в уточнение.  
— Игнорируй “социальные” качества (ответственность, инициативность и т.п.) — уточняй только технические или фактические моменты.  
— Не пиши ничего о ставках, оплате, бюджете или деньгах.  

---

📩 **Структура письма:**

1️⃣ **Приветствие:**  
Здравствуйте, {candidate.get('full_name', 'коллега')}!  
(Если есть отчество — используй его. Если нет — только имя и фамилию.)

2️⃣ **Благодарность:**  
Спасибо за ваше резюме.  
Мы рассматриваем вас на позицию {vacancy.get('position_name')} (🆔 {vacancy.get('position_id', '')}) в рамках проекта нашего заказчика.

3️⃣ **Кратко о вакансии:**  
— Опиши в 3–4 строках суть проекта и задачи, опираясь на {vacancy.get('requirements', {}).get('must_have', [])}.  
— Добавь ключевые технологии из {vacancy.get('tech_stack', [])}.  
— Укажи формат работы ({vacancy.get('work_format')}).  
— Если есть особые условия в {vacancy.get('special_conditions', {})} — упомяни их (например NDA, SIM-карта, график, удалёнка).  
— Исключи любые упоминания об оплате.

4️⃣ **Соответствие кандидата:**  
Сравни стек кандидата ({candidate.get('tech_stack', [])}) с требованиями вакансии и подчеркни 2–3 совпадения.  
Напиши коротко:  
«Ваш опыт с [технологии/области] хорошо соответствует требованиям проекта.»  

5️⃣ **Блок уточнений:**  
Начни с фразы:  
«Чтобы завершить сверку, пожалуйста, уточните:»  
Далее оформи список уточнений, основанный на {utochnenie}, в естественной форме.  
Пример:  
— использовали ли вы Kafka или другой брокер сообщений?  
— есть ли опыт настройки CI/CD в Jenkins или GitLab?  
— применяли ли вы Spring Boot 3 или Hibernate в последних проектах?  

Если уточнений немного, добавь стандартный блок:  
«Также просим подтвердить:  
— ваши зарплатные ожидания (валюта и диапазон, без “на руки”) (Если они не указаны в резюме.Если указаны в резюме,то эту строку не писать);  
— контакты для оперативной связи (Telegram, телефон, e-mail) (Если они не указаны в резюме.Если указаны в резюме,то эту строку не писать);  
— готовность к выходу после оффера (сроки);  
— формат оформления (штат, контракт, ИП, самозанятый);  


6️⃣ **Подпись:**  
С уважением,  
{user_name}  

---

✍️ **Инструкция для модели:**
— Составь итоговое письмо строго по структуре.  
— Текст должен быть без пояснений, без маркировки, только готовое письмо.  
— Не добавляй Markdown или комментарии.  
— Письмо должно выглядеть как живое деловое сообщение от рекрутера Omega Solutions кандидату.  
— Обязательно включи в письмо реальные детали вакансии (позиция, формат, стек, задачи).  
— Сохрани фирменный стиль: лаконично, чётко, доброжелательно.

Пример письма:
Пример письма уточнения
Здравствуйте, Максим Александрович!

Спасибо за ваше резюме.
Мы рассматриваем вас на позицию Разработчик-эксперт BPMSoft (🆔 10132) в рамках долгосрочного проекта по замещению CRM B2C.

📌 Кратко о вакансии:
— Разработка программных модулей BPMSoft по техническим требованиям;
— Участие в обсуждении архитектуры и требований;
— Интеграции с внешними системами;
— Формат — удалённая полная занятость, поквартальная оплата.

Ваш опыт по BPMSoft, C#, Ext JS и Angular полностью соответствует требованиям вакансии.
Чтобы завершить сверку, пожалуйста, уточните:
— используете ли вы в работе Kafka или аналогичный брокер сообщений?
— работали ли вы с Swagger (OAS) и Postman для тестирования REST API?
— применяете ли вы GitLab в практической разработке?

Также просим подтвердить:
— ваши зарплатные ожидания (2200 у.е. — актуальны?)
— срок готовности выйти на проект;
— формат оформления (ИП, самозанятый или штат).

С уважением,
{user_name}

"""

    model = genai.GenerativeModel('gemini-2.5-pro')
    generation_config = genai.types.GenerationConfig(temperature=0.1)

    response = await model.generate_content_async(prompt, generation_config=generation_config)
    return response.text.strip()

  except Exception as e:
    print(f"🔥 Ошибка при формировании письма кандидату: {e}")
    return False


async def generate_mail_for_candidate_otkaz(json_data: dict, user_name: str):
  try:
    vacancy = json_data.get('vacancy', {})
    candidate = json_data.get('candidate', {})

    must_have_candidate = json_data.get('compliance_check', {}).get('must_have', [])
    strong_points = []
    for must_have in must_have_candidate:
      if must_have['status'] == 'Да':
        strong_points.append(must_have['requirement'])

    prompt = f"""
Ты — ассистент IT-рекрутера компании Omega Solutions.  
На основе JSON с результатами сверки резюме и вакансии нужно составить письмо кандидату с позитивным отказом.

---

📌 **Требования к письму:**
— Пиши строго в деловом, доброжелательном стиле Omega Solutions.  
— Без Markdown, кавычек, комментариев и форматирования.  
— Структура письма должна быть чистой, логичной и вежливой.  
— Не упоминай деньги, ставки, оплату.  
— Используй имя и отчество, если есть в JSON; если нет — имя и фамилию.  

---

📩 **Структура письма:**

1️⃣ **Приветствие:**  
Здравствуйте, {candidate.get('full_name', 'коллега')}!

2️⃣ **Благодарность:**  
Благодарим вас за резюме и интерес к вакансии {vacancy.get('position_name')} (🆔 {vacancy.get('position_id', '')}).  
Было приятно познакомиться с вашим профессиональным опытом.

3️⃣ **Информация об отказе:**  
К сожалению, по итогам рассмотрения профиля мы не можем предложить участие именно в этой вакансии.  
Решение связано с требованиями проекта, а не с уровнем ваших компетенций.

4️⃣ **Акцент на сильных сторонах:**  
Отметьте 2–3 сильные стороны кандидата на основе {strong_points}.  
Пример:  
«Отдельно отмечаем ваш опыт в разработке микросервисов, уверенное владение Kubernetes и участие в архитектурных решениях.»

5️⃣ **Позитивное завершение:**  
Добавь, что компания Omega Solutions сотрудничает с множеством заказчиков и проектов,  
поэтому мы обязательно предложим кандидату другие подходящие вакансии в будущем.  
Напиши в живом стиле:  
«Мы сохраняем ваше резюме в нашей базе и обязательно свяжемся,  
как только появится проект, соответствующий вашему профилю.»

6️⃣ **Подпись:**  
С уважением,  
{user_name}  

---

✍️ **Инструкция для модели:**
— Составь письмо строго по указанной структуре.  
— Не добавляй Markdown, звёздочки, комментарии.  
— Не включай перечисления требований или задач вакансии.  
— Текст должен быть лаконичным, позитивным и вежливым, с акцентом на уважение к кандидату.  
— В конце — только подпись, без лишних слов.

Пример письма:
Здравствуйте, Виктор Сергеевич!

Благодарим вас за предоставленное резюме и интерес к нашим проектам.
Мы внимательно рассмотрели ваш опыт в рамках позиции Архитектор Senior (🆔AR-10032).

По итогам анализа было принято решение не продвигать вашу кандидатуру на данный проект,
так как требовался более выраженный опыт в области архитектурного моделирования (Camunda, C4 Model)
и работы в логистических доменах.

При этом ваш профессиональный бэкграунд — сильный опыт в .NET, Kafka, DevOps и микросервисной архитектуре —
высоко оценивается, и мы уверены, что он будет востребован в других проектах Omega Solutions.

Мы обязательно свяжемся с вами, когда появятся новые вакансии, где ваш опыт будет максимально релевантен.

С уважением,
{user_name}

"""

    model = genai.GenerativeModel('gemini-2.5-pro')
    generation_config = genai.types.GenerationConfig(temperature=0.1)

    response = await model.generate_content_async(prompt, generation_config=generation_config)
    return response.text.strip()

  except Exception as e:
    print(f"🔥 Ошибка при формировании письма кандидату (отказ): {e}")
    return False



async def generate_cover_letter_for_client(json_data: dict):
  try:
    vacancy = json_data.get('vacancy', {})
    candidate = json_data.get('candidate', {})
    compliance = json_data.get('compliance_check', {})

    must_have = compliance.get('must_have', [])
    nice_to_have = compliance.get('nice_to_have', [])
    user_name = json_data.get('telegram_manager_name', 'Кандидат')
    # Сильные стороны из must_have и nice_to_have
    confirmed_main = [r.get('requirement') for r in must_have if r.get('status') == 'Да']
    confirmed_extra = [r.get('requirement') for r in nice_to_have if r.get('status') == 'Да']

    manager_nick = vacancy.get('manager_telegram_nickname', '@telegram_manager_name')
    full_name = candidate.get('full_name', 'Кандидат')
    position_name = vacancy.get('position_name', 'позиция')
    position_id = vacancy.get('position_id', '')
    grade = candidate.get('grade_and_position', '')
    location = candidate.get('location', {}).get('city', '❌')
    stack = ", ".join(candidate.get('tech_stack', [])[:8]) or 'технологический стек уточняется'
    experience = None
    summary = json_data.get('summary', {})
    salary = summary.get('salary_expectations', None)
    full_experience = candidate.get('full_experience', 'Полный опыт работы в IT уточняется')

    prompt = f"""
Ты — ассистент IT-рекрутера компании Omega Solutions.

Составь готовое сопроводительное письмо клиенту по предоставленному JSON, строго по правилам ниже.  
Пиши текст без Markdown, без кавычек, без пояснений.

---

📩 **СТРУКТУРА ПИСЬМА**

1️⃣ **Приветствие:**
{user_name}, здравствуйте!

2️⃣ **Представление кандидата:**
Представляю кандидата {full_name} на позицию {position_name} ({'🆔 ' + position_id if position_id else ''}).

3️⃣ **Соответствие:**
Все обязательные требования вакансии подтверждены.  
Кандидат соответствует требованиям вакансии.  
Из дополнительных компетенций отмечу: {', '.join(confirmed_extra) if confirmed_extra else 'дополнительные компетенции не указаны'}.

4️⃣ **Кратко о кандидате:**
— Грейд: {grade}  
— Локация: {location}  
— Опыт: {full_experience}  
— Стек: {stack}\n{"— Ставка: " + salary if salary and salary != 'нужно уточнить' else ''}

5️⃣ **Заключение:**
Резюме прилагается в формате White Label (на русском, без сокращений, с акцентами на требования вакансии).

---

✍️ **Инструкция для модели:**
— Составь итоговое письмо в одном цельном тексте.  
— Не используй списки или нумерацию, только аккуратные абзацы.  
— Не добавляй Markdown или символы форматирования.  
— Стиль: деловой, лаконичный, вежливый.  
— Итог: готовый текст письма клиенту.

Пример письма:
Здравствуйте, {user_name}!

Представляем кандидата Алексея Карнеенко на позицию QA Senior (🆔 QA-10157).
Кандидат полностью соответствует ключевым требованиям вакансии.
Соответствие требованиям:
Опыт тестирования от 3 лет — ✅
Python / C# / Selenium — ✅
API, REST, Postman, Swagger — ✅
Kafka, брокеры сообщений — ✅
CI/CD (Azure DevOps) — ✅
SQL, Git, Docker — ✅
Создание тест-кейсов, планов, BDD, Allure — ✅
Анализ логов, Fiddler — ✅
Опыт с FinTech и инвестиционными продуктами — ✅
Требует уточнения:
Использование техник тест-дизайна (вероятно есть)
Опыт с Kibana / JMeter
Применение принципов ООП и паттернов проектирования
Краткая информация о кандидате:
 Грейд: Senior
 Локация: Солигорск, Беларусь
 Ставка: 1692 (партнёр не РФ)
 Выход на проект: через 2 недели после оффера
 Образование: Солигорский государственный горно-химический колледж
 Опыт: 4+ лет в QA Automation (Python, C#, FinTech, Cloud)

📎 Резюме кандидата прилагается (формат White Label, на русском языке, без сокращений, с акцентом на соответствие требованиям вакансии)

"""

    model = genai.GenerativeModel("gemini-2.5-flash")
    generation_config = genai.types.GenerationConfig(temperature=0.1)

    response = model.generate_content(prompt, generation_config=generation_config)
    return response.text.strip()

  except Exception as e:
    print(f"🔥 Ошибка при формировании письма клиенту: {e}")
    return False
