from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from db import get_tg_user, get_email_user, get_contact
from aiogram.types import CopyTextButton

async def main_kb():
    builder = InlineKeyboardBuilder()
    #builder.button(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏", callback_data='slova_info')
    
    #builder.button(text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", callback_data='channels_info')
    #builder.button(text='–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã', callback_data='scan_channels')
    builder.button(text='–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å RedlabPartners 14 –¥–Ω–µ–π', callback_data='scan_redlab')
    builder.button(text='–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å RedlabPartners 21 –¥–µ–Ω—å', callback_data='scan_redlab_21')
    builder.button(text='–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å RedlabPartners(1 –¥–µ–Ω—å)', callback_data='scan_redlab_day')
    builder.button(text = '–î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤—Ä—É—á–Ω—É—é', callback_data='scan_hand')
    
    builder.adjust(1)
    return builder.as_markup()
    

async def channels_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data='all_channels')
    builder.button(text="+ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='add_channel')
    builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)
    return builder.as_markup()


async def channel_kb(id):
    builder = InlineKeyboardBuilder()
    builder.button(text="–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"delete_channel:{id}")
    builder.adjust(1)
    return builder.as_markup()


async def slova_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤", callback_data='all_slova')
    builder.button(text="+ –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data='add_slovo')
    builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)
    return builder.as_markup()

async def slovo_kb(id):
    builder = InlineKeyboardBuilder()
    builder.button(text="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data=f"delete_slovo:{id}")
    builder.adjust(1)
    return builder.as_markup()

async def back_to_slova_menu_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_slova_menu")
    return kb.as_markup()

async def back_to_channel_menu_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_channel_menu")
    return kb.as_markup()



async def filters_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤", callback_data='all_filters')
    builder.button(text="+ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data='add_filter')
    builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)
    return builder.as_markup()

async def filter_kb(id):
    builder = InlineKeyboardBuilder()
    builder.button(text="–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data=f"delete_filter:{id}")
    builder.adjust(1)
    return builder.as_markup()

async def back_to_filter_menu_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_filter_menu")
    return kb.as_markup()


async def send_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="DevOps", callback_data="topic:17")
    builder.button(text="Frontend", callback_data="topic:9")
    builder.button(text="Backend", callback_data="topic:4")
    builder.button(text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∏", callback_data="topic:11")
    builder.button(text="–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", callback_data="topic:13")
    builder.button(text="QA", callback_data="topic:6")
    builder.button(text="–î–∏–∑–∞–π–Ω–µ—Ä—ã", callback_data="topic:29")
    builder.button(text="–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="topic:23")
    builder.button(text="–õ–∏–¥–µ—Ä—ã", callback_data="topic:21")
    builder.button(text='–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—ã', callback_data="topic:25")
    builder.button(text='1–°', callback_data="topic:15")
    builder.button(text='Support', callback_data="topic:27")
    builder.button(text='Mobile', callback_data="topic:19")
    builder.button(text='General', callback_data="topic:1")
    builder.adjust(3)
    return builder.as_markup()


async def scan_vac_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data='scan_kand_for_vac')
    builder.adjust(1)
    return builder.as_markup()

def scan_vac_rekr_yn_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text='–î–∞', callback_data='yes_vac_rekr')
    builder.button(text='–ù–µ—Ç', callback_data='no_vac_rekr')
    return builder.as_markup()

def generate_mail_kb():
    
    builder = InlineKeyboardBuilder()
   
       
    builder.button(text='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ —Ñ–∏–Ω–∞–ª–∏—Å—Ç–∞', callback_data=f'generate_mail:PP')
    builder.button(text='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–µ–µ –ø–∏—Å—å–º–æ', callback_data=f'generate_mail:CP')
    builder.button(text='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–∞–∑', callback_data=f'generate_mail:NP')
    builder.button(text='–°–≤–µ—Ä–Ω—É—Ç—å', callback_data=f'hide')
    builder.adjust(1)
    return builder.as_markup()
    

def generate_klient_mail_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞', callback_data='generate_klient_mail')
    return builder.as_markup()


def get_all_info_kb():
    builder = InlineKeyboardBuilder()
    
    builder.button(text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data=f'get_all_info')
    builder.button(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'del')
    builder.adjust(1)
    return builder.as_markup()


def send_mail_to_candidate_kb(verdict: str, mail: str):
   
    builder = InlineKeyboardBuilder()
    
    
    if verdict == '–ß–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç (–Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è)':
        builder.button(text='–î–æ–±–∞–≤–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏ —Å–¥–µ–ª–∞—Ç—å WL', callback_data='add_utochnenie')
    elif verdict == '–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ö–æ–¥–∏—Ç':
        builder.button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É', callback_data='back_to_group')
        
    
    builder.button(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É', callback_data=f'send_mail_to_candidate')
    builder.button(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ—Ä–∫—É', callback_data=f'show_sverka')
    builder.button(text='–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', switch_inline_query_current_chat=f'{mail}')
    builder.button(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'del')
    builder.adjust(1)
    return builder.as_markup()

def send_mail_or_generate_client_mail_kb(mail: str, candidate_mail: str = None):
    builder = InlineKeyboardBuilder()
    builder.button(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É', callback_data=f'send_mail_to_candidate')
    if candidate_mail:
        builder.button(text = '–í–µ—Ä–Ω—É—Ç—Å—è –∫ –ø–∏—Å—å–º—É –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞', callback_data='back_to_group')
    builder.button(text='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞', callback_data='generate_klient_mail')
    builder.button(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ—Ä–∫—É', callback_data='show_sverka')
    builder.button(text='–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', switch_inline_query_current_chat=f'{mail}')
    builder.button(text='–£–¥–∞–ª–∏—Ç—å', callback_data='del')
    builder.adjust(1)
    return builder.as_markup()


async def create_contacts_kb(message_id):
  
    print(message_id)
    builder = InlineKeyboardBuilder()
    contacts = await get_contact(message_id)
    
    telegram = None
    email = None
    phone = None
    
    if contacts:
        telegram = contacts.contact_tg
        email = contacts.contact_email
        phone = contacts.contact_phone
    
    
    if not phone and not telegram and not email:
            builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="add_contacts")
            return builder.as_markup()
    if telegram:
        builder.button(text="üí¨ Telegram", callback_data=f"con:t:{telegram}")
    if email:
        builder.button(text="üìß Email", callback_data=f"con:e:{email}")
    if phone:
        builder.button(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω", copy_text=CopyTextButton(text=f"{phone}"))
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="add_contacts")
    builder.button(text="–ù–∞–∑–∞–¥ –∫ –ø–∏—Å—å–º—É", callback_data="show_mail")
    builder.adjust(2,1,1)
    return builder.as_markup()




def add_another_resume_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text='–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–µ–∑—é–º–µ', callback_data='add_another_resume')
    return builder.as_markup()


async def service_kb(user_name_tg):
    builder = InlineKeyboardBuilder()
    tg_privyazka = await get_tg_user(user_name_tg)
    email_privyazka = await get_email_user(user_name_tg)
    if tg_privyazka:
        builder.button(text='–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É Telegram', callback_data='remove_tg')
    else:
        builder.button(text='–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram', callback_data='telegram')
    if email_privyazka:
        builder.button(text='–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É Gmail', callback_data='remove_email')
    else:
        builder.button(text='–ü—Ä–∏–≤—è–∑–∞—Ç—å Gmail', callback_data='gmail')
    builder.adjust(1)
    return builder.as_markup()

def next_email_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text='–î–∞–ª–µ–µ', callback_data='next_email')
    return builder.as_markup()


def next_telegram_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text='–î–∞–ª–µ–µ', callback_data='next_telegram')
    return builder.as_markup()

def accept_delete_tg_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='accept_delete_tg')
    return builder.as_markup()


def accept_delete_email_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='accept_delete_email')
    return builder.as_markup()

def link_to_thread_kb(link):
    builder = InlineKeyboardBuilder()
    builder.button(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—Ä–µ–¥—É', callback_data='link_to_thread', url=link)
    return builder.as_markup()


def show_mail_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text='–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏—Å—å–º–æ', callback_data='show_mail')
    builder.button(text='–£–¥–∞–ª–∏—Ç—å', callback_data='del')
    builder.adjust(1)
    return builder.as_markup()

def send_to_group_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –ø–∏—Å—å–º–æ –∏ WL —Ä–µ–∑—é–º–µ', callback_data='send_to_group')
    builder.button(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É —Ç–æ–ª—å–∫–æ –ø–∏—Å—å–º–æ', callback_data='send_to_group_mail')
    builder.button(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å WL —Ä–µ–∑—é–º–µ', callback_data='show_wl')
    builder.button(text='–£–¥–∞–ª–∏—Ç—å', callback_data='del')
    builder.button(text='–ù–∞–∑–∞–¥ –∫ –ø–∏—Å—å–º—É', callback_data='back_to_mail')
    builder.adjust(1)
    return builder.as_markup()


def contacts_add_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text='Telegram', callback_data='addcontacts_tg')
    builder.button(text='Email', callback_data='addcontacts_email')
    builder.button(text='–¢–µ–ª–µ—Ñ–æ–Ω', callback_data='addcontacts_phone')
    return builder.as_markup()