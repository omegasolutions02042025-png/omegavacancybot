
import asyncio
from datetime import datetime, timedelta, timezone
import json
import math
import re
import random
from telethon import TelegramClient, events
from telethon.tl.types import Channel, Chat, User
from db import get_all_channels, add_message_mapping, remove_message_mapping, get_all_message_mappings, get_next_sequence_number
from gpt import del_contacts_gpt, process_vacancy
from googlesheets import find_rate_in_sheet_gspread, search_and_extract_values
from typing import Tuple, Optional
from funcs import is_russia_only_citizenship, oplata_filter, check_project_duration
from telethon.errors import FloodWaitError
from aiogram import Bot
import teleton_client
import os

VACANCY_ID_REGEX = re.compile(
    r"(?:üÜî\s*)?(?:[\w\-\u0400-\u04FF]+[\s\-]*)?\d+", 
    re.IGNORECASE
)
GROUP_ID = os.getenv('GROUP_ID')
ADMIN_ID = os.getenv('ADMIN_ID')

#
#
# --- Telethon —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def forward_recent_posts(telethon_client, CHANNELS, GROUP_ID, AsyncSessionLocal, bot: Bot):
    # aware-–¥–∞—Ç–∞ –≤ UTC
    cutoff_date = datetime.now(timezone.utc) - timedelta(days=14)

    entity = await telethon_client.get_entity(int(GROUP_ID))

    for source in CHANNELS:
        async for message in telethon_client.iter_messages(source):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–µ 2 –Ω–µ–¥–µ–ª—å ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é
            if message.date < cutoff_date:
                break

            try:
                text_orig = message.message or ""
                if not text_orig:
                    continue
                
                if is_russia_only_citizenship(text_orig):
                    await bot.send_message(ADMIN_ID, f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ –∫–∞–Ω–∞–ª–µ {entity} —Å–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ, –Ω–µ –ø–æ–¥–ª–µ–∂–∞—â–µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                if has_strikethrough(message):
                    await bot.send_message(ADMIN_ID, f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ –∫–∞–Ω–∞–ª–µ {entity} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                if oplata_filter(text_orig):
                    await bot.send_message(ADMIN_ID, f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ –∫–∞–Ω–∞–ª–µ {entity} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â—É—é –æ–ø–ª–∞—Ç—É ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                if check_project_duration(text_orig):
                    await bot.send_message(ADMIN_ID, f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ –∫–∞–Ω–∞–ª–µ {entity} —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–ª–µ–Ω—å–∫—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    asyncio.sleep(3)
                    continue
                try:
                    text_gpt = await process_vacancy(text_orig)
                    #print(text)
                except Exception as e:
                    await bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {message.id} –≤ –∫–∞–Ω–∞–ª–µ {entity}: {e}")
                    continue
                if text_gpt == None:
                    continue
                else:


                    try:
                        text = text_gpt.get("text")
                        if text == None:
                           await bot.send_message(ADMIN_ID, f"‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞ {message.id} –≤ –∫–∞–Ω–∞–ª–µ {entity}")
                           continue            
                        vac_id = text_gpt.get('vacancy_id')
                        await bot.send_message(ADMIN_ID, f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è {vac_id} –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {entity}")
                        rate = text_gpt.get("rate")
                        vacancy = text_gpt.get('vacancy_title')
                        if vacancy is None:
                            await bot.send_message(ADMIN_ID, f"‚ùå –í–∞–∫–∞–Ω—Å–∏—è {vac_id} –æ—Ç—Å–µ—è–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {entity}")
                            continue
                                    
                        deadline_date = text_gpt.get("deadline_date")  # "DD.MM.YYYY"
                        deadline_time = text_gpt.get("deadline_time") 
                                             

                        if int(rate) == 0 or rate == None:
                            text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}"
                        else:
                            rate = float(rate)
                            rate_sng_contract = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (—à—Ç–∞—Ç/–∫–æ–Ω—Ç—Ä–∞–∫—Ç) –°–ù–ì').get('B')
                            rate_sng_ip = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (–ò–ü) –°–ù–ì').get('B')
                            rate_sng_samozanyatii = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π) –°–ù–ì').get('B')
                            if rate_sng_contract and rate_sng_ip and rate_sng_samozanyatii:
                                text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ:\n —à—Ç–∞—Ç/–∫–æ–Ω—Ç—Ä–∞–∫—Ç : {rate_sng_contract} RUB,\n –ò–ü : {rate_sng_ip} RUB,\n —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π : {rate_sng_samozanyatii} RUB\n\n{text}"
                            else:
                                text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}"
                    except Exception as e:
                        await bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ {message.id} –≤ –∫–∞–Ω–∞–ª–µ {entity}: {e}")
                        continue

                forwarded_msg = await telethon_client.send_message(entity, text_cleaned)
                await bot.send_message(ADMIN_ID, f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–ª –∏–∑ {source}: {message.id}")
                async with AsyncSessionLocal() as session:
                    await add_message_mapping(
                        session,
                        src_chat_id=source,
                        src_msg_id=message.id,
                        dst_chat_id=entity,
                        dst_msg_id=forwarded_msg.id,
                        deadline_date=deadline_date,
                        deadline_time=deadline_time
                    )
                await asyncio.sleep(0.5)
            except Exception as e:
                await bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∏–∑ {source}: {e}")



async def forward_messages_from_topics(telethon_client, TOPIC_MAP, AsyncSessionLocal, bot : Bot, days=14):
    cutoff_date = datetime.now(timezone.utc) - timedelta(days=days)
    await bot.send_message(ADMIN_ID, f"[i] –ë–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å {cutoff_date}")

    for (src_chat, src_topic_id), (dst_chat, dst_topic_id) in TOPIC_MAP.items():
        await bot.send_message(ADMIN_ID, f"[i] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø–∏–∫ {src_topic_id} –≤ —á–∞—Ç–µ {src_chat}")
        try:
            async for msg in telethon_client.iter_messages(
                src_chat,
                reply_to=src_topic_id,
                reverse=False,
            ):
                if msg.date < cutoff_date:
                    print(msg.date)
                    await asyncio.sleep(5)
                    break
                
                text = msg.text
                if not text:
                    continue
                if is_russia_only_citizenship(text):
                    await bot.send_message(ADMIN_ID, f'‚ùå –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}')
                    continue
                
                if oplata_filter(text):
                    await bot.send_message(ADMIN_ID, f'‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}')
                    continue
                
                if check_project_duration(text):
                    await bot.send_message(ADMIN_ID, f'‚ùå –ú–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}')
                    continue

                if has_strikethrough(msg):
                    await bot.send_message(ADMIN_ID, f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {msg.id} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                try:
                    text_gpt = await process_vacancy(text)
                except Exception as e:
                    await bot.send_message(ADMIN_ID, f'‚ùå –û—à–∏–±–∫–∞ –≤ GPT –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}: {e}')
                    continue

                if text_gpt == None or text_gpt == 'None':
                    await bot.send_message(ADMIN_ID, f'‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞ –≤ GPT –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}')
                    continue

                try:
                    text = text_gpt.get("text")
                    if text is None:
                        await bot.send_message(ADMIN_ID, f'‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞ –≤ GPT –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}')
                        continue
                    
                    vac_id = text_gpt.get('vacancy_id')
                    print(vac_id)
                    print(type(vac_id))
                    rate = text_gpt.get("rate")
                    vacancy = text_gpt.get('vacancy_title')
                    deadline_date = text_gpt.get("deadline_date")
                    deadline_time = text_gpt.get("deadline_time")
                    utochnenie = text_gpt.get("utochnenie")
                    if vacancy is None or vacancy == 'None':
                        await bot.send_message(ADMIN_ID, f'‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ GPT –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}')
                        continue
                     

                    # –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ—Ç ID
                    if vac_id is None  or vac_id == 'None':
                        await bot.send_message(ADMIN_ID, f'‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞, –Ω–µ—Ç ID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}')
                        continue

                    # –ë–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏
                    if rate is None or int(rate) == 0:
                        text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}"
                    else:
                        rate = float(rate)
                        rate_sng_contract = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (—à—Ç–∞—Ç/–∫–æ–Ω—Ç—Ä–∞–∫—Ç) –°–ù–ì').get('B')
                        rate_sng_ip = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (–ò–ü) –°–ù–ì').get('B')
                        rate_sng_samozanyatii = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π) –°–ù–ì').get('B')
                        if rate_sng_contract and rate_sng_ip and rate_sng_samozanyatii:
                            text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ:\n —à—Ç–∞—Ç/–∫–æ–Ω—Ç—Ä–∞–∫—Ç : {rate_sng_contract} RUB,\n –ò–ü : {rate_sng_ip} RUB,\n —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π : {rate_sng_samozanyatii} RUB\n\n{text}"
                        else:
                            text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}"
                        
                    if utochnenie == 'True' or utochnenie is True:
                        await telethon_client.send_message(
                            GROUP_ID,
                            text_cleaned,
                        )
                        await bot.send_message(ADMIN_ID, f'‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}')
                        continue
                        
                    forwarded_msg = await telethon_client.send_message(
                        dst_chat,
                        text_cleaned,
                        file=msg.media,
                        reply_to=dst_topic_id
                    )
                    
                    async with AsyncSessionLocal() as session:
                        await add_message_mapping(
                            session,
                            src_chat_id=src_chat,
                            src_msg_id=msg.id,
                            dst_chat_id=dst_chat,
                            dst_msg_id=forwarded_msg.id,
                            deadline_date=deadline_date,
                            deadline_time=deadline_time
                        )
                    
                    await asyncio.sleep(0.5)
            
                except Exception as e:
                    await bot.send_message(ADMIN_ID, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}: {e}')
                    continue
            
        except Exception as e:
            await bot.send_message(ADMIN_ID, f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ {src_topic_id} –≤ —á–∞—Ç–µ {src_chat}: {e}")
    

def has_strikethrough(message):
    if not message.entities:
        return False
    for entity in message.entities:
        if entity.__class__.__name__ == 'MessageEntityStrike':
            print(f"üîç –ù–∞–π–¥–µ–Ω –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id}")
            return True
    return False

async def register_handler(telethon_client, CHANNELS, GROUP_ID, AsyncSessionLocal, bot : Bot):
    @telethon_client.on(events.NewMessage(chats=CHANNELS))
    async def new_channel_message_handler(event):
        text = event.message.message or event.message.text or ""
        if not text:
            return

        if is_russia_only_citizenship(text):
            await bot.send_message(ADMIN_ID, f'‚ùå –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {event.message.id}')
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—á—ë—Ä–∫–Ω—É—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if has_strikethrough(event.message):
            await bot.send_message(ADMIN_ID, f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {event.message.id} –≤ –∫–∞–Ω–∞–ª–µ {event.chat_id} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        if oplata_filter(text):
            await bot.send_message(ADMIN_ID, f'‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {event.message.id}')
            return
        entity = await telethon_client.get_entity(int(GROUP_ID))
        
        try:
            text_gpt = await process_vacancy(text)
        except Exception as e:
            await bot.send_message(ADMIN_ID, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {event.message.id}: {e}')
            return
        if text_gpt == None:
            return
        else:
            try:
                
                text = text_gpt.get("text")
                if text == None:
                   await bot.send_message(ADMIN_ID, f'‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {event.message.id}')
                   return
                vac_id = text_gpt.get('vacancy_id')
                print(vac_id)
                rate = text_gpt.get("rate")
                vacancy = text_gpt.get('vacancy_title')
                deadline_date = text_gpt.get("deadline_date")  # "DD.MM.YYYY"
                deadline_time = text_gpt.get("deadline_time") 
                if rate == None or int(rate) == 0:
                    text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}"
                else:
                    rate = float(rate)
                    rate_sng_contract = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (—à—Ç–∞—Ç/–∫–æ–Ω—Ç—Ä–∞–∫—Ç) –°–ù–ì').get('B')
                    rate_sng_ip = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (–ò–ü) –°–ù–ì').get('B')
                    rate_sng_samozanyatii = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π) –°–ù–ì').get('B')
                    if rate_sng_contract and rate_sng_ip and rate_sng_samozanyatii:
                        
                        text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ:\n —à—Ç–∞—Ç/–∫–æ–Ω—Ç—Ä–∞–∫—Ç : {rate_sng_contract} RUB,\n –ò–ü : {rate_sng_ip} RUB,\n —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–π : {rate_sng_samozanyatii} RUB\n\n{text}"
                    else:
                        text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}"
            except Exception as e:
                await bot.send_message(ADMIN_ID, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {event.message.id}: {e}')
                return
        try:
            forwarded_msg = await telethon_client.send_message(entity=entity, message=text_cleaned)
        except Exception:
            forwarded_msg = await telethon_client.send_message(entity=entity, message=text_cleaned, parse_mode='html')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        async with AsyncSessionLocal() as session:
            await add_message_mapping(
                session,
                src_chat_id=event.chat_id,
                src_msg_id=event.message.id,
                dst_chat_id=int(GROUP_ID),
                dst_msg_id=forwarded_msg.id,
                deadline_date=deadline_date,
                deadline_time=deadline_time
            )

        await bot.send_message(ADMIN_ID, f'‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {event.message.id}')

    return new_channel_message_handler

async def list_all_dialogs(telethon_client, PHONE_NUMBER):
    await telethon_client.start(phone=PHONE_NUMBER)

    async for dialog in telethon_client.iter_dialogs():
        entity = dialog.entity

        if isinstance(entity, Channel):
            kind = '–ö–∞–Ω–∞–ª'
        elif isinstance(entity, Chat):
            kind = '–ì—Ä—É–ø–ø–∞'
        elif isinstance(entity, User):
            kind = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        else:
            kind = '–î—Ä—É–≥–æ–µ'

        print(f"{kind}: {dialog.name} ‚Äî ID: {entity.id}")

from datetime import datetime, timezone



async def monitor_and_cleanup(telethon_client, AsyncSessionLocal):
    while True:
        async with AsyncSessionLocal() as session:
            mappings = await get_all_message_mappings(session)

            for mapping in mappings:
                try:
                    msg = await telethon_client.get_messages(mapping.src_chat_id, ids=mapping.src_msg_id)
                    
                    
                    if mapping.src_msg_id == 5456 or mapping.src_msg_id == '5456':
                       print(msg.text)
                    vacancy_id = None
                    if msg.message:
                        match = VACANCY_ID_REGEX.search(msg.message)
                        if match:
                            vacancy_id = match.group(0)

                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –∑–∞—á—ë—Ä–∫–Ω—É—Ç–æ
                    if has_strikethrough(msg):
                        print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {mapping.src_msg_id} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ‚Äî —É–¥–∞–ª—è–µ–º")
                        await mark_inactive_and_schedule_delete(
                            telethon_client, mapping, vacancy_id
                        )
                        await remove_message_mapping(session, mapping.src_chat_id, mapping.src_msg_id)
                        continue
                    stop_pattern = re.compile(r'(üõë.*–°–¢–û–ü.*üõë|(?:\b—Å—Ç–æ–ø\b))', re.IGNORECASE)
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–æ "—Å—Ç–æ–ø"
                    if msg.message and stop_pattern.search(msg.message):
                        print(f"üõë –°–æ–æ–±—â–µ–Ω–∏–µ {mapping.src_msg_id} —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ '—Å—Ç–æ–ø' ‚Äî —É–¥–∞–ª—è–µ–º")
                        await mark_inactive_and_schedule_delete(
                            telethon_client, mapping, vacancy_id
                        )
                        await remove_message_mapping(session, mapping.src_chat_id, mapping.src_msg_id)
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞
                    if mapping.deadline_date:
                        try:
                            date_str = mapping.deadline_date.strip() if mapping.deadline_date else None
                            time_str = mapping.deadline_time.strip() if mapping.deadline_time else "23:59"

                            if not date_str or date_str.lower() == "none":
                                continue  # –¥–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                            parts = date_str.split(".")
                            if len(parts) != 3:
                                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")

                            day, month, year = parts
                            day = day.zfill(2)
                            month = month.zfill(2)

                            deadline_dt = datetime.strptime(f"{day}.{month}.{year} {time_str}", "%d.%m.%Y %H:%M")

                            print(f"üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è {mapping.src_msg_id} "
                                  f"({mapping.src_chat_id}): {deadline_dt}")

                            now_utc = datetime.now(timezone.utc)
                            if deadline_dt.replace(tzinfo=timezone.utc) <= now_utc:
                                print(f"‚è∞ –î–µ–¥–ª–∞–π–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {mapping.src_msg_id} –∏—Å—Ç—ë–∫ ‚Äî —É–¥–∞–ª—è–µ–º")
                                await mark_inactive_and_schedule_delete(
                                    telethon_client, mapping, vacancy_id
                                )
                                await remove_message_mapping(session, mapping.src_chat_id, mapping.src_msg_id)
                                continue

                        except Exception as e:
                            print(f"‚ö† –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è {mapping.src_msg_id} "
                                  f"–≤ {mapping.src_chat_id}: {e}")

                except FloodWaitError as e:
                    print(f"‚ö† Flood control: –∂–¥—ë–º {e.seconds} —Å–µ–∫.")
                    await asyncio.sleep(e.seconds)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {mapping.src_msg_id} –≤ {mapping.src_chat_id}: {e}")

        await asyncio.sleep(60)


async def mark_inactive_and_schedule_delete(client, mapping, vacancy_id):
    try:
        msg = await client.get_messages(mapping.dst_chat_id, ids=mapping.dst_msg_id)
        if not msg:
            return

        
        if vacancy_id:
            new_text = f"\n\n{vacancy_id} ‚Äî –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
        else:
            new_text = "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"

        await client.edit_message(mapping.dst_chat_id, mapping.dst_msg_id, new_text)

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º
        await client.pin_message(mapping.dst_chat_id, mapping.dst_msg_id, notify=False)
        print(f"üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {mapping.dst_msg_id} –≤ {mapping.dst_chat_id}")

        # –ñ–¥—ë–º 24 —á–∞—Å–∞
        await asyncio.sleep(24 * 60 * 60)

        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º
        await client.unpin_message(mapping.dst_chat_id, mapping.dst_msg_id)
        await client.delete_messages(mapping.dst_chat_id, mapping.dst_msg_id)
        print(f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {mapping.dst_msg_id} –≤ {mapping.dst_chat_id}")

    except FloodWaitError as e:
        print(f"‚ö† Flood control: –∂–¥—ë–º {e.seconds} —Å–µ–∫.")
        await asyncio.sleep(e.seconds)
        await mark_inactive_and_schedule_delete(client, mapping, vacancy_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ {mapping.dst_msg_id}: {e}")
  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É



async def generate_bd_id() -> str:
    sequence_num = await get_next_sequence_number()
    seq_str = str(sequence_num).zfill(4)
    return f"{seq_str}"

def remove_request_id(text: str) -> Tuple[str, Optional[str]]:
    """
    –£–¥–∞–ª—è–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏ –≤–∏–¥–∞:
    üÜî XX-1234 –∏–ª–∏ üÜî 1234
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        - 4-–∑–Ω–∞—á–Ω—ã–π ID –∫–∞–∫ —Å—Ç—Ä–æ–∫—É (–∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω)
    """
    match = re.search(r'üÜî(?:[A-Z]{2}-)?(\d{4})', text)
    vacancy_id = match.group(1) if match else None
    cleaned_text = re.sub(r'üÜî(?:[A-Z]{2}-)?\d{4}', '', text).strip()
    return cleaned_text, vacancy_id


async def register_topic_listener(telethon_client, TOPIC_MAP, AsyncSessionLocal, bot : Bot):
    print('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ')

    # –ë–µ—Ä—ë–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –∏–∑ TOPIC_MAP –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    chats_to_watch = list({chat_id for chat_id, _ in TOPIC_MAP.keys()})

    @telethon_client.on(events.NewMessage(chats=chats_to_watch))
    async def new_topic_message(event):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–æ–ø–∏–∫–∞
        if not hasattr(event.message, 'reply_to') or not event.message.reply_to:
            return  # –ù–µ —Ç–æ–ø–∏–∫-—Å–æ–æ–±—â–µ–Ω–∏–µ
        
        src_topic_id = event.message.reply_to.reply_to_msg_id
        
        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞
        key = (event.chat_id, src_topic_id)
        if key not in TOPIC_MAP:
            return  # –≠—Ç–æ—Ç —Ç–æ–ø–∏–∫ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º

        dst_chat_id, dst_topic_id = TOPIC_MAP[key]

        text = getattr(event.message, 'message', '') or ""
        if not text:
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if is_russia_only_citizenship(text):
            await bot.send_message(ADMIN_ID, f'‚ùå –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}')
            return

        if has_strikethrough(event.message):
            await bot.send_message(ADMIN_ID, f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {event.message.id} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        if oplata_filter(text):
            await bot.send_message(ADMIN_ID, f'‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}')
            return

        if check_project_duration(text):
            await bot.send_message(ADMIN_ID, f'‚ùå –ú–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}')
            return

        try:
            text_gpt = await process_vacancy(text)
        except Exception as e:
            await bot.send_message(ADMIN_ID, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}: {e}')
            return

        if text_gpt is None or text_gpt == 'None':
            return

        try:
            text = text_gpt.get("text")
            if text == None or text == 'None':
                await bot.send_message(ADMIN_ID, f'‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞ –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}')
                return
            vac_id = text_gpt.get('vacancy_id')
            rate = text_gpt.get("rate")
            vacancy = text_gpt.get('vacancy_title')
            if vacancy is None or vacancy == 'None':
                await bot.send_message(ADMIN_ID, f'‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}')
                return
            if vac_id is None or vac_id == 'None':
                await bot.send_message(ADMIN_ID, f'‚ùå –ù–µ—Ç –∞–π–¥–∏ –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}')
                return

            deadline_date = text_gpt.get("deadline_date")
            deadline_time = text_gpt.get("deadline_time")
            utochnenie = text_gpt.get("utochnenie")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏
            if rate is None or rate == 'None' or int(rate) == 0:
                text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}"
            else:
                rate = int(rate)
                rate = round(rate / 5) * 5
                rate = find_rate_in_sheet_gspread(rate)
                if rate is None or vacancy is None:
                    return
                rate = re.sub(r'\s+', '', rate)
                rounded = math.ceil(int(rate) / 100) * 100
                rate = f"{rounded:,}".replace(",", " ")
                text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: {rate} RUB\n\n{text}"

        except Exception as e:
            await bot.send_message(ADMIN_ID, f'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}: {e}')
            return

        try:
            if utochnenie == 'True' or utochnenie is True:
                await telethon_client.send_message(
                    GROUP_ID,
                    message=text_cleaned,
                )
                return  # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É —É—Ç–æ—á–Ω–µ–Ω–∏–π, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        except Exception as e:
            await bot.send_message(ADMIN_ID, f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É —É—Ç–æ—á–Ω–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}: {e}')
            return

        try:
            forwarded_msg = await telethon_client.send_message(
                dst_chat_id,
                message=text_cleaned,
                parse_mode='html',
                reply_to=dst_topic_id
            )
        except Exception as e:
            await bot.send_message(ADMIN_ID, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}: {e}')
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        async with AsyncSessionLocal() as session:
            await add_message_mapping(
                session,
                src_chat_id=event.chat_id,
                src_msg_id=event.message.id,
                dst_chat_id=dst_chat_id,
                dst_msg_id=forwarded_msg.id,
                deadline_date=deadline_date,
                deadline_time=deadline_time
            )
            await bot.send_message(ADMIN_ID, f'‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}')


async def check_and_delete_duplicates(teleton_client, channel_id: int, bot: Bot, topic_map: dict):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID –≤ —Ç–µ–∫—Å—Ç–µ"""
    seen_ids = set()
    
    target_topics = [v[1] for v in topic_map.values()]
    print(target_topics)
    while True:
        try:
            for topic_id in target_topics:
                
                async for message in teleton_client.iter_messages(channel_id, reply_to=topic_id):
                    if not message.text:
                        continue
                    
                    match = VACANCY_ID_REGEX.search(message.text)
                    if match:
                        vacancy_id = match.group(0).strip()
                        
                    else:
                        continue

                    if vacancy_id in seen_ids:
                        await bot.send_message(ADMIN_ID, f'‚ùå –î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω: {vacancy_id}, —É–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ –∫–∞–Ω–∞–ª–µ {channel_id}')
                        await message.delete()
                    else:
                        seen_ids.add(vacancy_id)
        except Exception as e:
            print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ', e)
        # –æ—á–∏—â–∞–µ–º —Å–µ—Ç –≤ –∫–æ–Ω—Ü–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏
        seen_ids.clear()
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, set –æ—á–∏—â–µ–Ω")
        await asyncio.sleep(60)


async def cleanup_by_striked_id(telethon_client, src_chat_id, dst_chat_id):
    """
    src_chat_id ‚Äî –∫–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫, –æ—Ç–∫—É–¥–∞ –±–µ—Ä—ë–º –∞–π–¥–∏
    dst_chat_id ‚Äî –∫–∞–Ω–∞–ª, –≥–¥–µ –∏—â–µ–º –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π –∞–π–¥–∏
    """
    async for msg in telethon_client.iter_messages(src_chat_id):
        try:
            if not msg.message or not msg.text:
                continue
            
            text = msg.message or msg.text
            # –ò—â–µ–º vacancy_id –ø–æ regex
            match = VACANCY_ID_REGEX.search(text)
            if not match:
                continue

            vacancy_id = match.group(0)
            
            lines = [line.strip() for line in text.splitlines() if line.strip()]
            name_vac = lines[1] if len(lines) > 1 else None
            

            # –ò—â–µ–º –≤ –¥—Ä—É–≥–æ–º –∫–∞–Ω–∞–ª–µ —ç—Ç–æ –∑–∞—á—ë—Ä–∫–Ω—É—Ç–æ–µ –∞–π–¥–∏
            async for dst_msg in telethon_client.iter_messages(dst_chat_id, search=vacancy_id):
                
                if dst_msg.message and vacancy_id in dst_msg.message:
                    if has_strikethrough(dst_msg):
                        print(f"üóë –ù–∞–π–¥–µ–Ω –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π ID {vacancy_id} –≤ {dst_chat_id} ‚Üí —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.id} –∏–∑ {src_chat_id}")
                        await mark_as_deleted(telethon_client, msg.id, src_chat_id, vacancy_id, name_vac)
                        break  # –Ω–∞—à–ª–∏ –∏ —É–¥–∞–ª–∏–ª–∏ ‚Üí –∏–¥—ë–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É

        except FloodWaitError as e:
            print(f"‚ö† Flood control: –∂–¥—ë–º {e.seconds} —Å–µ–∫.")
            await asyncio.sleep(e.seconds)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {e}")
        
    await asyncio.sleep(500)


async def mark_as_deleted(client, msg_id, chat_id, vacancy_id, name_vac):
    try:
        
        if vacancy_id:
            new_text = f"\n\n{vacancy_id} ‚Äî –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞\n{name_vac}"
        else:
            new_text = "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"

        await client.edit_message(chat_id, msg_id, new_text)

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º
        await client.pin_message(chat_id, msg_id, notify=False)
        print(f"üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}")

        # –ñ–¥—ë–º 24 —á–∞—Å–∞
        await asyncio.sleep(24 * 60 * 60)

        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º
        await client.unpin_message(chat_id, msg_id)
        await client.delete_messages(chat_id, msg_id)
        print(f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ {msg_id}: {e}")
  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    await asyncio.sleep(20)