
import asyncio
from datetime import datetime, timedelta, timezone
import json
import math
import re
import random
from telethon import TelegramClient, events
from telethon.tl.types import Channel, Chat, User
from db import get_all_channels, add_message_mapping, remove_message_mapping, get_all_message_mappings, get_next_sequence_number
from gpt import del_contacts_gpt, process_vacancy, format_vacancy
from googlesheets import find_rate_in_sheet_gspread, search_and_extract_values
from typing import Tuple, Optional
from funcs import is_russia_only_citizenship, oplata_filter, check_project_duration, send_mess_to_group, get_message_datetime, extract_vacancy_id_and_text
from telethon.errors import FloodWaitError
from aiogram import Bot
import teleton_client
import os
from gpt_gimini import process_vacancy_with_gemini, format_vacancy_gemini
from kb import scan_vac_kb
from telethon_monitor import has_strikethrough

VACANCY_ID_REGEX = re.compile(
    r"(?:üÜî\s*)?(?:[\w\-\u0400-\u04FF]+[\s\-]*)?\d+", 
    re.IGNORECASE
)
GROUP_ID = os.getenv('GROUP_ID')
ADMIN_ID = os.getenv('ADMIN_ID')
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")



telethon_client = TelegramClient('dmitryi', API_ID, API_HASH)

async def forward_messages_from_topics(telethon_client, TOPIC_MAP, AsyncSessionLocal, bot : Bot, days=14):
    cutoff_date = datetime.now(timezone.utc) - timedelta(days=days)
    await bot.send_message(ADMIN_ID, f"[i] –ë–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å {cutoff_date}")

    for (src_chat, src_topic_id), (dst_chat, dst_topic_id) in TOPIC_MAP.items():
        await bot.send_message(ADMIN_ID, f"[i] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø–∏–∫ {src_topic_id} –≤ —á–∞—Ç–µ {src_chat}")
        try:
            msgs = []
            async for msg in telethon_client.iter_messages(
                src_chat,
                reply_to=src_topic_id,
                reverse=True,

            ):
                if msg.date >= cutoff_date:
                    msgs.append(msg)
            msgs.sort(key=lambda m: m.date)
            for msg in msgs:
                print(msg.date)
            for msg in msgs:
                text = msg.text
                if not text:
                    continue
                
                if check_project_duration(text):
                    await bot.send_message(ADMIN_ID, f'‚ùå –ú–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}')
                    continue

                if has_strikethrough(msg):
                    await bot.send_message(ADMIN_ID, f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {msg.id} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                try:
                    text_gpt = await process_vacancy_with_gemini(text)
                except Exception as e:
                    await bot.send_message(ADMIN_ID, f'‚ùå –û—à–∏–±–∫–∞ –≤ GPT –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}: {e}')
                    continue
                
                reason = text_gpt.get("reason")
                if reason:
                    await bot.send_message(ADMIN_ID, f'‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞ –≤ GPT –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}: {reason}')
                    continue
                
                if text_gpt == None or text_gpt == 'None':
                    await bot.send_message(ADMIN_ID, f'‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞ –≤ GPT –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}')
                    continue
            
                try:
                    text = text_gpt.get("text")
                    if text is None:
                        await bot.send_message(ADMIN_ID, f'‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞ –≤ GPT –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}')
                        continue
                
                    
                    vac_id = text_gpt.get('vacancy_id')
                    rate = text_gpt.get("rate")
                    vacancy = text_gpt.get('vacancy_title')
                    deadline_date = text_gpt.get("deadline_date")
                    deadline_time = text_gpt.get("deadline_time")
                    utochnenie = text_gpt.get("utochnenie")
                    delay_payment = text_gpt.get("delay_payment")
                    acts = text_gpt.get("acts")
                    only_fulltime = text_gpt.get("only_fulltime")
                    short_project = text_gpt.get("short_project")
                    long_payment = text_gpt.get("long_payment")
                    message_date = f'–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {get_message_datetime(msg)}'
                    
                    if vacancy is None or vacancy == 'None':
                        await bot.send_message(ADMIN_ID, f'‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ GPT –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}')
                        continue
                     

                    # –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ—Ç ID
                    if vac_id is None  or vac_id == 'None':
                        await bot.send_message(ADMIN_ID, f'‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞, –Ω–µ—Ç ID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}')
                        continue

                    # –ë–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏
                    if delay_payment:
                        delay_payment_text = f"–° –æ—Ç—Å—Ä–æ—á–∫–æ–π –ø–ª–∞—Ç–µ–∂–∞ {delay_payment}–ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ç–∞:\n"
                        no_rate_delay = f'–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {delay_payment}'
                    else:
                        delay_payment_text = '–° –æ—Ç—Å—Ä–æ—á–∫–æ–π –ø–ª–∞—Ç–µ–∂–∞ "–°—Ä–æ–∫ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è" –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ç–∞:\n'
                        no_rate_delay = '–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: –°—Ä–æ–∫ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è'
        
        
        
        
        # –ë–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏
                    if rate is None or int(rate) == 0:
                        text_cleaned = f"üÜî{vac_id}\n\n{message_date}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{no_rate_delay}\n\n{text}"
                    else:
                        rate = float(rate)
                        rate_sng_contract = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (—à—Ç–∞—Ç/–∫–æ–Ω—Ç—Ä–∞–∫—Ç) –°–ù–ì')
                        rate_sng_ip = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (–ò–ü) –°–ù–ì')
                        rate_sng_samozanyatii = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π) –°–ù–ì')
                        if rate_sng_contract and rate_sng_ip and rate_sng_samozanyatii:
                            rate_sng_contract = rate_sng_contract.get('B')
                            rate_sng_ip = rate_sng_ip.get('B')
                            rate_sng_samozanyatii = rate_sng_samozanyatii.get('B')
                            if acts:
                                acts_text = f"–ê–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–µ\n"
                                state_contract_text = f"<s>–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –®—Ç–∞—Ç/–ö–æ–Ω—Ç—Ä–∞–∫—Ç : {rate_sng_contract} RUB</s>"
                            else:
                                acts_text = '–ê–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ\n'
                                state_contract_text = f"–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –®—Ç–∞—Ç/–ö–æ–Ω—Ç—Ä–∞–∫—Ç : {rate_sng_contract} RUB"
                            if short_project or long_payment:
                                state_contract_text = f"<s>{state_contract_text}</s>"
                            
                            if only_fulltime:
                                ip_samoz_text = f"<s>–ò–ü : {rate_sng_ip} RUB,\n –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π : {rate_sng_samozanyatii} RUB</s>"
                            else:
                                ip_samoz_text = f"–ò–ü : {rate_sng_ip} RUB,\n –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π : {rate_sng_samozanyatii} RUB"
                                    
                            text_cleaned = f"üÜî{vac_id}\n\n{message_date}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ:\n\n{state_contract_text}\n{delay_payment_text} {acts_text}\n{ip_samoz_text}\n\n{text}"
                        else:
                            text_cleaned = f"üÜî{vac_id}\n\n{message_date}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{no_rate_delay}\n\n{text}"
                    formatted_text = await format_vacancy_gemini(text_cleaned, vac_id, message_date)
                        
                    if utochnenie == 'True' or utochnenie is True:
                        await bot.send_message(ADMIN_ID, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è")
                        await bot.send_message(ADMIN_ID, formatted_text)
                        continue
                    try:                 
                        mess = await bot.send_message(chat_id=dst_chat, text='.', message_thread_id=dst_topic_id)
                        vacancy_id , cleaned_text = extract_vacancy_id_and_text(formatted_text)
                        url = f"https://t.me/omega_vacancy_bot?start={mess.message_id}"
                        ms_text = f"<a href='{url}'>{vacancy_id}</a>\n{cleaned_text}"
                        forwarded_msg = await bot.edit_message_text(
                            chat_id=dst_chat,
                            message_id=mess.message_id,
                            text=ms_text,
                            parse_mode='HTML',
                        )
            
                    except Exception as e:
                        await bot.send_message(ADMIN_ID, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}: {e}')
                        continue
                    await send_mess_to_group(GROUP_ID, formatted_text, vac_id, bot)
                    
                                
                    async with AsyncSessionLocal() as session:
                        await add_message_mapping(
                            session,
                            src_chat_id=src_chat,
                            src_msg_id=msg.id,
                            dst_chat_id=dst_chat,
                            dst_msg_id=forwarded_msg.id,
                            deadline_date=deadline_date,
                            deadline_time=deadline_time
                        )
                                
                
                except Exception as e:
                    await bot.send_message(ADMIN_ID, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}: {e}')
                    continue
            
        except Exception as e:
            await bot.send_message(ADMIN_ID, f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ {src_topic_id} –≤ —á–∞—Ç–µ {src_chat}: {e}")
    




async def register_topic_listener(telethon_client, TOPIC_MAP, AsyncSessionLocal, bot : Bot):
    print('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ')

    # –ë–µ—Ä—ë–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –∏–∑ TOPIC_MAP –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    chats_to_watch = list({chat_id for chat_id, _ in TOPIC_MAP.keys()})

    @telethon_client.on(events.NewMessage(chats=chats_to_watch))
    async def new_topic_message(event):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–æ–ø–∏–∫–∞
        if not hasattr(event.message, 'reply_to') or not event.message.reply_to:
            return  # –ù–µ —Ç–æ–ø–∏–∫-—Å–æ–æ–±—â–µ–Ω–∏–µ
        
        src_topic_id = event.message.reply_to.reply_to_msg_id
        
        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞
        key = (event.chat_id, src_topic_id)
        if key not in TOPIC_MAP:
            return  # –≠—Ç–æ—Ç —Ç–æ–ø–∏–∫ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º

        dst_chat_id, dst_topic_id = TOPIC_MAP[key]

        text = getattr(event.message, 'message', '') or ""
        if not text:
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã

        if has_strikethrough(event.message):
            await bot.send_message(ADMIN_ID, f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {event.message.id} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        if check_project_duration(text):
            await bot.send_message(ADMIN_ID, f'‚ùå –ú–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}')
            return

        try:
            text_gpt = await process_vacancy_with_gemini(text)
        except Exception as e:
            await bot.send_message(ADMIN_ID, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}: {e}')
            return
        
        reason = text_gpt.get("reason")
        if reason:
            await bot.send_message(ADMIN_ID, f'‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞ –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}: {reason}')
            return
        
        if text_gpt is None or text_gpt == 'None':
            return

        try:
            text = text_gpt.get("text")
            if text == None or text == 'None':
                await bot.send_message(ADMIN_ID, f'‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞ –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}')
                return
            vac_id = text_gpt.get('vacancy_id')
            rate = text_gpt.get("rate")
            vacancy = text_gpt.get('vacancy_title')
            if vacancy is None or vacancy == 'None':
                await bot.send_message(ADMIN_ID, f'‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}')
                return
            if vac_id is None or vac_id == 'None':
                await bot.send_message(ADMIN_ID, f'‚ùå –ù–µ—Ç –∞–π–¥–∏ –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}')
                return

            deadline_date = text_gpt.get("deadline_date")
            deadline_time = text_gpt.get("deadline_time")
            utochnenie = text_gpt.get("utochnenie")
            delay_payment = text_gpt.get("delay_payment")
            acts = text_gpt.get("acts")
            only_fulltime = text_gpt.get("only_fulltime")
            short_project = text_gpt.get("short_project")
            long_payment = text_gpt.get("long_payment")
            message_date = f"–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {get_message_datetime(event.message)}"
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏
            if rate is None or rate == 'None' or int(rate) == 0:
                text_cleaned = f"üÜî{vac_id}\n\n{message_date}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}\n\n{message_date}"
            if delay_payment:
                delay_payment_text = f"–° –æ—Ç—Å—Ä–æ—á–∫–æ–π –ø–ª–∞—Ç–µ–∂–∞ {delay_payment}–ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ç–∞:\n"
                no_rate_delay = f'–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {delay_payment}'
            else:
                delay_payment_text = '–° –æ—Ç—Å—Ä–æ—á–∫–æ–π –ø–ª–∞—Ç–µ–∂–∞ "–°—Ä–æ–∫ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è" –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ç–∞:\n'
                no_rate_delay = '–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: –°—Ä–æ–∫ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è'
        
        
        
        
        # –ë–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏
            if rate is None or int(rate) == 0:
                text_cleaned = f"üÜî{vac_id}\n\n{message_date}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{no_rate_delay}\n\n{text}"
            else:
                rate = float(rate)
                rate_sng_contract = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (—à—Ç–∞—Ç/–∫–æ–Ω—Ç—Ä–∞–∫—Ç) –°–ù–ì')
                rate_sng_ip = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (–ò–ü) –°–ù–ì')
                rate_sng_samozanyatii = search_and_extract_values('M', rate, ['B'], '–†–∞—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π) –°–ù–ì')
                if rate_sng_contract and rate_sng_ip and rate_sng_samozanyatii:
                    rate_sng_contract = rate_sng_contract.get('B')
                    rate_sng_ip = rate_sng_ip.get('B')
                    rate_sng_samozanyatii = rate_sng_samozanyatii.get('B')
                    if acts:
                        acts_text = f"–ê–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ–µ"
                        state_contract_text = f"<s>- –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –®—Ç–∞—Ç/–ö–æ–Ω—Ç—Ä–∞–∫—Ç : {rate_sng_contract} RUB</s>\n"
                    else:
                        acts_text = '–ê–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ'
                        state_contract_text = f"- –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –®—Ç–∞—Ç/–ö–æ–Ω—Ç—Ä–∞–∫—Ç : {rate_sng_contract} RUB\n"
                        
                    if short_project or long_payment:
                        state_contract_text = f"<s>{state_contract_text}</s>"
                    
                    if only_fulltime:
                        ip_samoz_text = f"<s>–ò–ü : {rate_sng_ip} RUB,\n –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π : {rate_sng_samozanyatii} RUB</s>\n"
                    else:
                        ip_samoz_text = f"–ò–ü : {rate_sng_ip} RUB,\n –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π : {rate_sng_samozanyatii} RUB"
                            
                    text_cleaned = f"üÜî{vac_id}\n\n{message_date}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ:\n\n{state_contract_text}\n{delay_payment_text} {acts_text}\n{ip_samoz_text}\n\n{text}"
                else:
                    text_cleaned = f"üÜî{vac_id}\n\n{message_date}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{no_rate_delay}\n\n{text}"
            print(text_cleaned[:200])
            formatted_text = await format_vacancy_gemini(text_cleaned, vac_id, message_date)   
        except Exception as e:
            await bot.send_message(ADMIN_ID, f'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}: {e}')
            return

        try:
            if utochnenie == 'True' or utochnenie is True:
                await bot.send_message(ADMIN_ID, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è")
                await bot.send_message(ADMIN_ID, formatted_text)
                return  # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É —É—Ç–æ—á–Ω–µ–Ω–∏–π, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        except Exception as e:
            await bot.send_message(ADMIN_ID, f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É —É—Ç–æ—á–Ω–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}: {e}')
            return

        try:
            mess = await bot.send_message(chat_id=dst_chat_id, text='.', message_thread_id=dst_topic_id)
            vacancy_id , cleaned_text = extract_vacancy_id_and_text(formatted_text)
            url = f"https://t.me/omega_vacancy_bot?start={mess.message_id}"
            ms_text = f"<a href='{url}'>{vacancy_id}</a>\n{cleaned_text}"
            forwarded_msg = await bot.edit_message_text(
                chat_id=dst_chat_id,
                message_id=mess.message_id,
                text=ms_text,
                parse_mode='HTML',
            )
            
            await send_mess_to_group(GROUP_ID, formatted_text, vac_id, bot)
        except Exception as e:
            await bot.send_message(ADMIN_ID, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}: {e}')
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        async with AsyncSessionLocal() as session:
            await add_message_mapping(
                session,
                src_chat_id=event.chat_id,
                src_msg_id=event.message.id,
                dst_chat_id=dst_chat_id,
                dst_msg_id=forwarded_msg.message_id,
                deadline_date=deadline_date,
                deadline_time=deadline_time
            )
            await bot.send_message(ADMIN_ID, f'‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª –≤ —Ç–æ–ø–∏–∫–µ {src_topic_id} –≤ —á–∞—Ç–µ {event.chat_id}')

