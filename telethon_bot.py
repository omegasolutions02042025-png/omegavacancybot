
import asyncio
from datetime import datetime, timedelta, timezone
import json
import math
import re
import random
from telethon import TelegramClient, events
from telethon.tl.types import Channel, Chat, User
from db import get_all_channels, add_message_mapping, remove_message_mapping, get_all_message_mappings, get_next_sequence_number
from gpt import del_contacts_gpt, process_vacancy
from googlesheets import find_rate_in_sheet_gspread
from typing import Tuple, Optional
from funcs import is_russia_only_citizenship, oplata_filter, check_project_duration
from telethon.errors import FloodWaitError

import teleton_client
import os

VACANCY_ID_REGEX = re.compile(r"üÜî\s*([A-Z]{2}-\d+|\d+)", re.UNICODE)
GROUP_ID = os.getenv('GROUP_ID')

#
#
# --- Telethon —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def forward_recent_posts(telethon_client, CHANNELS, GROUP_ID, AsyncSessionLocal):
    # aware-–¥–∞—Ç–∞ –≤ UTC
    cutoff_date = datetime.now(timezone.utc) - timedelta(days=14)

    entity = await telethon_client.get_entity(int(GROUP_ID))

    for source in CHANNELS:
        async for message in telethon_client.iter_messages(source):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–µ 2 –Ω–µ–¥–µ–ª—å ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é
            if message.date < cutoff_date:
                break

            try:
                text_orig = message.message or ""
                if not text_orig:
                    continue
                
                if is_russia_only_citizenship(text):
                    print('–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç')
                    continue

                if has_strikethrough(message):
                    print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ –∫–∞–Ω–∞–ª–µ {entity} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                if oplata_filter(text):
                    print('–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç')
                    continue
                if check_project_duration(text):
                    print('–ú–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞')
                    asyncio.sleep(3)
                    continue
                try:
                    text_gpt = await process_vacancy(text)
                    #print(text)
                except Exception as e:
                    print(e)
                    continue
                if text_gpt == None:
                    continue
                else:


                    try:
                        text = text_gpt.get("text")
                        if text == None:
                           print('–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞')
                           continue            
                        vac_id = text_gpt.get('vacancy_id')
                        print(vac_id)
                        rate = text_gpt.get("rate")
                        vacancy = text_gpt.get('vacancy_title')
                        if vacancy is None:
                            continue
                                    
                        deadline_date = text_gpt.get("deadline_date")  # "DD.MM.YYYY"
                        deadline_time = text_gpt.get("deadline_time") 
                                    
                                    

                        if rate == None:
                                        
                            text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}"
                                        

                        if int(rate) == 0:
                            text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}"
                        else:
                            rate = int(rate)
                            rate = round(rate /5) * 5
                            print(rate)
                            if rate == None:
                                return
                            else:
                                rate = find_rate_in_sheet_gspread(rate)
                                rate = re.sub(r'\s+', '', rate)
                                rounded = math.ceil(int(rate) / 100) * 100  

                                rate = f"{rounded:,}".replace(",", " ")
                                print(rate)

                                if rate is None or vacancy is None:
                                    return
                                else:
                                                
                                    text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: {rate} RUB\n\n{text}"
                                    
                    except Exception as e:
                            print(e)
                            continue

                forwarded_msg = await telethon_client.send_message(entity, text_cleaned)
                print(f"–ü–µ—Ä–µ—Å–ª–∞–ª –∏–∑ {source}: {message.id}")
                async with AsyncSessionLocal() as session:
                    await add_message_mapping(
                        session,
                        src_chat_id=source,
                        src_msg_id=message.id,
                        dst_chat_id=entity,
                        dst_msg_id=forwarded_msg.id,
                        deadline_date=deadline_date,
                        deadline_time=deadline_time
                    )
                await asyncio.sleep(0.5)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∏–∑ {source}: {e}")



async def forward_messages_from_topics(telethon_client, TOPIC_MAP, AsyncSessionLocal, days=14):
    cutoff_date = datetime.now(timezone.utc) - timedelta(days=days)
    print(f"[i] –ë–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å {cutoff_date}")

    for (src_chat, src_topic_id), (dst_chat, dst_topic_id) in TOPIC_MAP.items():
        print(f"[i] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø–∏–∫ {src_topic_id} –≤ —á–∞—Ç–µ {src_chat}")
        try:
            async for msg in telethon_client.iter_messages(
                src_chat,
                reply_to=src_topic_id,
                reverse=False,
            ):
                if msg.date < cutoff_date:
                    print(msg.date)
                    await asyncio.sleep(5)
                    break
                
                text = msg.text
                if not text:
                    continue
                if is_russia_only_citizenship(text):
                    print('–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç')
                    continue
                
                if oplata_filter(text):
                    print('–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç')
                    continue
                
                if check_project_duration(text):
                    print('–ú–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞')
                    
                    continue

                if has_strikethrough(msg):
                    print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {msg.id} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                try:
                    text_gpt = await process_vacancy(text)
                except Exception as e:
                    print(e)
                    continue

                if text_gpt == None or text_gpt == 'None':
                    continue

                try:
                    text = text_gpt.get("text")
                    if text is None:
                       print('–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞')
                       continue
                    
                    vac_id = text_gpt.get('vacancy_id')
                    print(vac_id)
                    print(type(vac_id))
                    rate = text_gpt.get("rate")
                    vacancy = text_gpt.get('vacancy_title')
                    deadline_date = text_gpt.get("deadline_date")
                    deadline_time = text_gpt.get("deadline_time")
                    utochnenie = text_gpt.get("utochnenie")
                    if vacancy is None or vacancy == 'None':
                        print('–Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏')
                        continue
                     

                    # –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ—Ç ID
                    if vac_id is None  or vac_id == 'None':
                        print('–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞, –Ω–µ—Ç ID')
                        continue

                    # –ë–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏
                    if rate is None or int(rate) == 0:
                        text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}"
                    else:
                        rate = int(rate)
                        rate = round(rate / 5) * 5
                        print(rate)
                        
                        rate = find_rate_in_sheet_gspread(rate)
                        rate = re.sub(r'\s+', '', rate)
                        rounded = math.ceil(int(rate) / 100) * 100 
                        rate = f"{rounded:,}".replace(",", " ")
                        print(rate)

                        if rate is None or rate == 'None' or vacancy is None or vacancy == 'None':
                            print('–Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏')
                            continue
                        
                        text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: {rate} RUB\n\n{text}"
                                
                    if utochnenie == 'True' or utochnenie is True:
                        await telethon_client.send_message(
                            GROUP_ID,
                            text_cleaned,
                        )
                        continue
                        
                    forwarded_msg = await telethon_client.send_message(
                        dst_chat,
                        text_cleaned,
                        file=msg.media,
                        reply_to=dst_topic_id
                    )
                    
                    async with AsyncSessionLocal() as session:
                        await add_message_mapping(
                            session,
                            src_chat_id=src_chat,
                            src_msg_id=msg.id,
                            dst_chat_id=dst_chat,
                            dst_msg_id=forwarded_msg.id,
                            deadline_date=deadline_date,
                            deadline_time=deadline_time
                        )
                    
                    await asyncio.sleep(0.5)
            
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}')
                    continue
            
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ {src_topic_id} –≤ —á–∞—Ç–µ {src_chat}: {e}")


def has_strikethrough(message):
    if not message.entities:
        return False
    for entity in message.entities:
        if entity.__class__.__name__ == 'MessageEntityStrike':
            print(f"üîç –ù–∞–π–¥–µ–Ω –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id}")
            return True
    return False

async def register_handler(telethon_client, CHANNELS, GROUP_ID, AsyncSessionLocal):
    @telethon_client.on(events.NewMessage(chats=CHANNELS))
    async def new_channel_message_handler(event):
        text_orig = event.message.message or ""
        if not text_orig:
            return

        if is_russia_only_citizenship(text):
                    print('–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç')
                    return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—á—ë—Ä–∫–Ω—É—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if has_strikethrough(event.message):
            print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {event.message.id} –≤ –∫–∞–Ω–∞–ª–µ {event.chat_id} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        if oplata_filter(text):
                    print('–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç')
                    return
        entity = await telethon_client.get_entity(int(GROUP_ID))
        
        try:
            text_gpt = await process_vacancy(text)
        except Exception as e:
            print(e)
            return
        if text_gpt == None:
            return
        else:
            try:
                        
                        
                        #text_gpt = json.loads(text_gpt)
                        text = text_gpt.get("text")
                        if text == None:
                           print('–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞')
                           return
                        vac_id = text_gpt.get('vacancy_id')
                        print(vac_id)
                        rate = text_gpt.get("rate")
                        vacancy = text_gpt.get('vacancy_title')
                        
                        deadline_date = text_gpt.get("deadline_date")  # "DD.MM.YYYY"
                        deadline_time = text_gpt.get("deadline_time") 
                        
                         

                        if rate == None:
                            
                            text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}"
                            

                        if int(rate) == 0:
                           text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}"
                        else:
                            rate = int(rate)
                            rate = round(rate /5) * 5
                            print(rate)
                            if rate == None:
                                return
                            else:
                                rate = find_rate_in_sheet_gspread(rate)
                                rate = re.sub(r'\s+', '', rate)
                                rounded = math.ceil(int(rate) / 100) * 100  

                                rate = f"{rounded:,}".replace(",", " ")
                                print(rate)

                            if rate is None or vacancy is None:
                                return
                            else:
                                    
                                text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: {rate} RUB\n\n{text}"

            except Exception as e:
                print(e)
                return
        try:
            forwarded_msg = await telethon_client.send_message(entity=entity, message=text_cleaned, parse_mode='html')
        except Exception:
            forwarded_msg = await telethon_client.send_message(entity=entity, message=text_cleaned)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        async with AsyncSessionLocal() as session:
            await add_message_mapping(
                session,
                src_chat_id=event.chat_id,
                src_msg_id=event.message.id,
                dst_chat_id=int(GROUP_ID),
                dst_msg_id=forwarded_msg.id,
                deadline_date=deadline_date,
                deadline_time=deadline_time
            )

        print("‚ùå –ù–∏ –æ–¥–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    return new_channel_message_handler

async def list_all_dialogs(telethon_client, PHONE_NUMBER):
    await telethon_client.start(phone=PHONE_NUMBER)

    async for dialog in telethon_client.iter_dialogs():
        entity = dialog.entity

        if isinstance(entity, Channel):
            kind = '–ö–∞–Ω–∞–ª'
        elif isinstance(entity, Chat):
            kind = '–ì—Ä—É–ø–ø–∞'
        elif isinstance(entity, User):
            kind = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        else:
            kind = '–î—Ä—É–≥–æ–µ'

        print(f"{kind}: {dialog.name} ‚Äî ID: {entity.id}")

from datetime import datetime, timezone



async def monitor_and_cleanup(telethon_client, AsyncSessionLocal):
    while True:
        async with AsyncSessionLocal() as session:
            mappings = await get_all_message_mappings(session)

            for mapping in mappings:
                try:
                    msg = await telethon_client.get_messages(mapping.src_chat_id, ids=mapping.src_msg_id)
                    
                    
                    if mapping.src_msg_id == 5456 or mapping.src_msg_id == '5456':
                       print(msg.text)
                    vacancy_id = None
                    if msg.message:
                        match = VACANCY_ID_REGEX.search(msg.message)
                        if match:
                            vacancy_id = match.group(0)

                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –∑–∞—á—ë—Ä–∫–Ω—É—Ç–æ
                    if has_strikethrough(msg):
                        print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {mapping.src_msg_id} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ‚Äî —É–¥–∞–ª—è–µ–º")
                        await mark_inactive_and_schedule_delete(
                            telethon_client, mapping, vacancy_id
                        )
                        await remove_message_mapping(session, mapping.src_chat_id, mapping.src_msg_id)
                        continue
                    stop_pattern = re.compile(r'(üõë.*–°–¢–û–ü.*üõë|(?:\b—Å—Ç–æ–ø\b))', re.IGNORECASE)
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–æ "—Å—Ç–æ–ø"
                    if msg.message and stop_pattern.search(msg.message):
                        print(f"üõë –°–æ–æ–±—â–µ–Ω–∏–µ {mapping.src_msg_id} —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ '—Å—Ç–æ–ø' ‚Äî —É–¥–∞–ª—è–µ–º")
                        await mark_inactive_and_schedule_delete(
                            telethon_client, mapping, vacancy_id
                        )
                        await remove_message_mapping(session, mapping.src_chat_id, mapping.src_msg_id)
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞
                    if mapping.deadline_date:
                        try:
                            date_str = mapping.deadline_date.strip() if mapping.deadline_date else None
                            time_str = mapping.deadline_time.strip() if mapping.deadline_time else "23:59"

                            if not date_str or date_str.lower() == "none":
                                continue  # –¥–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                            parts = date_str.split(".")
                            if len(parts) != 3:
                                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")

                            day, month, year = parts
                            day = day.zfill(2)
                            month = month.zfill(2)

                            deadline_dt = datetime.strptime(f"{day}.{month}.{year} {time_str}", "%d.%m.%Y %H:%M")

                            print(f"üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è {mapping.src_msg_id} "
                                  f"({mapping.src_chat_id}): {deadline_dt}")

                            now_utc = datetime.now(timezone.utc)
                            if deadline_dt.replace(tzinfo=timezone.utc) <= now_utc:
                                print(f"‚è∞ –î–µ–¥–ª–∞–π–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {mapping.src_msg_id} –∏—Å—Ç—ë–∫ ‚Äî —É–¥–∞–ª—è–µ–º")
                                await mark_inactive_and_schedule_delete(
                                    telethon_client, mapping, vacancy_id
                                )
                                await remove_message_mapping(session, mapping.src_chat_id, mapping.src_msg_id)
                                continue

                        except Exception as e:
                            print(f"‚ö† –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è {mapping.src_msg_id} "
                                  f"–≤ {mapping.src_chat_id}: {e}")

                except FloodWaitError as e:
                    print(f"‚ö† Flood control: –∂–¥—ë–º {e.seconds} —Å–µ–∫.")
                    await asyncio.sleep(e.seconds)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {mapping.src_msg_id} –≤ {mapping.src_chat_id}: {e}")

        await asyncio.sleep(60)


async def mark_inactive_and_schedule_delete(client, mapping, vacancy_id):
    try:
        msg = await client.get_messages(mapping.dst_chat_id, ids=mapping.dst_msg_id)
        if not msg:
            return

        
        if vacancy_id:
            new_text = f"\n\n{vacancy_id} ‚Äî –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
        else:
            new_text = "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"

        await client.edit_message(mapping.dst_chat_id, mapping.dst_msg_id, new_text)

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º
        await client.pin_message(mapping.dst_chat_id, mapping.dst_msg_id, notify=False)
        print(f"üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {mapping.dst_msg_id} –≤ {mapping.dst_chat_id}")

        # –ñ–¥—ë–º 24 —á–∞—Å–∞
        await asyncio.sleep(24 * 60 * 60)

        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º
        await client.unpin_message(mapping.dst_chat_id, mapping.dst_msg_id)
        await client.delete_messages(mapping.dst_chat_id, mapping.dst_msg_id)
        print(f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {mapping.dst_msg_id} –≤ {mapping.dst_chat_id}")

    except FloodWaitError as e:
        print(f"‚ö† Flood control: –∂–¥—ë–º {e.seconds} —Å–µ–∫.")
        await asyncio.sleep(e.seconds)
        await mark_inactive_and_schedule_delete(client, mapping, vacancy_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ {mapping.dst_msg_id}: {e}")
  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É



async def generate_bd_id() -> str:
    sequence_num = await get_next_sequence_number()
    seq_str = str(sequence_num).zfill(4)
    return f"{seq_str}"

def remove_request_id(text: str) -> Tuple[str, Optional[str]]:
    """
    –£–¥–∞–ª—è–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏ –≤–∏–¥–∞:
    üÜî XX-1234 –∏–ª–∏ üÜî 1234
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        - 4-–∑–Ω–∞—á–Ω—ã–π ID –∫–∞–∫ —Å—Ç—Ä–æ–∫—É (–∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω)
    """
    match = re.search(r'üÜî(?:[A-Z]{2}-)?(\d{4})', text)
    vacancy_id = match.group(1) if match else None
    cleaned_text = re.sub(r'üÜî(?:[A-Z]{2}-)?\d{4}', '', text).strip()
    return cleaned_text, vacancy_id


async def register_topic_listener(telethon_client, TOPIC_MAP, AsyncSessionLocal):
    print('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ')

    # –ë–µ—Ä—ë–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –∏–∑ TOPIC_MAP –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    chats_to_watch = list({chat_id for chat_id, _ in TOPIC_MAP.keys()})

    @telethon_client.on(events.NewMessage(chats=chats_to_watch))
    async def new_topic_message(event):
        # –ù–∞ —Å—Ç–∞—Ä–æ–º Telethon —Ç–æ–ø–∏–∫–∏ –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è
        # –ò—â–µ–º –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        key_candidates = [k for k in TOPIC_MAP if k[0] == event.chat_id]
        if not key_candidates:
            return  # –ß–∞—Ç –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º

        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–ª–∏ –ª—é–±–æ–π)
        key = key_candidates[0]
        dst_chat_id, dst_topic_id = TOPIC_MAP[key]

        text = getattr(event.message, 'message', '') or ""
        if not text:
            return

        if is_russia_only_citizenship(text):
            print('–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç')
            return

        if has_strikethrough(event.message):
            print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {event.message.id} –≤ –∫–∞–Ω–∞–ª–µ {event.chat_id} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        if oplata_filter(text):
            print('–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç')
            return
        if check_project_duration(text):
            print('–ú–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞')
            asyncio.sleep(3)
            return
        try:
            text_gpt = await process_vacancy(text)
        except Exception as e:
            print(e)
            return

        if text_gpt is None or text_gpt == 'None':
            return

        try:
            text = text_gpt.get("text")
            if text == None or text == 'None':
                print('–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç—Å–µ—è–Ω–∞')
                return
            vac_id = text_gpt.get('vacancy_id')
            print(vac_id)
            rate = text_gpt.get("rate")
            vacancy = text_gpt.get('vacancy_title')
            if vacancy is None or vacancy == 'None':
                print('–Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏')
                return
            if vac_id is None or vac_id  == 'None':
                print('–Ω–µ—Ç –∞–π–¥–∏')
                return

            deadline_date = text_gpt.get("deadline_date")
            deadline_time = text_gpt.get("deadline_time")
            utochnenie = text_gpt.get("utochnenie")
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            if not rate or int(rate) == 0:
                text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: —Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é)\n\n{text}"
            else:
                rate = int(rate)
                rate = round(rate / 5) * 5
                rate = find_rate_in_sheet_gspread(rate)
                if rate is None or vacancy is None:
                    return
                rate = re.sub(r'\s+', '', rate)
                rounded = math.ceil(int(rate) / 100) * 100
                rate = f"{rounded:,}".replace(",", " ")
                text_cleaned = f"üÜî{vac_id}\n\n{vacancy}\n\n–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞(–Ω–∞ —Ä—É–∫–∏) –¥–æ: {rate} RUB\n\n{text}"

        except Exception as e:
            print(e)
            return
        try:
            if utochnenie:
                await telethon_client.send_message(
                    GROUP_ID,
                    message=text_cleaned,
                )
        except Exception as e:
            print(e)
            return
        try:
            forwarded_msg = await telethon_client.send_message(
                dst_chat_id,
                message=text_cleaned,
                parse_mode='html'
            )
        except Exception:
            forwarded_msg = await telethon_client.send_message(
                dst_chat_id,
                message=text_cleaned
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        async with AsyncSessionLocal() as session:
            await add_message_mapping(
                session,
                src_chat_id=event.chat_id,
                src_msg_id=event.message.id,
                dst_chat_id=dst_chat_id,
                dst_msg_id=forwarded_msg.id,
                deadline_date=deadline_date,
                deadline_time=deadline_time
            )

async def check_and_delete_duplicates(teleton_client, channel_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID –≤ —Ç–µ–∫—Å—Ç–µ"""
    seen_ids = set()
    while True:
        try:
            async for message in teleton_client.iter_messages(channel_id):
                if not message.message:
                    continue
                
                match = VACANCY_ID_REGEX.search(message.message)
                if match:
                    vacancy_id = match.group(0)
                else:
                    continue

                if vacancy_id in seen_ids:
                    print(f"‚ùå –î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω: {vacancy_id}, —É–¥–∞–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}")
                    await message.delete()
                else:
                    seen_ids.add(vacancy_id)
        except Exception as e:
            print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ', e)
        # –æ—á–∏—â–∞–µ–º —Å–µ—Ç –≤ –∫–æ–Ω—Ü–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏
        seen_ids.clear()
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, set –æ—á–∏—â–µ–Ω")
        await asyncio.sleep(60)
