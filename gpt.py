#!/usr/bin/env python3

from __future__ import annotations

import ast
import os
import json
import datetime

from yandex_cloud_ml_sdk import YCloudML
from dotenv import load_dotenv

load_dotenv()

AUTH_TOKEN = os.getenv('AUTH_TOKEN')
FOLDER_ID = os.getenv('FOLDER_ID')

sdk = YCloudML(
    folder_id=FOLDER_ID,
    auth=AUTH_TOKEN,
)

async def check_duration_and_deadline_gpt(text):
    """
    Проверяет текст вакансии и возвращает 'ДА', если ее нужно отсечь по продолжительности
    или дедлайну, и 'НЕТ' в противном случае.
    """
    current_date = datetime.date.today().strftime("%d.%m.%Y")
    messages = [
        {
            "role": "system",
            "text": f"""
            Проверь текст вакансии и определи, нужно ли отсечь её. Работай строго по правилам ниже.
            Используй логику ИЛИ (OR) между правилами.

            Правило 1 (Продолжительность): Отсечь, если продолжительность проекта не равна или более 4 месяцам. Если указано более 3 месяцев, то в рамках этого промта будем считать, что это менее 4-х месяцев.
            Примеры для отсева: "Продолжительность проекта (от 3х месяцев): 3 месяца", "Продолжительность проекта (от 3х месяцев): 1 месяц с возможностью продления", "Продолжительность проекта (от 3х месяцев): 2 месяца с возможностью продления", "Продолжительность проекта (от 3х месяцев):1 мес", "Продолжительность проекта (от 3х месяцев):3 мес", "Продолжительность проекта (от 3х месяцев):от 3 мес", "Продолжительность проекта (от 3х месяцев): от 3х месяцев", "3+ мес" и т.п.
            Примеры для пропуска: "Продолжительность проекта (от 3х месяцев):4 мес", "Продолжительность проекта (от 3х месяцев): от 6 мес", "Продолжительность проекта (от 3х месяцев):6+ мес" и т.п.

            Правило 2 (Дедлайн): Отсечь, если дедлайн в прошлом или сегодня. Сегодняшняя дата: {current_date}.

            Если нужно отсечь хотя бы по одному из правил, верни слово "ДА". Если не нужно отсечь, верни слово "НЕТ". Не добавляй никаких других слов и знаков.
            """
        },
        {
            "role": "user",
            "text": text,
        },
    ]

    try:
        result = (sdk.models.completions("yandexgpt").configure(temperature=0.1).run_deferred(messages, timeout=60)).wait()
        return result.alternatives[0].text.strip()
    except Exception as e:
        print(f"Ошибка при проверке: {e}")
        return "НЕТ"

async def del_contacts_gpt(text):
    """
    Основная функция обработки текста вакансии.
    Выполняет очистку, извлечение данных и форматирование.
    """
    messages = [
        {
            "role": "system",
            "text": """
Ты — фильтр вакансий. На вход приходит ТЕКСТ ВАКАНСИИ. Работай строго по правилам ниже.
При противоречиях выбирай ОТСЕЧЬ. Логика между разделами — И (AND).
Сегодня: {current_date} {current_time} ({current_tz}).

ПРИОРИТЕТ:
- Если обнаружено хоть одно запрещающее условие — вакансия ОТСЕКАЕТСЯ (text=None и остальные поля=None),
  даже если присутствуют разрешающие формулировки в других местах текста.

НОРМАЛИЗАЦИИ:
- РБ ≡ Беларусь ≡ Belarus ≡ BY; РФ ≡ Россия ≡ Russian Federation ≡ Russia ≡ RU.
- Города РБ: Минск, Брест, Витебск, Гомель, Гродно, Могилёв (любые падежи).
- Ограничители РФ (локация): «только РФ», «из РФ», «на территории РФ», «жители РФ»,
  «работа из любой точки РФ», «любой регион РФ», «лок: РФ», «оформление в РФ», «нахождение в РФ обязательно».
- Ограничители гражданства РФ: «только гражданство РФ», «паспорт РФ обязателен»,
  «налоговое резидентство РФ обязательно», «только граждане РФ», «только россияне».
- «Дружественные страны» / friendly countries / CIS/СНГ / EAEU/ЕАЭС — СЧИТАЙ, что включают Беларусь (РБ).
- Отсутствие ограничений: «любой/любая/any», «без разницы», «всё равно», «не имеет значения»,
  «no restriction», «remote/удалённо», «любой регион/страна», а также ПОЛНОЕ ОТСУТСТВИЕ упоминаний
  локации/гражданства — трактуй как допускающие Беларусь, если нет РФ-ограничителей.
  Исключение: конструкции, привязанные к РФ («любой регион РФ») — это ограничители РФ.
- Перечисления стран (разделители «/», «,», «и», «or»), напр. «РБ/РФ», «РБ и РФ», «РФ, РБ» —
  трактуй как ДОПУСК обоих, это НЕ ограничитель РФ.
- Тайм-зоны: МСК/MSK = UTC+3. Если TZ не указана, используй {current_tz}.

БЛОК A. СРОКИ ПРОЕКТА (ПРОДОЛЖИТЕЛЬНОСТЬ И ДЕДЛАЙН)
A1. ПРОДОЛЖИТЕЛЬНОСТЬ (< 4 месяцев → ОТСЕЧЬ):
  A1.1. ОТСЕЧЬ, если явно < 4 мес: 1/2/3 мес; 1 квартал («квартал» ≈ ~3 мес); «на лето»; short-term; temporary.
  A1.2. ОТСЕЧЬ, если нижняя граница < 4 мес ИЛИ формулировка допускает < 4:
        «от 3 мес», «от 3-х мес», «от 3х месяцев», варианты с плюсом в любом месте
        («от 3 мес+», «от 3 месяцев +», «от 3х месяцев+»), «3+ мес», «3–6 мес», «более 3 мес»,
        «до 4 мес», «≈3–4 мес» и т.п. (Если есть шанс < 4 — считай < 4 и ОТСЕЧЬ.)
  A1.3. НЕ отсекать, если гарантировано ≥ 4 мес: «4 мес», «от 4 мес», «4–6 мес», «≥ 4 мес», «6+ мес»,
        «полгода», «2 квартала», «12 мес», «год», «long-term».
  A1.4. Если длительность НЕ указана — правило A1 не применяется.
  A1.5. ШАПКА БЕЗ ЗНАЧЕНИЯ — НЕ ОТСЕКАТЬ:
        если есть только заголовок/лейбл длительности (строка оканчивается «:»)
        и после него НЕТ значения ни в этой строке, ни в непосредственной следующей строке,
        A1 не применяется. Примеры: «Продолжительность проекта (от 3х месяцев):», «Длительность:».
  A1.6. Нормализация: трактуй «3х/3-х/3 x» как «3».

A2. ДЕДЛАЙН (в прошлом или истёк к текущему моменту → ОТСЕЧЬ):
  A2.1. Распознавай даты/время/TZ: DD.MM.YYYY, DD.MM.YY, DD/MM/YYYY, YYYY-MM-DD,
        «30 сентября 2025», «до 30.09», а также «сегодня», «завтра», «до конца дня»,
        EOD/COB/EOW, «до пятницы», «до 18:00 МСК», «до 23:59», «до 15:00 UTC+3».
  A2.2. Если указан часовой пояс (МСК/MSK/UTC±X) — используй его, иначе {current_tz}.
  A2.3. Если год не указан — используй текущий год. Если «до [месяц]» без дня — дедлайн = последний день месяца 23:59 (в соответствующей TZ).
  A2.4. Отсекай, если:
        • дедлайн < текущего момента; ИЛИ
        • дедлайн = сегодня и время НЕ указано; ИЛИ
        • дедлайн = сегодня и указано время ≤ текущего времени.
        (Если дедлайн сегодня и указанное время > текущего времени — НЕ отсекать.)
  A2.5. ШАПКА БЕЗ ЗНАЧЕНИЯ — НЕ ОТСЕКАТЬ:
        если есть только заголовок/лейбл дедлайна (строка оканчивается «:»)
        и нет даты/времени ни в этой строке, ни в непосредственной следующей строке — A2 не применяется.
  A2.6. Если дедлайн не найден — A2 не применяется.

БЛОК B. ОБЩИЕ КРИТЕРИИ (любой пункт → ОТСЕЧЬ):
B1. ЛОКАЦИЯ: «только РФ/Россия» или присутствуют РФ-ограничители (см. НОРМАЛИЗАЦИИ).
B2. ГРАЖДАНСТВО: «только РФ/Россия» или РФ-ограничители гражданства (см. НОРМАЛИЗАЦИИ).
B3. ОПЛАТА/АКТИРОВАНИЕ: отсрочка > 35 рабочих дней ИЛИ > 50 календарных дней,
    ИЛИ встречаются фразы/эквиваленты (в любом регистре/языке):
    «акты поквартально», «квартальное актирование», «поквартальная оплата», «актирование», «ежеквартально»,
    «quarterly invoicing/billing», «net 60», «net 90», «N60», «N90», «deferred payment», «post-payment».
B4. Запрет на подачу: «стоп»/«STOP»/«❌ стоп» и подобные.

БЛОК C. КРИТЕРИИ ПРОХОЖДЕНИЯ (ДОЛЖНЫ быть истинны одновременно; иначе — ОТСЕЧЬ):
C1. ЛОКАЦИЯ: допускается РБ/Беларусь, ИЛИ указаны «дружественные страны»/CIS/СНГ/EAEU/ЕАЭС/friendly countries,
    ИЛИ «удалённо/any/no restriction/любая/без разницы/всё равно/не имеет значения»,
    ИЛИ про локацию НИЧЕГО НЕ СКАЗАНО — и при этом НЕТ РФ-ограничителей.
    Перечисления «РБ/РФ», «РБ и РФ», «РФ, РБ» — проходят (если нет РФ-ограничителей).
C2. ГРАЖДАНСТВО: допускается гражданство РБ, ИЛИ «дружественные страны»/CIS/СНГ/EAEU/ЕАЭС/friendly countries,
    ИЛИ «любое/any/no restriction/без ограничений/без разницы/всё равно/не имеет значения»,
    ИЛИ про гражданство НИЧЕГО НЕ СКАЗАНО — и при этом НЕТ РФ-ограничителей гражданства.

ЕСЛИ ВЫПОЛНИЛОСЬ ХОТЯ БЫ ОДНО УСЛОВИЕ ОТСЕВА из блоков A или B, ИЛИ не выполнены условия C1/C2,
— верни структуру с полями = None (см. «ФОРМАТ ОТВЕТА»).

ОБРАБОТКА ТЕКСТА (выполняй последовательно; применяется ТОЛЬКО если вакансия НЕ отсечена):
A) Полностью УДАЛИ из текста любые упоминания условий оплаты/актирования/сроков оплаты/отсрочек.
B) Унифицируй заключительный блок контакта:
   любые варианты «Вопросы и предложения … @username … Указать 🆔 запроса.»
   ЗАМЕНИ на: «Вопросы и предложения пишите Дмитрию ➡️@Dimitryver. Указать 🆔 запроса.»
   (распознавай произвольные формулировки и любые @имена).
C) УДАЛИ все контакты:
   email (включая обфускации типа «name[at]domain dot com»), телефоны/WhatsApp/Telegram/ссылки
   (http/https, t.me, @username), юзернеймы, короткие ссылки.
D) Если в начале есть заголовок вакансии (например: «🥇 Java разработчик c Camunda»),
   УДАЛИ его из текста и верни в ключ "vacancy_title" (без эмодзи и лишних пробелов).
E) Найди ПЕРВЫЙ идентификатор:
   • «🆔 XX-1234» (XX — латинские заглавные, 1234 — цифры) ИЛИ
   • «🆔 8581» (только цифры).
   УДАЛИ его из текста и верни "vacancy_id" без символа 🆔. Если нет — None.
F) СТАВКА ("rate"): найди числовую ставку/ставку закупки. Если указаны две — для РФ и для не РФ —
   возьми ставку для НЕ РФ. Если единственная — верни её. Верни ТОЛЬКО число (без валют/«от»/«~»/«/»).
   Если ставки нет («смотрим вашу» и т.п.) — верни "rate": 0. Исходные упоминания ставки УДАЛИ.
G) ТРЕБОВАНИЯ: Объедини «Будет плюсом»/«Будет большим плюсом» с ОСНОВНЫМИ требованиями
   («Требования», «Основные требования», «Обязательные требования»), добавив пункты «плюсов»
   в КОНЕЦ основного списка. Сохраняй исходные переносы/форматирование.
H) ДЕДЛАЙН (извлечение значений, не отсев): определи дедлайн (дату/время) по правилам A2.
   Верни "deadline_date" = "DD.MM.YYYY" или None; "deadline_time" = "HH:MM" или None.
I) Сохрани ВСЕ исходные переносы/абзацы и порядок строк, КРОМЕ удалённых частей.

ФОРМАТ ОТВЕТА — СТРОГО СЛОВАРЬ:
{
  "text": "<очищенный текст вакансии>" или None (если отсечена),
  "rate": <целое число или 0> или None,
  "deadline_date": "DD.MM.YYYY" или None,
  "deadline_time": "HH:MM" или None,
  "vacancy_id": "<id или None>",
  "vacancy_title": "<заголовок или None>"
}
Никаких других слов/символов не добавляй.
"""
        },
        {
            "role": "user",
            "text": text,
        },
    ]

    try:
        result = (sdk.models.completions("yandexgpt").configure(temperature=0.1).run_deferred(messages, timeout=180)).wait()
        clean_text = result.alternatives[0].text
        cleaned = clean_text.strip("` ")
        return ast.literal_eval(cleaned)
    except Exception as e:
        print(f"Ошибка при обработке вакансии: {e}")
        return {'text': None, 'rate': None, 'deadline_date': None, 'deadline_time': None, 'vacancy_id': None, 'vacancy_title': None}

async def process_vacancy(text):
    """
    Главная функция, которая координирует проверку и обработку вакансии.
    """
    should_reject = await check_duration_and_deadline_gpt(text)

    if should_reject == 'ДА':
        print("Проект отсеян. Возвращаем None.")
        return {'text': None, 'rate': None, 'deadline_date': None, 'deadline_time': None, 'vacancy_id': None, 'vacancy_title': None}
    else:
        print("Проект подходит. Продолжаем обработку.")
        return await del_contacts_gpt(text)

# Пример использования
# async def main():
#     vacancy_text = """
#     Продолжительность проекта : до 30.12.2025
#     🆔BE-8632

#     Дедлайн приема заявок: до 30.09.2025

#     Java разработчик c Camunda

#     Месячная ставка(на руки) до: 160 000 RUB

#     О кандидате:

#     Грейд: Senior
#     Локация специалиста: любая
#     Тайм-зона проекта: мск
#     Гражданство: любое

#     О проекте:
#     Описание проекта:* Логистическая компания, которая занимается доставкой заказов клиентов в постаматы своей сети.
#     Команда RANDI создает решения, которые оптимизируют работу инцидентов, нотификаций и автоматизируют обращения от наших партнеров и клиентов.
#     Стек технологий: Java 11-21, Spring (Boot, Core, Web, Data, Test), PostgreSQL, Hibernate, Kafka, Camunda BPM, ELK, GitLab CI, Docker/Kubernetes, Mockito.
#     Название конечного клиента или отрасль: 5post
#     Дата старта проекта: ASAP
#     Оформление:
#     Тип занятости: удалёнка
#     Загрузка: фулл-тайм
#     Особые условия:
#     Кандидат должен иметь опыт работы в корпорации, не на стартапе.
#     Работа строго в графике с 9 до 18 по МСК, без гибкого рабочего дня. Это критично❗️
#     - Необходима симка с Российским номером (+7...);
#     - Необходимо подписание NDA по форме клиента;
#     - При отклике на вакансию просьба указывать полностью ФИО кандидата.

#     Вопросы и предложения пишите Дмитрию ➡️@Dimitryver. Указать 🆔 запроса.

#     📝Присылать СV + данные по кандидату:
#     ● ФИО
#     ● Страна + Город
#     ● Грейд
#     ● Ставка
#     ● Оценить требования ДА/НЕТ, в соответствии с наличием опыта.️

#     📌 Задачи:
#     - Разработка, отладка и поддержка микросервисных приложений;
#     - Разработка unit-тестов;
#     - Реализация интеграционного взаимодействия внутри микросервисной архитектуры, а также с внешними сервисами;
#     - Реализация взаимодействия ПО с постаматным оборудованием;
#     - Рефакторинг и оптимизация существующего кода;
#     - Code Review.

#     💻 Требования:**
#     - Необходимо подписание NDA по форме клиента;
#     - Коммерческая разработка на Java от 5+ лет; (можно меньше, если кандидат прям звездочка)
#     - Опыт работы со Spring (Boot, Core, Web, Data, Test);
#     - Опыт с реляционными базами данных PostgreSQL;
#     - Опыт разработки микросервисов (обязательно на последнем месте работы);
#     - Хорошие знания и практический опыт работы с Kafka;
#     - Понимание принципов работы с Docker/Kubernetes;
#     - Опыт с инцидентами, дефектами с прода;
#     - Понимание CI/CD;
#     - Опыт работы с JPA (Hibernate);
#     - Знания и практический опыт с Camunda 7;
#     - Базовое понимание работы с командной строкой Linux. отсюда
#     """
#     result = await process_vacancy(vacancy_text)
#     print(json.dumps(result, indent=2, ensure_ascii=False))

# if __name__ == "__main__":
#     import asyncio
#     asyncio.run(main())
