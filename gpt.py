#!/usr/bin/env python3

from __future__ import annotations

import ast
import os
import json
import datetime

from yandex_cloud_ml_sdk import YCloudML
from dotenv import load_dotenv

load_dotenv()

AUTH_TOKEN = os.getenv('AUTH_TOKEN')
FOLDER_ID = os.getenv('FOLDER_ID')

sdk = YCloudML(
    folder_id=FOLDER_ID,
    auth=AUTH_TOKEN,
)

async def check_duration_and_deadline_gpt(text):
    """
    Проверяет текст вакансии и возвращает 'ДА', если ее нужно отсечь по продолжительности
    или дедлайну, и 'НЕТ' в противном случае.
    """
    current_date = datetime.date.today().strftime("%d.%m.%Y")
    messages = [
        {
            "role": "system",
            "text": f"""
            Проверь текст вакансии и определи, нужно ли отсечь её. Работай строго по правилам ниже.
            Используй логику ИЛИ (OR) между правилами.

            Правило 1 (Продолжительность): Отсечь, если продолжительность проекта не равна или более 4 месяцам. Если указано более 3 месяцев, то в рамках этого промта будем считать, что это менее 4-х месяцев.
            Примеры для отсева: "Продолжительность проекта (от 3х месяцев): 3 месяца", "Продолжительность проекта (от 3х месяцев): 1 месяц с возможностью продления", "Продолжительность проекта (от 3х месяцев): 2 месяца с возможностью продления", "Продолжительность проекта (от 3х месяцев):1 мес", "Продолжительность проекта (от 3х месяцев):3 мес", "Продолжительность проекта (от 3х месяцев):от 3 мес", "Продолжительность проекта (от 3х месяцев): от 3х месяцев", "3+ мес" и т.п.
            Примеры для пропуска: "Продолжительность проекта (от 3х месяцев):4 мес", "Продолжительность проекта (от 3х месяцев): от 6 мес", "Продолжительность проекта (от 3х месяцев):6+ мес" и т.п.

            Правило 2 (Дедлайн): Отсечь, если дедлайн в прошлом или сегодня. Сегодняшняя дата: {current_date}.

            Если нужно отсечь хотя бы по одному из правил, верни слово "ДА". Если не нужно отсечь, верни слово "НЕТ". Не добавляй никаких других слов и знаков.
            """
        },
        {
            "role": "user",
            "text": text,
        },
    ]

    try:
        result = (sdk.models.completions("yandexgpt").configure(temperature=0.1).run_deferred(messages, timeout=60)).wait()
        return result.alternatives[0].text.strip()
    except Exception as e:
        print(f"Ошибка при проверке: {e}")
        return "НЕТ"

async def del_contacts_gpt(text):
    """
    Основная функция обработки текста вакансии.
    Выполняет очистку, извлечение данных и форматирование.
    """
    messages = [
        {
            "role": "system",
            "text": """
Ты — фильтр вакансий. На вход приходит ТЕКСТ ВАКАНСИИ. Работай строго по правилам ниже.
При противоречиях выбирай ОТСЕЧЬ. Логика между разделами — И (AND).
Сегодня: {current_date} {current_time} ({current_tz}).

‼️ ВАЖНО: ПРИ СОХРАНЕНИИ ТЕКСТА ОБЯЗАТЕЛЬНО:
- Не изменяй порядок строк, абзацев, списков.
- Сохраняй все пустые строки между абзацами и пунктами.
- Сохраняй все исходные маркеры списков (-, •, —, 1), эмодзи, символы, пробелы и табуляции.
- Не объединяй строки, не убирай переносы.
- Удаляй только те элементы, которые явно указаны в инструкциях. Все остальные переносы строк, пробелы и структура должны остаться **точно такими же**, как в оригинале.
- Не вставляй дополнительные пустые строки и не удаляй существующие.


ПРИОРИТЕТ:
- Если обнаружено хоть одно запрещающее условие — вакансия ОТСЕКАЕТСЯ (text=None и остальные поля=None),
  даже если присутствуют разрешающие формулировки в других местах текста.

НОРМАЛИЗАЦИИ:
- РБ ≡ Беларусь ≡ Belarus ≡ BY; РФ ≡ Россия ≡ Russian Federation ≡ Russia ≡ RU.
- Города РБ: Минск, Брест, Витебск, Гомель, Гродно, Могилёв (любые падежи).
- «Дружественные страны» / friendly countries / CIS/СНГ / EAEU/ЕАЭС — СЧИТАЙ, что включают Беларусь (РБ).
- Отсутствие ограничений: «любой/любая/any», «без разницы», «всё равно», «не имеет значения»,
  «no restriction», «remote/удалённо», «любой регион/страна», а также ПОЛНОЕ ОТСУТСТВИЕ упоминаний
  локации/гражданства — трактуй как допускающие Беларусь, если нет РФ-ограничителей.
  Исключение: конструкции, привязанные к РФ («любой регион РФ», «работа из любой точки РФ») — это ограничители РФ.
- Перечисления стран (разделители «/», «,», «и», «or»), напр. «РБ/РФ», «РБ и РФ», «РФ, РБ» —
  трактуй как ДОПУСК обоих, это НЕ ограничитель РФ.
- Тайм-зоны: МСК/MSK = UTC+3. Если TZ не указана, используй {current_tz}.

ДВОЙНОЙ СТОП-КОНТРОЛЬ РФ (2 слоя защиты):
1) «Прямое указание без альтернатив». Если в строке с локацией/гражданством указано
   «РФ/Россия/RF/Russia» и ни в этой, ни в непосредственной следующей строке нет альтернатив
   (РБ/Belarus/BY/remote/any/no restriction/friendly countries/CIS/СНГ/EAEU/ЕАЭС),
   то это считается ограничителем РФ → ОТСЕЧЬ.
2) «Явные РФ-ограничители». Любые формулировки: «только РФ», «из РФ», «на территории РФ», «жители РФ»,
   «работа из любой точки РФ», «любой регион РФ», «лок: РФ», «оформление в РФ», «нахождение в РФ обязательно»,
   «только гражданство РФ», «паспорт РФ обязателен», «налоговое резидентство РФ обязательно»,
   «только граждане РФ», «только россияне» → ОТСЕЧЬ.

БЛОК B. ОБЩИЕ КРИТЕРИИ ОТСЕВА (любой пункт → ОТСЕЧЬ):
B1. ЛОКАЦИЯ: ОТСЕЧЬ, если выполнен любой из слоёв «ДВОЙНОГО СТОП-КОНТРОЛЯ РФ» для локации.
B2. ГРАЖДАНСТВО: ОТСЕЧЬ, если выполнен любой из слоёв «ДВОЙНОГО СТОП-КОНТРОЛЯ РФ» для гражданства.
B3. ОПЛАТА/АКТИРОВАНИЕ: отсрочка > 35 рабочих дней ИЛИ > 50 календарных дней,
    ИЛИ встречаются фразы/эквиваленты (в любом регистре/языке):
    «акты поквартально», «квартальное актирование», «поквартальная оплата», «актирование», «ежеквартально»,
    «quarterly invoicing/billing», «net 60», «net 90», «N60», «N90», «deferred payment», «post-payment».
B4. Запрет на подачу: «стоп»/«STOP»/«❌ стоп» и подобные.

БЛОК C. КРИТЕРИИ ПРОХОЖДЕНИЯ (ДОЛЖНЫ быть истинны одновременно; иначе — ОТСЕЧЬ):
C1. ЛОКАЦИЯ: допускается РБ/Беларусь, ИЛИ указаны «дружественные страны»/CIS/СНГ/EAEU/ЕАЭС/friendly countries,
    ИЛИ «удалённо/any/no restriction/любая/без разницы/всё равно/не имеет значения»,
    ИЛИ про локацию НИЧЕГО НЕ СКАЗАНО — и при этом НЕТ РФ-ограничителей и НЕ сработал слой (1) выше.
    Перечисления «РБ/РФ», «РБ и РФ», «РФ, РБ» — проходят (если нет РФ-ограничителей).
    Если указана ровно одна страна из пары (например, «Локация: РФ») без альтернатив в этой/следующей строке —
    условие C1 НЕ выполнено.
C2. ГРАЖДАНСТВО: допускается гражданство РБ, ИЛИ «дружественные страны»/CIS/СНГ/EAEU/ЕАЭС/friendly countries,
    ИЛИ «любое/any/no restriction/без ограничений/без разницы/всё равно/не имеет значения»,
    ИЛИ про гражданство НИЧЕГО НЕ СКАЗАНО — и при этом НЕТ РФ-ограничителей и НЕ сработал слой (1) выше.
    Если указано ровно «Гражданство: РФ» без альтернатив — условие C2 НЕ выполнено.

ЕСЛИ ВЫПОЛНИЛОСЬ ХОТЯ БЫ ОДНО УСЛОВИЕ ОТСЕВА из блоков A (сроки) или B, ИЛИ не выполнены условия C1/C2,
— верни структуру с полями = None (см. «ФОРМАТ ОТВЕТА» ниже). Иначе — продолжай обработку.

ОБРАБОТКА ТЕКСТА (выполняй последовательно; применяется ТОЛЬКО если вакансия НЕ отсечена):
A) Полностью УДАЛИ из текста любые упоминания условий оплаты/актирования/сроков оплаты/отсрочек.
B) Унифицируй заключительный блок контакта:
   любые варианты «Вопросы и предложения … @username … Указать 🆔 запроса.»
   ЗАМЕНИ на: «Вопросы и предложения пишите Дмитрию ➡️@Dimitryver. Указать 🆔 запроса.»
   (распознавай произвольные формулировки и любые @имена).
C) УДАЛИ все контакты:
   email (включая обфускации типа «name[at]domain dot com»), телефоны/WhatsApp/Telegram/ссылки
   (http/https, t.me, @username), юзернеймы, короткие ссылки.
D) Если в начале есть заголовок вакансии (например: «🥇 Java разработчик c Camunda»),
   УДАЛИ его из текста и верни в ключ "vacancy_title" (без эмодзи и лишних пробелов).
E) Найди ПЕРВЫЙ идентификатор:
   • «🆔 XX-1234» (XX — латинские заглавные, 1234 — цифры) ИЛИ
   • «🆔 8581» (только цифры).
   УДАЛИ его из текста и верни "vacancy_id" без символа 🆔. Если нет — None.
F) СТАВКА ("rate"): найди числовую ставку/ставку закупки. Если указаны две — для РФ и для не РФ —
   возьми ставку для НЕ РФ. Если единственная — верни её. Верни ТОЛЬКО число (без валют/«от»/«~»/«/»).
   Если ставки нет («смотрим вашу» и т.п.) — верни "rate": 0. Исходные упоминания ставки УДАЛИ.
G) ТРЕБОВАНИЯ (объединение «плюсов» с основными требованиями)

Цель: собрать единый блок «Требования», дополнив его пунктами из «плюсов», при этом
сохранить исходный вид каждого пункта (переносы, маркеры, эмодзи) и порядок.

G1. Где брать основной список:
- Основной список — это разделы с заголовками: «Требования», «Основные требования», «Обязательные требования»,
  а также их англ. аналоги: «Requirements», «Required», «Must have».
- Если ни один из таких разделов не найден, но присутствуют «плюсы», создай основной раздел «Требования»
  и помести его на место первого найденного раздела с требованиями/плюсами.

G2. Что считать «плюсами» (распознавать без учёта регистра, пунктуации и с вариативностью формулировок):
- Заголовки/подзаголовки: «Будет плюсом», «Будет Плюсом», «Будет большим плюсом»,
  «Будет преимуществом», «Большим преимуществом будет», «Плюсом», «Плюсом будет», «Как плюс»,
  «Желательно», «Предпочтительно», «Не обязательно, но желательно», «Опционально»,
  Англ.: «Nice to have», «Good to have», «Would be a plus», «Big/Strong plus», «Preferred»,
  «Optional», «Bonus», «As a/An advantage», «Advantageous».
- Маркеры внутри пунктов: фразы в скобках/хвостах типа «(будет плюсом)», «(как плюс)», «[optional]»,
  «(желательно)», «(preferred)», «(nice to have)».
- Символьные/эмодзи-маркеры «плюсов»: «➕ …», «+ …», «🌟 …», «⭐ …», если они явно вводят раздел или пункты «плюсов».

G3. Что НЕ считать «плюсами» (не переносить в требования):
- Разделы «Преимущества/Бонусы/Мы предлагаем/Benefits/Perks/Conditions/Условия», где речь об условиях работы
  (ДМС, отпуск, удалёнка, корпоративные плюшки и т.п.).
- Разделы «Задачи/Обязанности/Responsibilities/What you will do».

G4. Как объединять:
- Вырежи ТОЛЬКО заголовки «плюсов» и вводные фразы («Будет плюсом:», «Желательно:» и т.п.),
  сами пункты оставь без изменений.
- Если «плюсы» перечислены абзацем через запятые/точки с запятой, не «переламывай» формат —
  перенеси их как один пункт-строку, сохранив исходную пунктуацию.
- Если «плюс» указан в конце пункта в скобках (например: «— опыт с Kafka (будет плюсом)»),
  перенеси этот пункт из исходного места в конец списка требований и УДАЛИ только пометку в скобках.
- Порядок:
  1) Сначала идут исходные «обязательные» пункты в их изначальном порядке.
  2) Затем — все «плюсы» в порядке появления по тексту сверху вниз и по разделам.
- Дубли:
  - Удали точные дубликаты пунктов (сравнивая текст после trim и без финальной точки/точки с запятой).
  - Не выполняй агрессивную «нормализацию смысла» — только точные повторы.

G5. Сохранение формата (строго):
- Сохрани исходные маркеры и оформление пунктов: «- », «• », «— », нумерацию «1)», «1.», эмодзи, тире, кавычки.
- Сохрани регистр, орфографию, спецсимволы, пробелы, табы, пустые строки между пунктами.
- Не «склеивай» строки и не меняй разметку; изменять можно только:
  (а) удаление заголовков «плюсов»/вводных меток,
  (б) удаление скобочной пометки «(будет плюсом/optional/….)» у перенесённых пунктов,
  (в) перемещение «плюсовых» пунктов в конец основного списка.
H) ДЕДЛАЙН (извлечение значений, не отсев): определи дедлайн (дату/время) по правилам твоего блока про дедлайн.
   Верни "deadline_date" = "DD.MM.YYYY" или None; "deadline_time" = "HH:MM" или None.
I) СОХРАНЕНИЕ СТРУКТУРЫ ТЕКСТА: строго СОХРАНИ исходную структуру вакансии —
   порядок строк и абзацев, пустые строки, маркеры списков (-, •, —), нумерацию, тире, кавычки,
   эмодзи и спецсимволы, исходный регистр букв, последовательности пробелов/табов.
   Ничего не переформатируй и не «склеивай»; удаляй только явно указанные части (оплата/контакты/id-подпись),
   все остальные символы и переносы строк должны остаться без изменений.

ФОРМАТ ОТВЕТА — СТРОГО СЛОВАРЬ:
{
  "text": "<очищенный текст вакансии>" или None (если отсечена),
  "rate": <целое число или 0> или None,
  "deadline_date": "DD.MM.YYYY" или None,
  "deadline_time": "HH:MM" или None,
  "vacancy_id": "<id или None>",
  "vacancy_title": "<заголовок или None>"
}
Никаких других слов/символов не добавляй.

"""
        },
        {
            "role": "user",
            "text": text,
        },
    ]

    try:
        result = (sdk.models.completions("yandexgpt").configure(temperature=0.1).run_deferred(messages, timeout=180)).wait()
        clean_text = result.alternatives[0].text
        cleaned = clean_text.strip("` ")
        return ast.literal_eval(cleaned)
    except Exception as e:
        print(f"Ошибка при обработке вакансии: {e}")
        return {'text': None, 'rate': None, 'deadline_date': None, 'deadline_time': None, 'vacancy_id': None, 'vacancy_title': None}

async def process_vacancy(text):
    """
    Главная функция, которая координирует проверку и обработку вакансии.
    """
    should_reject = await check_duration_and_deadline_gpt(text)

    if should_reject == 'ДА':
        print("Проект отсеян. Возвращаем None.")
        return {'text': None, 'rate': None, 'deadline_date': None, 'deadline_time': None, 'vacancy_id': None, 'vacancy_title': None}
    else:
        print("Проект подходит. Продолжаем обработку.")
        return await del_contacts_gpt(text)

# Пример использования
# async def main():
#     vacancy_text = """
#     Продолжительность проекта : до 30.12.2025
#     🆔BE-8632

#     Дедлайн приема заявок: до 30.09.2025

#     Java разработчик c Camunda

#     Месячная ставка(на руки) до: 160 000 RUB

#     О кандидате:

#     Грейд: Senior
#     Локация специалиста: любая
#     Тайм-зона проекта: мск
#     Гражданство: любое

#     О проекте:
#     Описание проекта:* Логистическая компания, которая занимается доставкой заказов клиентов в постаматы своей сети.
#     Команда RANDI создает решения, которые оптимизируют работу инцидентов, нотификаций и автоматизируют обращения от наших партнеров и клиентов.
#     Стек технологий: Java 11-21, Spring (Boot, Core, Web, Data, Test), PostgreSQL, Hibernate, Kafka, Camunda BPM, ELK, GitLab CI, Docker/Kubernetes, Mockito.
#     Название конечного клиента или отрасль: 5post
#     Дата старта проекта: ASAP
#     Оформление:
#     Тип занятости: удалёнка
#     Загрузка: фулл-тайм
#     Особые условия:
#     Кандидат должен иметь опыт работы в корпорации, не на стартапе.
#     Работа строго в графике с 9 до 18 по МСК, без гибкого рабочего дня. Это критично❗️
#     - Необходима симка с Российским номером (+7...);
#     - Необходимо подписание NDA по форме клиента;
#     - При отклике на вакансию просьба указывать полностью ФИО кандидата.

#     Вопросы и предложения пишите Дмитрию ➡️@Dimitryver. Указать 🆔 запроса.

#     📝Присылать СV + данные по кандидату:
#     ● ФИО
#     ● Страна + Город
#     ● Грейд
#     ● Ставка
#     ● Оценить требования ДА/НЕТ, в соответствии с наличием опыта.️

#     📌 Задачи:
#     - Разработка, отладка и поддержка микросервисных приложений;
#     - Разработка unit-тестов;
#     - Реализация интеграционного взаимодействия внутри микросервисной архитектуры, а также с внешними сервисами;
#     - Реализация взаимодействия ПО с постаматным оборудованием;
#     - Рефакторинг и оптимизация существующего кода;
#     - Code Review.

#     💻 Требования:**
#     - Необходимо подписание NDA по форме клиента;
#     - Коммерческая разработка на Java от 5+ лет; (можно меньше, если кандидат прям звездочка)
#     - Опыт работы со Spring (Boot, Core, Web, Data, Test);
#     - Опыт с реляционными базами данных PostgreSQL;
#     - Опыт разработки микросервисов (обязательно на последнем месте работы);
#     - Хорошие знания и практический опыт работы с Kafka;
#     - Понимание принципов работы с Docker/Kubernetes;
#     - Опыт с инцидентами, дефектами с прода;
#     - Понимание CI/CD;
#     - Опыт работы с JPA (Hibernate);
#     - Знания и практический опыт с Camunda 7;
#     - Базовое понимание работы с командной строкой Linux. отсюда
#     """
#     result = await process_vacancy(vacancy_text)
#     print(json.dumps(result, indent=2, ensure_ascii=False))

# if __name__ == "__main__":
#     import asyncio
#     asyncio.run(main())
