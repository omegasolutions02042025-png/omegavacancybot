import gspread
from typing import Optional
from typing import List, Optional, Dict, Any
from google.oauth2.service_account import Credentials
import os
import re
import math
import gspread
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
# –ó–∞–º–µ–Ω–∏—Ç–µ 'path/to/your/credentials.json' –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É
# –ö–ª—é—á —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ Google Cloud Console.
SERVICE_ACCOUNT_FILE = 'creds.json'

# –ó–∞–º–µ–Ω–∏—Ç–µ 'your_spreadsheet_id' –Ω–∞ ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã.
# ID –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ URL: https://docs.google.com/spreadsheets/d/your_spreadsheet_id/edit#gid=...
SPREADSHEET_ID = '1ApDxmH0BL4rbuKTni6cj-D_d0vJ5KG45sEQjOyXM3PY'

# –ò–º—è –ª–∏—Å—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ
SHEET_NAME = '–î–ª—è –ë–æ—Ç–∞'

SHEET_URL = 'https://docs.google.com/spreadsheets/d/1ApDxmH0BL4rbuKTni6cj-D_d0vJ5KG45sEQjOyXM3PY/edit#gid=0'
# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---
def find_rate_in_sheet_gspread(search_value_usd: int) -> Optional[str]:
    """
    –ò—â–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ J (–°—Ç–∞–≤–∫–∞ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏, USD) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ B (–í–µ—Ä—Ö–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –≤–∏–ª–∫–∏, RUB).
    –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ—Ç –±–ª–∏–∂–∞–π—à–µ–µ —á–∏—Å–ª–æ.

    Args:
        search_value_usd (int): –ò—Å–∫–æ–º–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç–æ–ª–±—Ü–µ J.

    Returns:
        str | None: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ B, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏–Ω–∞—á–µ None.
    """
    try:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é gspread
        gc = gspread.service_account(filename=SERVICE_ACCOUNT_FILE)

        # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ ID
        sh = gc.open_by_key(SPREADSHEET_ID)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω—É–∂–Ω–æ–º—É –ª–∏—Å—Ç—É –ø–æ –∏–º–µ–Ω–∏
        worksheet = sh.worksheet(SHEET_NAME)
        if search_value_usd == None:
            return None
        if search_value_usd <= 300:
            j_column_values = worksheet.col_values(11)
        else:
            j_column_values = worksheet.col_values(10)
        
        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–∞–∫ –ø–æ —á–∏—Å–ª—É
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (—á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏)
        target_value = int(search_value_usd)
        closest_value = None
        min_difference = float('inf')
        
        for row_index, value in enumerate(j_column_values, start=1):
            if row_index == 1:
                continue
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ —è—á–µ–π–∫—É –∫ int (—É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á)
            cell_text = str(value).strip().replace('\xa0', '').replace(' ', '').replace(',', '')
            try:
                cell_number = int(float(cell_text)) if ('.' in cell_text) else int(cell_text)
            except ValueError:
                continue
                
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
            if cell_number == target_value:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                row_values = worksheet.row_values(row_index)
                # –°—Ç–æ–ª–±–µ—Ü B - —ç—Ç–æ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç (–∏–Ω–¥–µ–∫—Å 1)
                if len(row_values) > 1 and row_values[1] != "":
                    return row_values[1]
            
            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ
            difference = abs(cell_number - target_value)
            if difference < min_difference:
                min_difference = difference
                closest_value = (row_index, cell_number)
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ —á–∏—Å–ª–æ
        if closest_value:
            row_index, cell_number = closest_value
            row_values = worksheet.row_values(row_index)
            if len(row_values) > 1 and row_values[1] != "":
                return row_values[1]

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        return None

    except gspread.exceptions.APIError as e:
        print(f"–û—à–∏–±–∫–∞ API Google Sheets: {e}")
        return None
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None



def search_and_extract_values(
    search_column: str,
    search_value: float,
    extract_columns: List[str],
    worksheet_name: str = "Resume_Database"
) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    
    Args:
        search_column: –ë—É–∫–≤–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'B')
        search_value: –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        extract_columns: –°–ø–∏—Å–æ–∫ –±—É–∫–≤ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['A', 'C', 'D'])
        worksheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    """
    try:
        # URL —Ç–∞–±–ª–∏—Ü—ã
        

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        scopes = ["https://www.googleapis.com/auth/spreadsheets"]
        creds = Credentials.from_service_account_file("./creds.json", scopes=scopes)
        client = gspread.authorize(creds)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ
        spreadsheet = client.open_by_url(SHEET_URL)

        # –í—ã–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç
        try:
            worksheet = spreadsheet.worksheet(worksheet_name)
        except gspread.WorksheetNotFound:
            print(f"‚ùå –õ–∏—Å—Ç '{worksheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        all_values = worksheet.get_all_values()
        if not all_values:
            print("‚ùå –õ–∏—Å—Ç –ø—É—Å—Ç")
            return None

        # –ò–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏
        search_col_index = ord(search_column.upper()) - ord('A')

        # –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ ¬±20
        search_range = list(range(int(search_value) - 20, int(search_value) + 21))
        print(f"üîç –ü–æ–∏—Å–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {search_range[0]} - {search_range[-1]} –≤ –∫–æ–ª–æ–Ω–∫–µ {search_column}")

        target_row_index = None
        exact_match_row = None
        valid_values = []

        for row_index, row in enumerate(all_values):
            if row_index == 0:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                continue

            if len(row) <= search_col_index:
                continue

            cell_value = row[search_col_index]
            if not cell_value:
                continue

            try:
                cell_value = cell_value.strip().split(",")[0]
                numeric_value = int(re.sub(r"[^\d]", "", cell_value))
                valid_values.append(numeric_value)
                

                if numeric_value == search_value:
                    exact_match_row = row_index
                    target_row_index = row_index
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {numeric_value} –≤ —Å—Ç—Ä–æ–∫–µ {row_index + 1}")
                    break

                if numeric_value in search_range:
                    target_row_index = row_index
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {numeric_value} –≤ —Å—Ç—Ä–æ–∫–µ {row_index + 1}")
                    break

            except (ValueError, AttributeError):
                continue

        if target_row_index is None:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π —Ä—è–¥–æ–º —Å {search_value} –≤ –∫–æ–ª–æ–Ω–∫–µ {search_column}")
            print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {sorted(set(valid_values))[:10]}...")
            return None

        target_row = all_values[target_row_index]

        result = {
            "found_row": target_row_index + 1,
            "search_value_found": target_row[search_col_index] if len(target_row) > search_col_index else "",
            "is_exact_match": exact_match_row is not None,
            "extracted_values": {}
        }

        for col_letter in extract_columns:
            col_index = ord(col_letter.upper()) - ord('A')
            if len(target_row) > col_index:
                clean_value = target_row[col_index].replace("\xa0", "").strip()
                rounded = (int(clean_value) // 1000) * 1000
                clean_value = f"{rounded:,}".replace(",", " ")
                result["extracted_values"][col_letter] = clean_value
            else:
                result["extracted_values"][col_letter] = ""

        print(result["extracted_values"])
        return result["extracted_values"]

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


