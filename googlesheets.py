import asyncio
import os
import re
from typing import Optional, List, Dict, Any
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot
from funcs import parse_cb_rf

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
SERVICE_ACCOUNT_FILE = 'creds.json'
SPREADSHEET_ID = '1ApDxmH0BL4rbuKTni6cj-D_d0vJ5KG45sEQjOyXM3PY'
SHEET_NAME = '–î–ª—è –ë–æ—Ç–∞'
SHEET_URL = 'https://docs.google.com/spreadsheets/d/1ApDxmH0BL4rbuKTni6cj-D_d0vJ5KG45sEQjOyXM3PY/edit#gid=0'

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ===
def get_gspread_client():
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=["https://www.googleapis.com/auth/spreadsheets"])
    return gspread.authorize(creds)

# ======================
# üîπ 1. –ü–æ–∏—Å–∫ —Å—Ç–∞–≤–∫–∏
# ======================
async def find_rate_in_sheet_gspread(search_value_usd: int) -> Optional[str]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏—â–µ—Ç —Å—Ç–∞–≤–∫—É –≤ Google Sheets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."""
    if search_value_usd is None:
        return None

    def _sync_task():
        try:
            gc = get_gspread_client()
            sh = gc.open_by_key(SPREADSHEET_ID)
            ws = sh.worksheet(SHEET_NAME)

            # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            j_column_values = ws.col_values(11 if search_value_usd <= 300 else 10)
            target_value = int(search_value_usd)
            closest_value = None
            min_diff = float("inf")

            for row_index, value in enumerate(j_column_values, start=1):
                if row_index == 1:
                    continue
                cell_text = str(value).strip().replace("\xa0", "").replace(" ", "").replace(",", "")
                try:
                    cell_number = int(float(cell_text)) if "." in cell_text else int(cell_text)
                except ValueError:
                    continue

                if cell_number == target_value:
                    row_values = ws.row_values(row_index)
                    if len(row_values) > 1 and row_values[1]:
                        return row_values[1]

                diff = abs(cell_number - target_value)
                if diff < min_diff:
                    min_diff = diff
                    closest_value = (row_index, cell_number)

            if closest_value:
                row_index, _ = closest_value
                row_values = ws.row_values(row_index)
                if len(row_values) > 1 and row_values[1]:
                    return row_values[1]

            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ find_rate_in_sheet_gspread: {e}")
            return None

    return await asyncio.to_thread(_sync_task)

# ======================
# üîπ 2. –ü–æ–∏—Å–∫ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
# ======================
async def search_and_extract_values(
    search_column: str,
    search_value: int,
    extract_columns: List[str],
    worksheet_name: str = "Resume_Database",
    sheet_url: str = SHEET_URL,
) -> Optional[Dict[str, Any]]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏—â–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫.
    –°–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç - –∏—â–µ—Ç –±–ª–∏–∂–∞–π—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."""
    
    def _sync_task():
        try:
            gc = get_gspread_client()
            spreadsheet = gc.open_by_url(sheet_url)
            ws = spreadsheet.worksheet(worksheet_name)
            all_values = ws.get_all_values()

            if not all_values:
                print("‚ùå –õ–∏—Å—Ç –ø—É—Å—Ç")
                return None

            search_col_index = ord(search_column.upper()) - ord("A")
            target_row = None
            best_match_row = None
            best_diff = float("inf")
            best_value = None
            found_exact_match = False

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å–∫–æ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ int
            target_search_value = int(search_value)

            for row_index, row in enumerate(all_values):
                if row_index == 0:
                    continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(row) <= search_col_index:
                    continue

                cell_value = row[search_col_index]
                if not cell_value:
                    continue

                try:
                    # —É–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, –≤–∞–ª—é—Ç—ã, —Å–∏–º–≤–æ–ª—ã %, "—Ä—É–±", –ø—Ä–æ–±–µ–ª—ã –∏ —Ç.–ø.
                    cleaned = cell_value.replace("\u202f", "").replace("\xa0", "").lower()
                    cleaned = re.sub(r"[^\d,\.]", "", cleaned)  # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫—É –∏ –∑–∞–ø—è—Ç—É—é
                    if not cleaned:
                        continue

                    # –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ float ‚Üí int
                    numeric_value = int(float(cleaned.replace(",", ".")))

                    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    if numeric_value == target_search_value and not found_exact_match:
                        target_row = row
                        best_match_row = row_index
                        best_value = numeric_value
                        found_exact_match = True
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ {best_match_row+1} ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ {best_value}")
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    
                    # 2. –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    if not found_exact_match:
                        diff = abs(numeric_value - target_search_value)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5% –æ—Ç –∏—Å–∫–æ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                        if diff < best_diff and diff <= target_search_value * 0.05:
                            best_diff = diff
                            best_match_row = row_index
                            best_value = numeric_value

                except Exception:
                    continue

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–∏–∂–∞–π—à–µ–µ
            if not found_exact_match and best_match_row is not None:
                target_row = all_values[best_match_row]
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ –±–ª–∏–∂–∞–π—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ {best_match_row+1} ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ {best_value} (—Ä–∞–∑–Ω–∏—Ü–∞ {best_diff})")
            elif best_match_row is None:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è {search_value}")
                return None

            result = {"extracted_values": {}}

            for col_letter in extract_columns:
                col_index = ord(col_letter.upper()) - ord("A")
                if len(target_row) > col_index:
                    clean_value = target_row[col_index].replace("\xa0", "").strip()
                    
                    if len(extract_columns) == 1:
                        rounded = (int(clean_value) // 1000) * 1000
                        clean_value = f"{rounded:,}".replace(",", " ")
                        result["extracted_values"][col_letter] = clean_value
                    else:
                        result["extracted_values"][col_letter] = clean_value
                else:
                    result["extracted_values"][col_letter] = ""

            return result["extracted_values"]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ search_and_extract_values: {e}")
            return None

    return await asyncio.to_thread(_sync_task)

# ======================
# üîπ 3. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
# ======================
async def fill_column_with_sequential_numbers(
    column_letter: str,
    worksheet_name: str = "–°–≤–æ–±–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –∞—É—Ç—Å—Ç–∞—Ñ—Ñ",
    start_row: int = 2,
    value: int = 0,
    sheet_id: str = SPREADSHEET_ID,
) -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ —á–∏—Å–ª–æ–º."""
    
    def _sync_task():
        try:
            gc = get_gspread_client()
            sh = gc.open_by_key(sheet_id)
            ws = sh.worksheet(worksheet_name)

            all_values = ws.get_all_values()
            last_row = len(all_values)
            if last_row < start_row:
                print(f"‚ö†Ô∏è –í –ª–∏—Å—Ç–µ –Ω–µ—Ç —Å—Ç—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞—è —Å {start_row}")
                return False

            values = [[value] for _ in range(start_row, last_row + 1)]
            range_a1 = f"{column_letter}{start_row}:{column_letter}{last_row}"
            ws.update(range_a1, values)
            print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {column_letter} –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ ({worksheet_name})")
            return True
        except gspread.WorksheetNotFound:
            print(f"‚ùå –õ–∏—Å—Ç '{worksheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {sheet_id}")
            return False
        except gspread.exceptions.APIError as e:
            # –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç API-–æ—à–∏–±–∫–∏
            print(f"‚ùå APIError fill_column_with_sequential_numbers: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ fill_column_with_sequential_numbers: {e}")
            return False

    return await asyncio.to_thread(_sync_task)

# ======================
# üîπ 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
# ======================
async def update_currency_sheet(bot: Bot, ADMIN_ID: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞."""
    sheet_name_1 = '–†–∞—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (—à—Ç–∞—Ç) –Æ–õ –†–§'
    sheet_name_2 = '–†–∞—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (–ò–ü) –Æ–õ –†–§'
    sheet_id = '1vjHlEdWO-IkzU5urYrorb0FlwMS7TPfnBDSAhnSYp98'


    while True:
        curses = await asyncio.to_thread(parse_cb_rf)
        usd, eur, byn = curses["USD"], curses["EUR"], curses["BYN"]

        await fill_column_with_sequential_numbers("G", sheet_name_1, 2, usd, sheet_id)
        await asyncio.sleep(2)
        await fill_column_with_sequential_numbers("H", sheet_name_1, 2, eur, sheet_id)
        await asyncio.sleep(2)
        await fill_column_with_sequential_numbers("F", sheet_name_1, 2, byn, sheet_id)
        await asyncio.sleep(2)

        await fill_column_with_sequential_numbers("H", sheet_name_2, 2, usd, sheet_id)
        await asyncio.sleep(2)
        await fill_column_with_sequential_numbers("I", sheet_name_2, 2, eur, sheet_id)
        await asyncio.sleep(2)
        await fill_column_with_sequential_numbers("G", sheet_name_2, 2, byn, sheet_id)
    

        await bot.send_message(ADMIN_ID, f"‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã: BYN {byn}, USD {usd}, EUR {eur}")
        await asyncio.sleep(86400)



#print(asyncio.run(search_and_extract_values("N",910,["B","L"],'–†–∞—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏ (–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π/–ò–ü) –°–ù–ì')))