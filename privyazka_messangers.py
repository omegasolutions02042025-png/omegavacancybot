from aiogram import Router, F   
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import Bot
from kb import service_kb, next_email_kb, next_telegram_kb, accept_delete_tg_kb, accept_delete_email_kb
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from send_email import send_email_gmail
from db import add_email, add_session_tg, remove_session_tg, remove_session_email
import os
from telethon import TelegramClient
from read_jpg import extract_code_from_image
import io
from telethon.errors import SessionPasswordNeededError
from telethon.errors.rpcerrorlist import (
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    FloodWaitError,
    PhoneNumberUnoccupiedError,
    PhoneNumberInvalidError,
)


pr_router = Router()
os.makedirs("sessions", exist_ok=True)

class PrivyazkaEmail(StatesGroup):
    waiting_for_email = State()
    waiting_for_password = State()


class PrivyazkaTelegram(StatesGroup):
    waiting_for_number = State()
    waiting_for_api_id = State()
    waiting_for_api_hash = State()
    waiting_for_code = State()
    waiting_for_password = State()



@pr_router.message(Command("add_account"))
async def add_account(message: Message, bot: Bot):
    user_name = message.from_user.username
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏–≤–∑—è–∫–∏ –∫ –±–æ—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=service_kb(user_name))


@pr_router.callback_query(F.data == "gmail")
async def add_gmail_account(callback: CallbackQuery, bot: Bot):
    await callback.message.answer("""
        ‚úâÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è e-mail


1) –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://myaccount.google.com/

2) –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª ¬´–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å¬ª ‚Üí ¬´–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç Google¬ª.

3) –í–∫–ª—é—á–∏—Ç—å –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.

4) –ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è ‚Äî –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±—Ä–∞—Ç—å ¬´–ü–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π¬ª.

5) –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:

6) –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî ¬´–ü–æ—á—Ç–∞¬ª

7) –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚Äî ¬´–ö–æ–º–ø—å—é—Ç–µ—Ä Windows¬ª –∏–ª–∏ ¬´Mac¬ª

8) –ù–∞–∂–∞—Ç—å ¬´–°–æ–∑–¥–∞—Ç—å¬ª, —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.

9) –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—É—á–∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ".

        """, reply_markup=next_email_kb())


    



@pr_router.callback_query(F.data == "next_email")
async def next_email(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏")
    await state.set_state(PrivyazkaEmail.waiting_for_email)


@pr_router.message(PrivyazkaEmail.waiting_for_email)
async def add_email_account(message: Message, bot: Bot, state: FSMContext):
    email = message.text
    await state.update_data(email=email)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ü–∞—Ä–æ–ª—å –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–π')
    await state.set_state(PrivyazkaEmail.waiting_for_password)


@pr_router.message(PrivyazkaEmail.waiting_for_password)
async def add_email_password(message: Message, bot: Bot, state: FSMContext):
    password = message.text
    user_name = message.from_user.username
    if not user_name:
        message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        return
    data = await state.get_data()
    email = data.get("email")
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    success = await send_email_gmail(
        sender_email=email,
        app_password=password,
        recipient_email="artursimoncik@gmail.com",
        subject="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        body="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    if success:
        await message.answer(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ {email} —É—Å–ø–µ—à–Ω–æ!")
        await add_email(user_name_tg=user_name, user_email=email, password=password)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—á—Ç–µ")
    await state.set_state(PrivyazkaEmail.waiting_for_password)




@pr_router.callback_query(F.data == "telegram")
async def add_telegram(callback: CallbackQuery, bot: Bot):
    await callback.message.answer("""
    –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å API ID –∏ API Hash.–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
    üöÄ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API ID –∏ API Hash
üîπ –®–∞–≥ 1. –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç Telegram Developers

üëâ https://my.telegram.org

üîπ –®–∞–≥ 2. –í–æ–π–¥–∏ —á–µ—Ä–µ–∑ —Å–≤–æ–π Telegram

‚Äî –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,
‚Äî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –≤—Ö–æ–¥ –∫–æ–¥–æ–º –∏–∑ Telegram (–ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ).

üîπ –®–∞–≥ 3. –ó–∞–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª ‚ÄúAPI Development Tools‚Äù

–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –∫–ª–∏–∫–Ω–∏:
"API Development Tools" ‚Üí –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

üîπ –®–∞–≥ 4. –°–æ–∑–¥–∞–π –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–ó–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è:

App title ‚Äî –ª—é–±–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, OmegaTelethonBot)

Short name ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, omega)

URL ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º

Platform ‚Äî –≤—ã–±–µ—Ä–∏ ‚ÄúOther‚Äù

–ù–∞–∂–º–∏ Create application.

üîπ –®–∞–≥ 5. –ü–æ–ª—É—á–∏ –¥–∞–Ω–Ω—ã–µ

–ù–∞ –æ—Ç–∫—Ä—ã–≤—à–µ–π—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—ã —É–≤–∏–¥–∏—à—å:

App api_id: 1234567

App api_hash: abcdef1234567890abcdef1234567890""", reply_markup=next_telegram_kb())


@pr_router.callback_query(F.data == "next_telegram")
async def next_telegram(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await state.set_state(PrivyazkaTelegram.waiting_for_number)


@pr_router.message(PrivyazkaTelegram.waiting_for_number)
async def add_number(message: Message, bot: Bot, state: FSMContext):
    number = message.text
    await state.update_data(number=number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ API ID")
    await state.set_state(PrivyazkaTelegram.waiting_for_api_id)


@pr_router.message(PrivyazkaTelegram.waiting_for_api_id)
async def add_api_id(message: Message, bot: Bot, state: FSMContext):
    api_id = message.text
    await state.update_data(api_id=api_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ API Hash")
    await state.set_state(PrivyazkaTelegram.waiting_for_api_hash)


@pr_router.message(PrivyazkaTelegram.waiting_for_api_hash)
async def add_api_hash(message: Message, bot: Bot, state: FSMContext):
    api_hash = message.text
    data = await state.get_data()
    api_id = data.get("api_id")
    number = data.get("number")
    user_name = message.from_user.username
    if not user_name:
        await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –µ—â–µ —Ä–∞–∑ API Hash")
        return
    client = TelegramClient(f"sessions/{user_name}", api_id, api_hash)
    await client.connect()
    if await client.is_user_authorized():
        me = await client.get_me()
        await message.answer(f"‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @{me.username or me.id}")
        await client.disconnect()
        await state.clear()
        return
    await client.send_code_request(number)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    await state.update_data(client=client, api_hash = api_hash)
    await state.set_state(PrivyazkaTelegram.waiting_for_code)


@pr_router.message(PrivyazkaTelegram.waiting_for_code)
async def add_code(message: Message, bot: Bot, state: FSMContext):
    if not message.photo:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        return
    photo = message.photo[-1]
    os.makedirs("temp", exist_ok=True)
    save_path = os.path.join("temp", f"{photo.file_id}.jpg")
    file_info = await bot.get_file(photo.file_id)
    await bot.download_file(file_info.file_path, destination=save_path)
    code = extract_code_from_image(save_path)
    os.remove(save_path)
    
    data = await state.get_data()
    api_id = data.get("api_id")
    api_hash = data.get("api_hash")
    number = data.get("number")
    client : TelegramClient = data.get("client")
    user_name = message.from_user.username
    if not user_name:
        await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –µ—â–µ —Ä–∞–∑ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        return
    
    try:
        await client.sign_in(code=code)
        me = await client.get_me()
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ {me.first_name} (@{me.username})")
        await client.disconnect()
        await add_session_tg(user_name_tg=user_name, api_id=api_id, api_hash=api_hash)
        await state.clear()
    except SessionPasswordNeededError:
        await message.answer("üîê –í–∫–ª—é—á–µ–Ω–∞ 2FA. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:")
        await state.set_state(PrivyazkaTelegram.waiting_for_password)

    except PhoneCodeInvalidError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥.")
    except PhoneCodeExpiredError:
        await message.answer("‚åõ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫. –ó–∞–ø—Ä–æ—à—É –Ω–æ–≤—ã–π, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–µ–∂–∏–π –∫–æ–¥.")
        # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–∑–æ–≤–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ send_code_request(phone)

    except FloodWaitError as e:
        await message.answer(f"‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except (PhoneNumberUnoccupiedError, PhoneNumberInvalidError):
        await message.answer("‚ùå –ù–æ–º–µ—Ä –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É Telegram –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {type(e).__name__}: {e}")
        

  
@pr_router.message(PrivyazkaTelegram.waiting_for_password)
async def add_password(message: Message, bot: Bot, state: FSMContext):
    password = message.text
    data = await state.get_data()
    api_id = data.get("api_id")
    api_hash = data.get("api_hash")
    number = data.get("number")
    client : TelegramClient = data.get("client")
    user_name = message.from_user.username
    if not user_name:
        await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–∞—Ä–æ–ª—å")
        return
    
    try:
        await client.sign_in(password=password)
        me = await client.get_me()
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ {me.first_name} (@{me.username})")
        await client.disconnect()
        await add_session_tg(user_name_tg=user_name, api_id=api_id, api_hash=api_hash)
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}")

    
@pr_router.callback_query(F.data == "remove_tg")
async def remove_tg(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É Telegram?", reply_markup=accept_delete_tg_kb())
    

@pr_router.callback_query(F.data == "accept_delete_tg")
async def accept_delete_tg(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_name = callback.from_user.username
    os.remove(f'sessions/{user_name}.session')
    await remove_session_tg(user_name_tg=user_name)
    await callback.message.edit_text("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
    


@pr_router.callback_query(F.data == "remove_email")
async def remove_email(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É Email?", reply_markup=accept_delete_email_kb())
    
@pr_router.callback_query(F.data == "accept_delete_email")
async def accept_delete_email(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_name = callback.from_user.username
    await remove_session_email(user_name_tg=user_name)
    await callback.message.edit_text("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")